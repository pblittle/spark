syntax = "proto3";

package spark_token;

import "google/protobuf/timestamp.proto";
import "spark.proto";
import "validate/validate.proto";

option go_package = "github.com/lightsparkdev/spark/proto/spark_token";

service SparkTokenService {
    // Start process to create final token transaction with all inputs required
    // from user and SOs (including revocation secret commitment)
    rpc start_transaction(StartTransactionRequest)
        returns (StartTransactionResponse) {}
    // Complete the transaction and commit it with all SOs. This will be
    // coordinated by one SO.
    rpc commit_transaction(CommitTransactionRequest)
        returns (CommitTransactionResponse) {}

    rpc query_token_metadata(QueryTokenMetadataRequest)
        returns (QueryTokenMetadataResponse) {}

    rpc query_token_transactions(QueryTokenTransactionsRequest)
        returns (QueryTokenTransactionsResponse) {}

    rpc query_token_outputs(QueryTokenOutputsRequest)
        returns (QueryTokenOutputsResponse) {}

    rpc freeze_tokens(FreezeTokensRequest) returns (FreezeTokensResponse) {}
}

// This proto is constructed by the wallet to specify leaves it wants to spend
// as part of the token transaction.
message TokenOutputToSpend {
    bytes prev_token_transaction_hash  = 1 [(validate.rules).bytes.len = 32];
    uint32 prev_token_transaction_vout = 2;
}

message TokenTransferInput {
    repeated TokenOutputToSpend outputs_to_spend = 1;
}

message TokenMintInput {
    bytes issuer_public_key = 1 [(validate.rules).bytes.len = 33];
    optional bytes token_identifier = 2 [(validate.rules).bytes.len = 32];
}

message TokenCreateInput {
    bytes issuer_public_key = 1 [(validate.rules).bytes.len = 33];
    string token_name = 2 [(validate.rules).string = {max_len: 20}]; // No minimum length because a single utf-8 character can be 3 bytes.
    string token_ticker = 3 [(validate.rules).string = {max_len: 6}]; // No minimum length because a single utf-8 character can be 3 bytes.
    uint32 decimals = 4 [(validate.rules).uint32.lte = 255];
    bytes max_supply = 5 [(validate.rules).bytes.len = 16]; // Decoded uint128
    bool is_freezable = 6;
    optional bytes creation_entity_public_key = 7 [(validate.rules).bytes.len = 33];
}

// This proto is constructed by the wallet to specify outputs it wants to create
// as part of a token transaction. Output id and revocation public key should
// remain unfilled so that the SE can fill them as part of the
// StartTokenTransaction() call.
message TokenOutput {
    optional string id     = 1 [(validate.rules).string.uuid = true];
    bytes owner_public_key = 2 [(validate.rules).bytes.len = 33];
    optional bytes revocation_commitment = 3 [(validate.rules).bytes.len = 33];
    optional uint64 withdraw_bond_sats   = 4;
    optional uint64 withdraw_relative_block_locktime = 5;
    optional bytes token_public_key = 6 [(validate.rules).bytes = {len: 33}];
    optional bytes token_identifier = 8 [(validate.rules).bytes.len = 32];
    bytes token_amount     = 7
        [(validate.rules).bytes.len = 16];  // Decoded uint128

}

enum TokenTransactionType {
    TOKEN_TRANSACTION_TYPE_UNSPECIFIED = 0;
    TOKEN_TRANSACTION_TYPE_CREATE = 1;
    TOKEN_TRANSACTION_TYPE_MINT = 2;
    TOKEN_TRANSACTION_TYPE_TRANSFER = 3;
}

// This proto is constructed by the wallet and is the core transaction data
// structure. This proto is deterministically hashed to generate the
// token_transaction_hash that is cooperatively signed by the SO group to
// confirm a token transaction.
message TokenTransaction {
    // For mint transactions issuer_public_key will be specified without any
    // outputs_to_spend. For transfer transactions the token amount in the input
    // leaves must match the token amount in the output leaves.
    uint32 version = 1;
    oneof token_inputs {
        TokenMintInput mint_input         = 2;
        TokenTransferInput transfer_input = 3;
        TokenCreateInput create_input = 8;
    }
    repeated TokenOutput token_outputs                 = 4;
    repeated bytes spark_operator_identity_public_keys = 5
        [(validate.rules).repeated .items.bytes.len = 33];
    // Server-set expiry time. The server calculates this by adding the client's
    // requested validity_duration_seconds to the server's current time when
    // creating the final transaction.
    google.protobuf.Timestamp expiry_time = 6;
    spark.Network network = 7 [(validate.rules).enum = { not_in: [ 0 ] }];
    // The timestamp of when the client created the transaction. This is used to
    // determine which transaction should win in a race condition. Earlier
    // timestamps win over later ones.
    google.protobuf.Timestamp client_created_timestamp = 9;
    // The spark invoices this transaction fulfills.
    repeated InvoiceAttachment invoice_attachments = 10;
}

message InvoiceAttachment {
    string spark_invoice = 1;
}

message SignatureWithIndex {
    // This is a Schnorr or ECDSA DER signature which can be between 64 and 73
    // bytes.
    bytes signature = 1 [
        (validate.rules).bytes.min_len = 64,
        (validate.rules).bytes.max_len = 73
    ];
    // The index of the TTXO associated with this signature.
    uint32 input_index = 2;
}

// A group of signatures for the input TTXOs binding them to the final token
// transaction hash. This bundle of signatures is specific to a given operator.
message InputTtxoSignaturesPerOperator {
    repeated SignatureWithIndex ttxo_signatures = 1;
    bytes operator_identity_public_key = 2 [(validate.rules).bytes.len = 33];
}

// === Start Transaction ===
message StartTransactionRequest {
    bytes identity_public_key = 1 [(validate.rules).bytes.len = 33];
    TokenTransaction partial_token_transaction = 2;
    // Filled by signing the partial token transaction hash with the
    // owner/issuer private key. For mint transactions this will be one
    // signature for the input issuer_public_key For transfer transactions this
    // will be one for each output for the output owner_public_key
    repeated SignatureWithIndex partial_token_transaction_owner_signatures = 3;
    // How long the transaction should be valid for, in seconds.
    // The server will set the actual expiry_time in the final transaction based
    // on this duration. Must be within [1, 300] seconds.
    uint64 validity_duration_seconds = 4
        [(validate.rules).uint64 = { gte: 1, lte: 300 }];
}

message StartTransactionResponse {
    TokenTransaction final_token_transaction = 1;
    spark.SigningKeyshare keyshare_info      = 2;
}

message CommitTransactionRequest {
    TokenTransaction final_token_transaction = 1;
    bytes final_token_transaction_hash = 2 [(validate.rules).bytes.len = 32];
    repeated InputTtxoSignaturesPerOperator
        input_ttxo_signatures_per_operator = 3;
    bytes owner_identity_public_key = 4 [(validate.rules).bytes.len = 33];
}

enum CommitStatus {
    COMMIT_UNSPECIFIED = 0;
    COMMIT_PROCESSING = 1;
    COMMIT_FINALIZED = 2;
}

message CommitProgress {
    repeated bytes committed_operator_public_keys = 1 [(validate.rules).repeated .items.bytes.len = 33];
    repeated bytes uncommitted_operator_public_keys = 2 [(validate.rules).repeated .items.bytes.len = 33];
}

message CommitTransactionResponse {
    CommitStatus commit_status = 1;
    CommitProgress commit_progress = 2;
}

message QueryTokenMetadataRequest {
    repeated bytes token_identifiers = 1 [(validate.rules).repeated .items.bytes.len = 32];
    repeated bytes issuer_public_keys = 2 [(validate.rules).repeated .items.bytes.len = 33];
}

message TokenMetadata {
    bytes issuer_public_key = 1 [(validate.rules).bytes.len = 33];
    string token_name = 2 [(validate.rules).string = {max_len: 20}];
    string token_ticker = 3 [(validate.rules).string = {max_len: 6}];
    uint32 decimals = 4 [(validate.rules).uint32.lte = 255];
    bytes max_supply = 5 [(validate.rules).bytes.len = 16]; // Decoded uint128
    bool is_freezable = 6;
    optional bytes creation_entity_public_key = 7 [(validate.rules).bytes.len = 33];
    bytes token_identifier = 8 [(validate.rules).bytes.len = 32];
}

message QueryTokenMetadataResponse {
    repeated TokenMetadata token_metadata = 1;
}

message QueryTokenOutputsRequest {
    repeated bytes owner_public_keys = 1 [(validate.rules).repeated.items.bytes.len = 33];
    // Optionally provide issuer public keys or token identifiers. If both are not set return outputs for all tokens.
    repeated bytes issuer_public_keys = 2 [(validate.rules).repeated.items.bytes.len = 33];
    repeated bytes token_identifiers = 4 [(validate.rules).repeated.items.bytes.len = 32];
    spark.Network network = 3; // defaults to mainnet when no network is provided.
    // For pagination
    spark.PageRequest page_request = 5;
}

// Request constraints are combined using an AND relation.
message QueryTokenTransactionsRequest {
    // Returns transactions that have one of these output ids in the input or output.
    repeated string output_ids = 1 [(validate.rules).repeated.items.string.uuid = true];
    // Returns transactions that have this owner public key as the sender or receiver in one or more of the input/output leaves.
    repeated bytes owner_public_keys = 2 [(validate.rules).repeated.items.bytes.len = 33];
    // Returns transactions that related to this token public key.
    repeated bytes issuer_public_keys = 3 [(validate.rules).repeated.items.bytes.len = 33];
    // Returns transactions that related to this token identifier.
    repeated bytes token_identifiers = 7 [(validate.rules).repeated.items.bytes.len = 32];
    // Returns transactions that match the provided transaction hashes.
    repeated bytes token_transaction_hashes = 4 [(validate.rules).repeated.items.bytes.len = 32];
    int64 limit = 5;
    int64 offset = 6;
}

message QueryTokenTransactionsResponse {
    repeated TokenTransactionWithStatus token_transactions_with_status = 1;
    int64 offset = 2;
}

message OutputWithPreviousTransactionData {
    TokenOutput output = 1;
	bytes previous_transaction_hash = 2 [(validate.rules).bytes.len = 32];
	uint32 previous_transaction_vout = 3;
}

message QueryTokenOutputsResponse {
    repeated OutputWithPreviousTransactionData outputs_with_previous_transaction_data = 1;
    spark.PageResponse page_response = 2;
}

enum TokenTransactionStatus {
    TOKEN_TRANSACTION_STARTED = 0;
    TOKEN_TRANSACTION_SIGNED = 1;
    TOKEN_TRANSACTION_REVEALED = 5;
    TOKEN_TRANSACTION_FINALIZED = 2;
    TOKEN_TRANSACTION_STARTED_CANCELLED = 3;
    TOKEN_TRANSACTION_SIGNED_CANCELLED = 4;
    TOKEN_TRANSACTION_UNKNOWN = 10;
}

message SpentTokenOutputMetadata {
    string output_id = 1;
    bytes revocation_secret = 2;
}

message TokenTransactionConfirmationMetadata {
    repeated SpentTokenOutputMetadata spent_token_outputs_metadata = 1;
}

message TokenTransactionWithStatus {
    TokenTransaction token_transaction = 1;
    TokenTransactionStatus status = 2;
    TokenTransactionConfirmationMetadata confirmation_metadata = 3;
    // In rare cases the above reconstructed token transaction may not match the original token transaction due to:
    // a) a pre-empted transfer transaction having its input TTXOs remapped to the newer transaction
    // b) proto migrations or field deprecations resulting in missing/swapped fields (eg. token public key -> token identifier) 
    // Include the original hash to ensure clients can reconcile this transaction with the original if needed.
    bytes token_transaction_hash = 4 [(validate.rules).bytes.len = 32];
}


message FreezeTokensPayload {
    uint32 version = 1;
    bytes owner_public_key = 2 [(validate.rules).bytes.len = 33];
    optional bytes token_public_key = 3 [(validate.rules).bytes.len = 33];
    optional bytes token_identifier = 4 [(validate.rules).bytes.len = 32];
    uint64 issuer_provided_timestamp = 5;
    bytes operator_identity_public_key = 6 [(validate.rules).bytes.len = 33];
    // Set to false when requesting a freeze.
    bool should_unfreeze = 7;
}

message FreezeTokensRequest {
    FreezeTokensPayload freeze_tokens_payload = 1;
    // This is a Schnorr or ECDSA DER signature which can be between 64 and 73 bytes.
    bytes issuer_signature = 2 [(validate.rules).bytes.min_len = 64, (validate.rules).bytes.max_len = 73];
}

message FreezeTokensResponse {
    repeated string impacted_output_ids = 1 [(validate.rules).repeated.items.string.uuid = true];
    bytes impacted_token_amount = 2;  // Decoded uint128
}
