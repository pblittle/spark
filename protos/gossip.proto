syntax = "proto3";

package gossip;

option go_package = "github.com/lightsparkdev/spark/proto/gossip";
import "spark.proto";
import "common.proto";
import "google/protobuf/timestamp.proto";
import "spark_internal.proto";
import "google/protobuf/empty.proto";

service GossipService {
    rpc gossip(GossipMessage) returns (google.protobuf.Empty);
}
message GossipMessage {
    string message_id = 1;
    reserved 3;
    oneof message {
        GossipMessageCancelTransfer cancel_transfer = 2;
        GossipMessageSettleSenderKeyTweak settle_sender_key_tweak = 4;
        GossipMessageRollbackTransfer rollback_transfer = 5;
        GossipMessageMarkTreesExited mark_trees_exited = 6;
        GossipMessageFinalizeTreeCreation finalize_tree_creation = 7;
        GossipMessageFinalizeTransfer finalize_transfer = 8;
        GossipMessageFinalizeRefreshTimelock finalize_refresh_timelock = 9;
        GossipMessageFinalizeExtendLeaf finalize_extend_leaf = 10;
        GossipMessageRollbackUtxoSwap rollback_utxo_swap = 11;
        GossipMessageDepositCleanup deposit_cleanup = 12;
        GossipMessagePreimage preimage = 13;
        GossipMessageFinalizeRenewRefundTimelock finalize_refund_timelock = 14;
        GossipMessageFinalizeRenewNodeTimelock finalize_node_timelock = 15;
    }
}

message GossipMessageCancelTransfer {
    string transfer_id = 1;
}

// Rolling back a transfer reverts it to its initial state. Only transfers that
// have not been key-tweaked by the sender are eligible for rollback.
message GossipMessageRollbackTransfer {
    string transfer_id = 1;
}


message GossipMessageSettleSenderKeyTweak {
    string transfer_id = 1;
    // The key tweak proofs for the leaves that this message is to commit.
    // This is a safe guard to ensure that we can detect mismatch key tweaks, but if the proofs
    // don't match, there's no way to recover at this point.
    map<string, spark.SecretProof> sender_key_tweak_proofs = 2;
}

message GossipMessageMarkTreesExited {
    repeated string tree_ids = 1;
}

message GossipMessageFinalizeTreeCreation {
    repeated spark_internal.TreeNode internal_nodes = 1;
    spark.Network proto_network = 2;
}

message GossipMessageFinalizeTransfer {
    string transfer_id = 1;
    repeated spark_internal.TreeNode internal_nodes = 2;
    google.protobuf.Timestamp completion_timestamp = 3;
}

message GossipMessageFinalizeRefreshTimelock {
    repeated spark_internal.TreeNode internal_nodes = 1;
}

message GossipMessageFinalizeExtendLeaf {
    repeated spark_internal.TreeNode internal_nodes = 1;
}

message GossipMessageFinalizeRenewRefundTimelock {
  spark_internal.TreeNode node = 1;
}

message GossipMessageFinalizeRenewNodeTimelock {
  spark_internal.TreeNode split_node = 1;
  spark_internal.TreeNode node = 2;
}

// Rollback UTXO swap is called when Create UTXO swap transaction failed to
// fully complete. This reverts the state back to before the swap, allowing the
// user to initiate the UTXO swap again.
message GossipMessageRollbackUtxoSwap {
    // UTXO swap is identified by UTXO
    spark.UTXO on_chain_utxo = 1;
    // Signature of the Coordinator that started the Create UTXO swap transaction
    bytes signature = 2;
    // Identity key of the Coordinator
    bytes coordinator_public_key = 3;
}

message GossipMessageDepositCleanup {
    string tree_id = 1;
}

message GossipMessagePreimage {
    bytes preimage = 1;
    bytes payment_hash = 2;
}
