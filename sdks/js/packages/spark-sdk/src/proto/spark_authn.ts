// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: spark_authn.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";

export const protobufPackage = "spark_authn";

/** Challenge represents the core challenge data */
export interface Challenge {
  /** Protocol version for backward compatibility */
  version: number;
  /** Timestamp when challenge was issued (UTC Unix seconds) */
  timestamp: number;
  /** Random nonce to prevent replay attacks (32 bytes) */
  nonce: Uint8Array;
  /** The public key this challenge is intended for (uncompressed secp256k1 public key) */
  publicKey: Uint8Array;
}

/** ProtectedChallenge wraps a Challenge with a server HMAC */
export interface ProtectedChallenge {
  /** Protocol version for backward compatibility */
  version: number;
  /** The core challenge data */
  challenge:
    | Challenge
    | undefined;
  /** Server's HMAC of the Challenge */
  serverHmac: Uint8Array;
}

/** Request to initiate an authentication challenge */
export interface GetChallengeRequest {
  /** Client's public key (uncompressed secp256k1 public key) */
  publicKey: Uint8Array;
}

/** Response containing the protected challenge */
export interface GetChallengeResponse {
  /** The protected challenge from the server */
  protectedChallenge: ProtectedChallenge | undefined;
}

/** Request to verify a signed challenge */
export interface VerifyChallengeRequest {
  /** The protected challenge from the server */
  protectedChallenge:
    | ProtectedChallenge
    | undefined;
  /** Client's secp256k1 signature of the Challenge */
  signature: Uint8Array;
  /** Client's public key (uncompressed secp256k1 public key) */
  publicKey: Uint8Array;
}

/** Response after successful authentication */
export interface VerifyChallengeResponse {
  /** Session token for subsequent API calls */
  sessionToken: string;
  /** Token expiration timestamp (UTC Unix seconds) */
  expirationTimestamp: number;
}

function createBaseChallenge(): Challenge {
  return { version: 0, timestamp: 0, nonce: new Uint8Array(0), publicKey: new Uint8Array(0) };
}

export const Challenge: MessageFns<Challenge> = {
  encode(message: Challenge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(26).bytes(message.nonce);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(34).bytes(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Challenge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Challenge {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
    };
  },

  toJSON(message: Challenge): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<Challenge>): Challenge {
    return Challenge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Challenge>): Challenge {
    const message = createBaseChallenge();
    message.version = object.version ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.nonce = object.nonce ?? new Uint8Array(0);
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProtectedChallenge(): ProtectedChallenge {
  return { version: 0, challenge: undefined, serverHmac: new Uint8Array(0) };
}

export const ProtectedChallenge: MessageFns<ProtectedChallenge> = {
  encode(message: ProtectedChallenge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    if (message.challenge !== undefined) {
      Challenge.encode(message.challenge, writer.uint32(18).fork()).join();
    }
    if (message.serverHmac.length !== 0) {
      writer.uint32(26).bytes(message.serverHmac);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedChallenge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.challenge = Challenge.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverHmac = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedChallenge {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      challenge: isSet(object.challenge) ? Challenge.fromJSON(object.challenge) : undefined,
      serverHmac: isSet(object.serverHmac) ? bytesFromBase64(object.serverHmac) : new Uint8Array(0),
    };
  },

  toJSON(message: ProtectedChallenge): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.challenge !== undefined) {
      obj.challenge = Challenge.toJSON(message.challenge);
    }
    if (message.serverHmac.length !== 0) {
      obj.serverHmac = base64FromBytes(message.serverHmac);
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedChallenge>): ProtectedChallenge {
    return ProtectedChallenge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedChallenge>): ProtectedChallenge {
    const message = createBaseProtectedChallenge();
    message.version = object.version ?? 0;
    message.challenge = (object.challenge !== undefined && object.challenge !== null)
      ? Challenge.fromPartial(object.challenge)
      : undefined;
    message.serverHmac = object.serverHmac ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGetChallengeRequest(): GetChallengeRequest {
  return { publicKey: new Uint8Array(0) };
}

export const GetChallengeRequest: MessageFns<GetChallengeRequest> = {
  encode(message: GetChallengeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey.length !== 0) {
      writer.uint32(10).bytes(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChallengeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChallengeRequest {
    return { publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0) };
  },

  toJSON(message: GetChallengeRequest): unknown {
    const obj: any = {};
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<GetChallengeRequest>): GetChallengeRequest {
    return GetChallengeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChallengeRequest>): GetChallengeRequest {
    const message = createBaseGetChallengeRequest();
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGetChallengeResponse(): GetChallengeResponse {
  return { protectedChallenge: undefined };
}

export const GetChallengeResponse: MessageFns<GetChallengeResponse> = {
  encode(message: GetChallengeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protectedChallenge !== undefined) {
      ProtectedChallenge.encode(message.protectedChallenge, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChallengeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.protectedChallenge = ProtectedChallenge.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChallengeResponse {
    return {
      protectedChallenge: isSet(object.protectedChallenge)
        ? ProtectedChallenge.fromJSON(object.protectedChallenge)
        : undefined,
    };
  },

  toJSON(message: GetChallengeResponse): unknown {
    const obj: any = {};
    if (message.protectedChallenge !== undefined) {
      obj.protectedChallenge = ProtectedChallenge.toJSON(message.protectedChallenge);
    }
    return obj;
  },

  create(base?: DeepPartial<GetChallengeResponse>): GetChallengeResponse {
    return GetChallengeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChallengeResponse>): GetChallengeResponse {
    const message = createBaseGetChallengeResponse();
    message.protectedChallenge = (object.protectedChallenge !== undefined && object.protectedChallenge !== null)
      ? ProtectedChallenge.fromPartial(object.protectedChallenge)
      : undefined;
    return message;
  },
};

function createBaseVerifyChallengeRequest(): VerifyChallengeRequest {
  return { protectedChallenge: undefined, signature: new Uint8Array(0), publicKey: new Uint8Array(0) };
}

export const VerifyChallengeRequest: MessageFns<VerifyChallengeRequest> = {
  encode(message: VerifyChallengeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protectedChallenge !== undefined) {
      ProtectedChallenge.encode(message.protectedChallenge, writer.uint32(10).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.publicKey.length !== 0) {
      writer.uint32(26).bytes(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyChallengeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.protectedChallenge = ProtectedChallenge.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyChallengeRequest {
    return {
      protectedChallenge: isSet(object.protectedChallenge)
        ? ProtectedChallenge.fromJSON(object.protectedChallenge)
        : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
    };
  },

  toJSON(message: VerifyChallengeRequest): unknown {
    const obj: any = {};
    if (message.protectedChallenge !== undefined) {
      obj.protectedChallenge = ProtectedChallenge.toJSON(message.protectedChallenge);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyChallengeRequest>): VerifyChallengeRequest {
    return VerifyChallengeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyChallengeRequest>): VerifyChallengeRequest {
    const message = createBaseVerifyChallengeRequest();
    message.protectedChallenge = (object.protectedChallenge !== undefined && object.protectedChallenge !== null)
      ? ProtectedChallenge.fromPartial(object.protectedChallenge)
      : undefined;
    message.signature = object.signature ?? new Uint8Array(0);
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifyChallengeResponse(): VerifyChallengeResponse {
  return { sessionToken: "", expirationTimestamp: 0 };
}

export const VerifyChallengeResponse: MessageFns<VerifyChallengeResponse> = {
  encode(message: VerifyChallengeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionToken !== "") {
      writer.uint32(10).string(message.sessionToken);
    }
    if (message.expirationTimestamp !== 0) {
      writer.uint32(16).int64(message.expirationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyChallengeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expirationTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyChallengeResponse {
    return {
      sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
      expirationTimestamp: isSet(object.expirationTimestamp) ? globalThis.Number(object.expirationTimestamp) : 0,
    };
  },

  toJSON(message: VerifyChallengeResponse): unknown {
    const obj: any = {};
    if (message.sessionToken !== "") {
      obj.sessionToken = message.sessionToken;
    }
    if (message.expirationTimestamp !== 0) {
      obj.expirationTimestamp = Math.round(message.expirationTimestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyChallengeResponse>): VerifyChallengeResponse {
    return VerifyChallengeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyChallengeResponse>): VerifyChallengeResponse {
    const message = createBaseVerifyChallengeResponse();
    message.sessionToken = object.sessionToken ?? "";
    message.expirationTimestamp = object.expirationTimestamp ?? 0;
    return message;
  },
};

export type SparkAuthnServiceDefinition = typeof SparkAuthnServiceDefinition;
export const SparkAuthnServiceDefinition = {
  name: "SparkAuthnService",
  fullName: "spark_authn.SparkAuthnService",
  methods: {
    /** Request a new authentication challenge for a public key */
    get_challenge: {
      name: "get_challenge",
      requestType: GetChallengeRequest,
      requestStream: false,
      responseType: GetChallengeResponse,
      responseStream: false,
      options: {},
    },
    /** Verify a signed challenge and return a session token */
    verify_challenge: {
      name: "verify_challenge",
      requestType: VerifyChallengeRequest,
      requestStream: false,
      responseType: VerifyChallengeResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SparkAuthnServiceImplementation<CallContextExt = {}> {
  /** Request a new authentication challenge for a public key */
  get_challenge(
    request: GetChallengeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetChallengeResponse>>;
  /** Verify a signed challenge and return a session token */
  verify_challenge(
    request: VerifyChallengeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VerifyChallengeResponse>>;
}

export interface SparkAuthnServiceClient<CallOptionsExt = {}> {
  /** Request a new authentication challenge for a public key */
  get_challenge(
    request: DeepPartial<GetChallengeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetChallengeResponse>;
  /** Verify a signed challenge and return a session token */
  verify_challenge(
    request: DeepPartial<VerifyChallengeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VerifyChallengeResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
