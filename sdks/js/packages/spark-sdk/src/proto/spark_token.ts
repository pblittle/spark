// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: spark_token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Timestamp } from "./google/protobuf/timestamp.js";
import { Network, networkFromJSON, networkToJSON, PageRequest, PageResponse, SigningKeyshare } from "./spark.js";

export const protobufPackage = "spark_token";

export enum TokenTransactionType {
  TOKEN_TRANSACTION_TYPE_UNSPECIFIED = 0,
  TOKEN_TRANSACTION_TYPE_CREATE = 1,
  TOKEN_TRANSACTION_TYPE_MINT = 2,
  TOKEN_TRANSACTION_TYPE_TRANSFER = 3,
  UNRECOGNIZED = -1,
}

export function tokenTransactionTypeFromJSON(object: any): TokenTransactionType {
  switch (object) {
    case 0:
    case "TOKEN_TRANSACTION_TYPE_UNSPECIFIED":
      return TokenTransactionType.TOKEN_TRANSACTION_TYPE_UNSPECIFIED;
    case 1:
    case "TOKEN_TRANSACTION_TYPE_CREATE":
      return TokenTransactionType.TOKEN_TRANSACTION_TYPE_CREATE;
    case 2:
    case "TOKEN_TRANSACTION_TYPE_MINT":
      return TokenTransactionType.TOKEN_TRANSACTION_TYPE_MINT;
    case 3:
    case "TOKEN_TRANSACTION_TYPE_TRANSFER":
      return TokenTransactionType.TOKEN_TRANSACTION_TYPE_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TokenTransactionType.UNRECOGNIZED;
  }
}

export function tokenTransactionTypeToJSON(object: TokenTransactionType): string {
  switch (object) {
    case TokenTransactionType.TOKEN_TRANSACTION_TYPE_UNSPECIFIED:
      return "TOKEN_TRANSACTION_TYPE_UNSPECIFIED";
    case TokenTransactionType.TOKEN_TRANSACTION_TYPE_CREATE:
      return "TOKEN_TRANSACTION_TYPE_CREATE";
    case TokenTransactionType.TOKEN_TRANSACTION_TYPE_MINT:
      return "TOKEN_TRANSACTION_TYPE_MINT";
    case TokenTransactionType.TOKEN_TRANSACTION_TYPE_TRANSFER:
      return "TOKEN_TRANSACTION_TYPE_TRANSFER";
    case TokenTransactionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommitStatus {
  COMMIT_UNSPECIFIED = 0,
  COMMIT_PROCESSING = 1,
  COMMIT_FINALIZED = 2,
  UNRECOGNIZED = -1,
}

export function commitStatusFromJSON(object: any): CommitStatus {
  switch (object) {
    case 0:
    case "COMMIT_UNSPECIFIED":
      return CommitStatus.COMMIT_UNSPECIFIED;
    case 1:
    case "COMMIT_PROCESSING":
      return CommitStatus.COMMIT_PROCESSING;
    case 2:
    case "COMMIT_FINALIZED":
      return CommitStatus.COMMIT_FINALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommitStatus.UNRECOGNIZED;
  }
}

export function commitStatusToJSON(object: CommitStatus): string {
  switch (object) {
    case CommitStatus.COMMIT_UNSPECIFIED:
      return "COMMIT_UNSPECIFIED";
    case CommitStatus.COMMIT_PROCESSING:
      return "COMMIT_PROCESSING";
    case CommitStatus.COMMIT_FINALIZED:
      return "COMMIT_FINALIZED";
    case CommitStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TokenTransactionStatus {
  TOKEN_TRANSACTION_STARTED = 0,
  TOKEN_TRANSACTION_SIGNED = 1,
  TOKEN_TRANSACTION_REVEALED = 5,
  TOKEN_TRANSACTION_FINALIZED = 2,
  TOKEN_TRANSACTION_STARTED_CANCELLED = 3,
  TOKEN_TRANSACTION_SIGNED_CANCELLED = 4,
  TOKEN_TRANSACTION_UNKNOWN = 10,
  UNRECOGNIZED = -1,
}

export function tokenTransactionStatusFromJSON(object: any): TokenTransactionStatus {
  switch (object) {
    case 0:
    case "TOKEN_TRANSACTION_STARTED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_STARTED;
    case 1:
    case "TOKEN_TRANSACTION_SIGNED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_SIGNED;
    case 5:
    case "TOKEN_TRANSACTION_REVEALED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_REVEALED;
    case 2:
    case "TOKEN_TRANSACTION_FINALIZED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_FINALIZED;
    case 3:
    case "TOKEN_TRANSACTION_STARTED_CANCELLED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_STARTED_CANCELLED;
    case 4:
    case "TOKEN_TRANSACTION_SIGNED_CANCELLED":
      return TokenTransactionStatus.TOKEN_TRANSACTION_SIGNED_CANCELLED;
    case 10:
    case "TOKEN_TRANSACTION_UNKNOWN":
      return TokenTransactionStatus.TOKEN_TRANSACTION_UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TokenTransactionStatus.UNRECOGNIZED;
  }
}

export function tokenTransactionStatusToJSON(object: TokenTransactionStatus): string {
  switch (object) {
    case TokenTransactionStatus.TOKEN_TRANSACTION_STARTED:
      return "TOKEN_TRANSACTION_STARTED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_SIGNED:
      return "TOKEN_TRANSACTION_SIGNED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_REVEALED:
      return "TOKEN_TRANSACTION_REVEALED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_FINALIZED:
      return "TOKEN_TRANSACTION_FINALIZED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_STARTED_CANCELLED:
      return "TOKEN_TRANSACTION_STARTED_CANCELLED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_SIGNED_CANCELLED:
      return "TOKEN_TRANSACTION_SIGNED_CANCELLED";
    case TokenTransactionStatus.TOKEN_TRANSACTION_UNKNOWN:
      return "TOKEN_TRANSACTION_UNKNOWN";
    case TokenTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This proto is constructed by the wallet to specify leaves it wants to spend
 * as part of the token transaction.
 */
export interface TokenOutputToSpend {
  prevTokenTransactionHash: Uint8Array;
  prevTokenTransactionVout: number;
}

export interface TokenTransferInput {
  outputsToSpend: TokenOutputToSpend[];
}

export interface TokenMintInput {
  issuerPublicKey: Uint8Array;
  tokenIdentifier?: Uint8Array | undefined;
}

export interface TokenCreateInput {
  issuerPublicKey: Uint8Array;
  /** No minimum length because a single utf-8 character can be 3 bytes. */
  tokenName: string;
  /** No minimum length because a single utf-8 character can be 3 bytes. */
  tokenTicker: string;
  decimals: number;
  /** Decoded uint128 */
  maxSupply: Uint8Array;
  isFreezable: boolean;
  creationEntityPublicKey?: Uint8Array | undefined;
}

/**
 * This proto is constructed by the wallet to specify outputs it wants to create
 * as part of a token transaction. Output id and revocation public key should
 * remain unfilled so that the SE can fill them as part of the
 * StartTokenTransaction() call.
 */
export interface TokenOutput {
  id?: string | undefined;
  ownerPublicKey: Uint8Array;
  revocationCommitment?: Uint8Array | undefined;
  withdrawBondSats?: number | undefined;
  withdrawRelativeBlockLocktime?: number | undefined;
  tokenPublicKey?: Uint8Array | undefined;
  tokenIdentifier?:
    | Uint8Array
    | undefined;
  /** Decoded uint128 */
  tokenAmount: Uint8Array;
}

/**
 * This proto is constructed by the wallet and is the core transaction data
 * structure. This proto is deterministically hashed to generate the
 * token_transaction_hash that is cooperatively signed by the SO group to
 * confirm a token transaction.
 */
export interface TokenTransaction {
  /**
   * For mint transactions issuer_public_key will be specified without any
   * outputs_to_spend. For transfer transactions the token amount in the input
   * leaves must match the token amount in the output leaves.
   */
  version: number;
  tokenInputs?:
    | { $case: "mintInput"; mintInput: TokenMintInput }
    | { $case: "transferInput"; transferInput: TokenTransferInput }
    | { $case: "createInput"; createInput: TokenCreateInput }
    | undefined;
  tokenOutputs: TokenOutput[];
  sparkOperatorIdentityPublicKeys: Uint8Array[];
  /**
   * Server-set expiry time. The server calculates this by adding the client's
   * requested validity_duration_seconds to the server's current time when
   * creating the final transaction.
   */
  expiryTime: Date | undefined;
  network: Network;
  /**
   * The timestamp of when the client created the transaction. This is used to
   * determine which transaction should win in a race condition. Earlier
   * timestamps win over later ones.
   */
  clientCreatedTimestamp:
    | Date
    | undefined;
  /** The spark invoices this transaction fulfills. */
  invoiceAttachments: InvoiceAttachment[];
}

export interface InvoiceAttachment {
  sparkInvoice: string;
}

export interface SignatureWithIndex {
  /**
   * This is a Schnorr or ECDSA DER signature which can be between 64 and 73
   * bytes.
   */
  signature: Uint8Array;
  /** The index of the TTXO associated with this signature. */
  inputIndex: number;
}

/**
 * A group of signatures for the input TTXOs binding them to the final token
 * transaction hash. This bundle of signatures is specific to a given operator.
 */
export interface InputTtxoSignaturesPerOperator {
  ttxoSignatures: SignatureWithIndex[];
  operatorIdentityPublicKey: Uint8Array;
}

/** === Start Transaction === */
export interface StartTransactionRequest {
  identityPublicKey: Uint8Array;
  partialTokenTransaction:
    | TokenTransaction
    | undefined;
  /**
   * Filled by signing the partial token transaction hash with the
   * owner/issuer private key. For mint transactions this will be one
   * signature for the input issuer_public_key For transfer transactions this
   * will be one for each output for the output owner_public_key
   */
  partialTokenTransactionOwnerSignatures: SignatureWithIndex[];
  /**
   * How long the transaction should be valid for, in seconds.
   * The server will set the actual expiry_time in the final transaction based
   * on this duration. Must be within [1, 300] seconds.
   */
  validityDurationSeconds: number;
}

export interface StartTransactionResponse {
  finalTokenTransaction: TokenTransaction | undefined;
  keyshareInfo: SigningKeyshare | undefined;
}

export interface CommitTransactionRequest {
  finalTokenTransaction: TokenTransaction | undefined;
  finalTokenTransactionHash: Uint8Array;
  inputTtxoSignaturesPerOperator: InputTtxoSignaturesPerOperator[];
  ownerIdentityPublicKey: Uint8Array;
}

export interface CommitProgress {
  committedOperatorPublicKeys: Uint8Array[];
  uncommittedOperatorPublicKeys: Uint8Array[];
}

export interface CommitTransactionResponse {
  commitStatus: CommitStatus;
  commitProgress: CommitProgress | undefined;
}

export interface QueryTokenMetadataRequest {
  tokenIdentifiers: Uint8Array[];
  issuerPublicKeys: Uint8Array[];
}

export interface TokenMetadata {
  issuerPublicKey: Uint8Array;
  tokenName: string;
  tokenTicker: string;
  decimals: number;
  /** Decoded uint128 */
  maxSupply: Uint8Array;
  isFreezable: boolean;
  creationEntityPublicKey?: Uint8Array | undefined;
  tokenIdentifier: Uint8Array;
}

export interface QueryTokenMetadataResponse {
  tokenMetadata: TokenMetadata[];
}

export interface QueryTokenOutputsRequest {
  ownerPublicKeys: Uint8Array[];
  /** Optionally provide issuer public keys or token identifiers. If both are not set return outputs for all tokens. */
  issuerPublicKeys: Uint8Array[];
  tokenIdentifiers: Uint8Array[];
  /** defaults to mainnet when no network is provided. */
  network: Network;
  /** For pagination */
  pageRequest: PageRequest | undefined;
}

/** Request constraints are combined using an AND relation. */
export interface QueryTokenTransactionsRequest {
  /** Returns transactions that have one of these output ids in the input or output. */
  outputIds: string[];
  /** Returns transactions that have this owner public key as the sender or receiver in one or more of the input/output leaves. */
  ownerPublicKeys: Uint8Array[];
  /** Returns transactions that related to this token public key. */
  issuerPublicKeys: Uint8Array[];
  /** Returns transactions that related to this token identifier. */
  tokenIdentifiers: Uint8Array[];
  /** Returns transactions that match the provided transaction hashes. */
  tokenTransactionHashes: Uint8Array[];
  limit: number;
  offset: number;
}

export interface QueryTokenTransactionsResponse {
  tokenTransactionsWithStatus: TokenTransactionWithStatus[];
  offset: number;
}

export interface OutputWithPreviousTransactionData {
  output: TokenOutput | undefined;
  previousTransactionHash: Uint8Array;
  previousTransactionVout: number;
}

export interface QueryTokenOutputsResponse {
  outputsWithPreviousTransactionData: OutputWithPreviousTransactionData[];
  pageResponse: PageResponse | undefined;
}

export interface SpentTokenOutputMetadata {
  outputId: string;
  revocationSecret: Uint8Array;
}

export interface TokenTransactionConfirmationMetadata {
  spentTokenOutputsMetadata: SpentTokenOutputMetadata[];
}

export interface TokenTransactionWithStatus {
  tokenTransaction: TokenTransaction | undefined;
  status: TokenTransactionStatus;
  confirmationMetadata:
    | TokenTransactionConfirmationMetadata
    | undefined;
  /**
   * In rare cases the above reconstructed token transaction may not match the original token transaction due to:
   * a) a pre-empted transfer transaction having its input TTXOs remapped to the newer transaction
   * b) proto migrations or field deprecations resulting in missing/swapped fields (eg. token public key -> token identifier)
   * Include the original hash to ensure clients can reconcile this transaction with the original if needed.
   */
  tokenTransactionHash: Uint8Array;
}

export interface FreezeTokensPayload {
  version: number;
  ownerPublicKey: Uint8Array;
  tokenPublicKey?: Uint8Array | undefined;
  tokenIdentifier?: Uint8Array | undefined;
  issuerProvidedTimestamp: number;
  operatorIdentityPublicKey: Uint8Array;
  /** Set to false when requesting a freeze. */
  shouldUnfreeze: boolean;
}

export interface FreezeTokensRequest {
  freezeTokensPayload:
    | FreezeTokensPayload
    | undefined;
  /** This is a Schnorr or ECDSA DER signature which can be between 64 and 73 bytes. */
  issuerSignature: Uint8Array;
}

export interface FreezeTokensResponse {
  impactedOutputIds: string[];
  /** Decoded uint128 */
  impactedTokenAmount: Uint8Array;
}

function createBaseTokenOutputToSpend(): TokenOutputToSpend {
  return { prevTokenTransactionHash: new Uint8Array(0), prevTokenTransactionVout: 0 };
}

export const TokenOutputToSpend: MessageFns<TokenOutputToSpend> = {
  encode(message: TokenOutputToSpend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prevTokenTransactionHash.length !== 0) {
      writer.uint32(10).bytes(message.prevTokenTransactionHash);
    }
    if (message.prevTokenTransactionVout !== 0) {
      writer.uint32(16).uint32(message.prevTokenTransactionVout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenOutputToSpend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenOutputToSpend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prevTokenTransactionHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.prevTokenTransactionVout = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenOutputToSpend {
    return {
      prevTokenTransactionHash: isSet(object.prevTokenTransactionHash)
        ? bytesFromBase64(object.prevTokenTransactionHash)
        : new Uint8Array(0),
      prevTokenTransactionVout: isSet(object.prevTokenTransactionVout)
        ? globalThis.Number(object.prevTokenTransactionVout)
        : 0,
    };
  },

  toJSON(message: TokenOutputToSpend): unknown {
    const obj: any = {};
    if (message.prevTokenTransactionHash.length !== 0) {
      obj.prevTokenTransactionHash = base64FromBytes(message.prevTokenTransactionHash);
    }
    if (message.prevTokenTransactionVout !== 0) {
      obj.prevTokenTransactionVout = Math.round(message.prevTokenTransactionVout);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenOutputToSpend>): TokenOutputToSpend {
    return TokenOutputToSpend.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenOutputToSpend>): TokenOutputToSpend {
    const message = createBaseTokenOutputToSpend();
    message.prevTokenTransactionHash = object.prevTokenTransactionHash ?? new Uint8Array(0);
    message.prevTokenTransactionVout = object.prevTokenTransactionVout ?? 0;
    return message;
  },
};

function createBaseTokenTransferInput(): TokenTransferInput {
  return { outputsToSpend: [] };
}

export const TokenTransferInput: MessageFns<TokenTransferInput> = {
  encode(message: TokenTransferInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.outputsToSpend) {
      TokenOutputToSpend.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenTransferInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenTransferInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputsToSpend.push(TokenOutputToSpend.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenTransferInput {
    return {
      outputsToSpend: globalThis.Array.isArray(object?.outputsToSpend)
        ? object.outputsToSpend.map((e: any) => TokenOutputToSpend.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TokenTransferInput): unknown {
    const obj: any = {};
    if (message.outputsToSpend?.length) {
      obj.outputsToSpend = message.outputsToSpend.map((e) => TokenOutputToSpend.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TokenTransferInput>): TokenTransferInput {
    return TokenTransferInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenTransferInput>): TokenTransferInput {
    const message = createBaseTokenTransferInput();
    message.outputsToSpend = object.outputsToSpend?.map((e) => TokenOutputToSpend.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTokenMintInput(): TokenMintInput {
  return { issuerPublicKey: new Uint8Array(0), tokenIdentifier: undefined };
}

export const TokenMintInput: MessageFns<TokenMintInput> = {
  encode(message: TokenMintInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuerPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.issuerPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      writer.uint32(18).bytes(message.tokenIdentifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenMintInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenMintInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.issuerPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenIdentifier = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenMintInput {
    return {
      issuerPublicKey: isSet(object.issuerPublicKey) ? bytesFromBase64(object.issuerPublicKey) : new Uint8Array(0),
      tokenIdentifier: isSet(object.tokenIdentifier) ? bytesFromBase64(object.tokenIdentifier) : undefined,
    };
  },

  toJSON(message: TokenMintInput): unknown {
    const obj: any = {};
    if (message.issuerPublicKey.length !== 0) {
      obj.issuerPublicKey = base64FromBytes(message.issuerPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      obj.tokenIdentifier = base64FromBytes(message.tokenIdentifier);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenMintInput>): TokenMintInput {
    return TokenMintInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenMintInput>): TokenMintInput {
    const message = createBaseTokenMintInput();
    message.issuerPublicKey = object.issuerPublicKey ?? new Uint8Array(0);
    message.tokenIdentifier = object.tokenIdentifier ?? undefined;
    return message;
  },
};

function createBaseTokenCreateInput(): TokenCreateInput {
  return {
    issuerPublicKey: new Uint8Array(0),
    tokenName: "",
    tokenTicker: "",
    decimals: 0,
    maxSupply: new Uint8Array(0),
    isFreezable: false,
    creationEntityPublicKey: undefined,
  };
}

export const TokenCreateInput: MessageFns<TokenCreateInput> = {
  encode(message: TokenCreateInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuerPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.issuerPublicKey);
    }
    if (message.tokenName !== "") {
      writer.uint32(18).string(message.tokenName);
    }
    if (message.tokenTicker !== "") {
      writer.uint32(26).string(message.tokenTicker);
    }
    if (message.decimals !== 0) {
      writer.uint32(32).uint32(message.decimals);
    }
    if (message.maxSupply.length !== 0) {
      writer.uint32(42).bytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      writer.uint32(48).bool(message.isFreezable);
    }
    if (message.creationEntityPublicKey !== undefined) {
      writer.uint32(58).bytes(message.creationEntityPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenCreateInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenCreateInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.issuerPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenTicker = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.decimals = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxSupply = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isFreezable = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.creationEntityPublicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenCreateInput {
    return {
      issuerPublicKey: isSet(object.issuerPublicKey) ? bytesFromBase64(object.issuerPublicKey) : new Uint8Array(0),
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      tokenTicker: isSet(object.tokenTicker) ? globalThis.String(object.tokenTicker) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      maxSupply: isSet(object.maxSupply) ? bytesFromBase64(object.maxSupply) : new Uint8Array(0),
      isFreezable: isSet(object.isFreezable) ? globalThis.Boolean(object.isFreezable) : false,
      creationEntityPublicKey: isSet(object.creationEntityPublicKey)
        ? bytesFromBase64(object.creationEntityPublicKey)
        : undefined,
    };
  },

  toJSON(message: TokenCreateInput): unknown {
    const obj: any = {};
    if (message.issuerPublicKey.length !== 0) {
      obj.issuerPublicKey = base64FromBytes(message.issuerPublicKey);
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.tokenTicker !== "") {
      obj.tokenTicker = message.tokenTicker;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.maxSupply.length !== 0) {
      obj.maxSupply = base64FromBytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      obj.isFreezable = message.isFreezable;
    }
    if (message.creationEntityPublicKey !== undefined) {
      obj.creationEntityPublicKey = base64FromBytes(message.creationEntityPublicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenCreateInput>): TokenCreateInput {
    return TokenCreateInput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenCreateInput>): TokenCreateInput {
    const message = createBaseTokenCreateInput();
    message.issuerPublicKey = object.issuerPublicKey ?? new Uint8Array(0);
    message.tokenName = object.tokenName ?? "";
    message.tokenTicker = object.tokenTicker ?? "";
    message.decimals = object.decimals ?? 0;
    message.maxSupply = object.maxSupply ?? new Uint8Array(0);
    message.isFreezable = object.isFreezable ?? false;
    message.creationEntityPublicKey = object.creationEntityPublicKey ?? undefined;
    return message;
  },
};

function createBaseTokenOutput(): TokenOutput {
  return {
    id: undefined,
    ownerPublicKey: new Uint8Array(0),
    revocationCommitment: undefined,
    withdrawBondSats: undefined,
    withdrawRelativeBlockLocktime: undefined,
    tokenPublicKey: undefined,
    tokenIdentifier: undefined,
    tokenAmount: new Uint8Array(0),
  };
}

export const TokenOutput: MessageFns<TokenOutput> = {
  encode(message: TokenOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.ownerPublicKey);
    }
    if (message.revocationCommitment !== undefined) {
      writer.uint32(26).bytes(message.revocationCommitment);
    }
    if (message.withdrawBondSats !== undefined) {
      writer.uint32(32).uint64(message.withdrawBondSats);
    }
    if (message.withdrawRelativeBlockLocktime !== undefined) {
      writer.uint32(40).uint64(message.withdrawRelativeBlockLocktime);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(50).bytes(message.tokenPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      writer.uint32(66).bytes(message.tokenIdentifier);
    }
    if (message.tokenAmount.length !== 0) {
      writer.uint32(58).bytes(message.tokenAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.revocationCommitment = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.withdrawBondSats = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.withdrawRelativeBlockLocktime = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tokenIdentifier = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenOutput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      revocationCommitment: isSet(object.revocationCommitment)
        ? bytesFromBase64(object.revocationCommitment)
        : undefined,
      withdrawBondSats: isSet(object.withdrawBondSats) ? globalThis.Number(object.withdrawBondSats) : undefined,
      withdrawRelativeBlockLocktime: isSet(object.withdrawRelativeBlockLocktime)
        ? globalThis.Number(object.withdrawRelativeBlockLocktime)
        : undefined,
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : undefined,
      tokenIdentifier: isSet(object.tokenIdentifier) ? bytesFromBase64(object.tokenIdentifier) : undefined,
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : new Uint8Array(0),
    };
  },

  toJSON(message: TokenOutput): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.revocationCommitment !== undefined) {
      obj.revocationCommitment = base64FromBytes(message.revocationCommitment);
    }
    if (message.withdrawBondSats !== undefined) {
      obj.withdrawBondSats = Math.round(message.withdrawBondSats);
    }
    if (message.withdrawRelativeBlockLocktime !== undefined) {
      obj.withdrawRelativeBlockLocktime = Math.round(message.withdrawRelativeBlockLocktime);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      obj.tokenIdentifier = base64FromBytes(message.tokenIdentifier);
    }
    if (message.tokenAmount.length !== 0) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenOutput>): TokenOutput {
    return TokenOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenOutput>): TokenOutput {
    const message = createBaseTokenOutput();
    message.id = object.id ?? undefined;
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.revocationCommitment = object.revocationCommitment ?? undefined;
    message.withdrawBondSats = object.withdrawBondSats ?? undefined;
    message.withdrawRelativeBlockLocktime = object.withdrawRelativeBlockLocktime ?? undefined;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.tokenIdentifier = object.tokenIdentifier ?? undefined;
    message.tokenAmount = object.tokenAmount ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTokenTransaction(): TokenTransaction {
  return {
    version: 0,
    tokenInputs: undefined,
    tokenOutputs: [],
    sparkOperatorIdentityPublicKeys: [],
    expiryTime: undefined,
    network: 0,
    clientCreatedTimestamp: undefined,
    invoiceAttachments: [],
  };
}

export const TokenTransaction: MessageFns<TokenTransaction> = {
  encode(message: TokenTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    switch (message.tokenInputs?.$case) {
      case "mintInput":
        TokenMintInput.encode(message.tokenInputs.mintInput, writer.uint32(18).fork()).join();
        break;
      case "transferInput":
        TokenTransferInput.encode(message.tokenInputs.transferInput, writer.uint32(26).fork()).join();
        break;
      case "createInput":
        TokenCreateInput.encode(message.tokenInputs.createInput, writer.uint32(66).fork()).join();
        break;
    }
    for (const v of message.tokenOutputs) {
      TokenOutput.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.sparkOperatorIdentityPublicKeys) {
      writer.uint32(42).bytes(v!);
    }
    if (message.expiryTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expiryTime), writer.uint32(50).fork()).join();
    }
    if (message.network !== 0) {
      writer.uint32(56).int32(message.network);
    }
    if (message.clientCreatedTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.clientCreatedTimestamp), writer.uint32(74).fork()).join();
    }
    for (const v of message.invoiceAttachments) {
      InvoiceAttachment.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenInputs = { $case: "mintInput", mintInput: TokenMintInput.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenInputs = {
            $case: "transferInput",
            transferInput: TokenTransferInput.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tokenInputs = { $case: "createInput", createInput: TokenCreateInput.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenOutputs.push(TokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sparkOperatorIdentityPublicKeys.push(reader.bytes());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expiryTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.network = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.clientCreatedTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.invoiceAttachments.push(InvoiceAttachment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenTransaction {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      tokenInputs: isSet(object.mintInput)
        ? { $case: "mintInput", mintInput: TokenMintInput.fromJSON(object.mintInput) }
        : isSet(object.transferInput)
        ? { $case: "transferInput", transferInput: TokenTransferInput.fromJSON(object.transferInput) }
        : isSet(object.createInput)
        ? { $case: "createInput", createInput: TokenCreateInput.fromJSON(object.createInput) }
        : undefined,
      tokenOutputs: globalThis.Array.isArray(object?.tokenOutputs)
        ? object.tokenOutputs.map((e: any) => TokenOutput.fromJSON(e))
        : [],
      sparkOperatorIdentityPublicKeys: globalThis.Array.isArray(object?.sparkOperatorIdentityPublicKeys)
        ? object.sparkOperatorIdentityPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      expiryTime: isSet(object.expiryTime) ? fromJsonTimestamp(object.expiryTime) : undefined,
      network: isSet(object.network) ? networkFromJSON(object.network) : 0,
      clientCreatedTimestamp: isSet(object.clientCreatedTimestamp)
        ? fromJsonTimestamp(object.clientCreatedTimestamp)
        : undefined,
      invoiceAttachments: globalThis.Array.isArray(object?.invoiceAttachments)
        ? object.invoiceAttachments.map((e: any) => InvoiceAttachment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TokenTransaction): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.tokenInputs?.$case === "mintInput") {
      obj.mintInput = TokenMintInput.toJSON(message.tokenInputs.mintInput);
    } else if (message.tokenInputs?.$case === "transferInput") {
      obj.transferInput = TokenTransferInput.toJSON(message.tokenInputs.transferInput);
    } else if (message.tokenInputs?.$case === "createInput") {
      obj.createInput = TokenCreateInput.toJSON(message.tokenInputs.createInput);
    }
    if (message.tokenOutputs?.length) {
      obj.tokenOutputs = message.tokenOutputs.map((e) => TokenOutput.toJSON(e));
    }
    if (message.sparkOperatorIdentityPublicKeys?.length) {
      obj.sparkOperatorIdentityPublicKeys = message.sparkOperatorIdentityPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.expiryTime !== undefined) {
      obj.expiryTime = message.expiryTime.toISOString();
    }
    if (message.network !== 0) {
      obj.network = networkToJSON(message.network);
    }
    if (message.clientCreatedTimestamp !== undefined) {
      obj.clientCreatedTimestamp = message.clientCreatedTimestamp.toISOString();
    }
    if (message.invoiceAttachments?.length) {
      obj.invoiceAttachments = message.invoiceAttachments.map((e) => InvoiceAttachment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TokenTransaction>): TokenTransaction {
    return TokenTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenTransaction>): TokenTransaction {
    const message = createBaseTokenTransaction();
    message.version = object.version ?? 0;
    switch (object.tokenInputs?.$case) {
      case "mintInput": {
        if (object.tokenInputs?.mintInput !== undefined && object.tokenInputs?.mintInput !== null) {
          message.tokenInputs = {
            $case: "mintInput",
            mintInput: TokenMintInput.fromPartial(object.tokenInputs.mintInput),
          };
        }
        break;
      }
      case "transferInput": {
        if (object.tokenInputs?.transferInput !== undefined && object.tokenInputs?.transferInput !== null) {
          message.tokenInputs = {
            $case: "transferInput",
            transferInput: TokenTransferInput.fromPartial(object.tokenInputs.transferInput),
          };
        }
        break;
      }
      case "createInput": {
        if (object.tokenInputs?.createInput !== undefined && object.tokenInputs?.createInput !== null) {
          message.tokenInputs = {
            $case: "createInput",
            createInput: TokenCreateInput.fromPartial(object.tokenInputs.createInput),
          };
        }
        break;
      }
    }
    message.tokenOutputs = object.tokenOutputs?.map((e) => TokenOutput.fromPartial(e)) || [];
    message.sparkOperatorIdentityPublicKeys = object.sparkOperatorIdentityPublicKeys?.map((e) => e) || [];
    message.expiryTime = object.expiryTime ?? undefined;
    message.network = object.network ?? 0;
    message.clientCreatedTimestamp = object.clientCreatedTimestamp ?? undefined;
    message.invoiceAttachments = object.invoiceAttachments?.map((e) => InvoiceAttachment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInvoiceAttachment(): InvoiceAttachment {
  return { sparkInvoice: "" };
}

export const InvoiceAttachment: MessageFns<InvoiceAttachment> = {
  encode(message: InvoiceAttachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sparkInvoice !== "") {
      writer.uint32(10).string(message.sparkInvoice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvoiceAttachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoiceAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sparkInvoice = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvoiceAttachment {
    return { sparkInvoice: isSet(object.sparkInvoice) ? globalThis.String(object.sparkInvoice) : "" };
  },

  toJSON(message: InvoiceAttachment): unknown {
    const obj: any = {};
    if (message.sparkInvoice !== "") {
      obj.sparkInvoice = message.sparkInvoice;
    }
    return obj;
  },

  create(base?: DeepPartial<InvoiceAttachment>): InvoiceAttachment {
    return InvoiceAttachment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InvoiceAttachment>): InvoiceAttachment {
    const message = createBaseInvoiceAttachment();
    message.sparkInvoice = object.sparkInvoice ?? "";
    return message;
  },
};

function createBaseSignatureWithIndex(): SignatureWithIndex {
  return { signature: new Uint8Array(0), inputIndex: 0 };
}

export const SignatureWithIndex: MessageFns<SignatureWithIndex> = {
  encode(message: SignatureWithIndex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature.length !== 0) {
      writer.uint32(10).bytes(message.signature);
    }
    if (message.inputIndex !== 0) {
      writer.uint32(16).uint32(message.inputIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignatureWithIndex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignatureWithIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.inputIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignatureWithIndex {
    return {
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      inputIndex: isSet(object.inputIndex) ? globalThis.Number(object.inputIndex) : 0,
    };
  },

  toJSON(message: SignatureWithIndex): unknown {
    const obj: any = {};
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.inputIndex !== 0) {
      obj.inputIndex = Math.round(message.inputIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<SignatureWithIndex>): SignatureWithIndex {
    return SignatureWithIndex.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignatureWithIndex>): SignatureWithIndex {
    const message = createBaseSignatureWithIndex();
    message.signature = object.signature ?? new Uint8Array(0);
    message.inputIndex = object.inputIndex ?? 0;
    return message;
  },
};

function createBaseInputTtxoSignaturesPerOperator(): InputTtxoSignaturesPerOperator {
  return { ttxoSignatures: [], operatorIdentityPublicKey: new Uint8Array(0) };
}

export const InputTtxoSignaturesPerOperator: MessageFns<InputTtxoSignaturesPerOperator> = {
  encode(message: InputTtxoSignaturesPerOperator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ttxoSignatures) {
      SignatureWithIndex.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.operatorIdentityPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InputTtxoSignaturesPerOperator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputTtxoSignaturesPerOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ttxoSignatures.push(SignatureWithIndex.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operatorIdentityPublicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InputTtxoSignaturesPerOperator {
    return {
      ttxoSignatures: globalThis.Array.isArray(object?.ttxoSignatures)
        ? object.ttxoSignatures.map((e: any) => SignatureWithIndex.fromJSON(e))
        : [],
      operatorIdentityPublicKey: isSet(object.operatorIdentityPublicKey)
        ? bytesFromBase64(object.operatorIdentityPublicKey)
        : new Uint8Array(0),
    };
  },

  toJSON(message: InputTtxoSignaturesPerOperator): unknown {
    const obj: any = {};
    if (message.ttxoSignatures?.length) {
      obj.ttxoSignatures = message.ttxoSignatures.map((e) => SignatureWithIndex.toJSON(e));
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      obj.operatorIdentityPublicKey = base64FromBytes(message.operatorIdentityPublicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<InputTtxoSignaturesPerOperator>): InputTtxoSignaturesPerOperator {
    return InputTtxoSignaturesPerOperator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InputTtxoSignaturesPerOperator>): InputTtxoSignaturesPerOperator {
    const message = createBaseInputTtxoSignaturesPerOperator();
    message.ttxoSignatures = object.ttxoSignatures?.map((e) => SignatureWithIndex.fromPartial(e)) || [];
    message.operatorIdentityPublicKey = object.operatorIdentityPublicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseStartTransactionRequest(): StartTransactionRequest {
  return {
    identityPublicKey: new Uint8Array(0),
    partialTokenTransaction: undefined,
    partialTokenTransactionOwnerSignatures: [],
    validityDurationSeconds: 0,
  };
}

export const StartTransactionRequest: MessageFns<StartTransactionRequest> = {
  encode(message: StartTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.identityPublicKey);
    }
    if (message.partialTokenTransaction !== undefined) {
      TokenTransaction.encode(message.partialTokenTransaction, writer.uint32(18).fork()).join();
    }
    for (const v of message.partialTokenTransactionOwnerSignatures) {
      SignatureWithIndex.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.validityDurationSeconds !== 0) {
      writer.uint32(32).uint64(message.validityDurationSeconds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.partialTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.partialTokenTransactionOwnerSignatures.push(SignatureWithIndex.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.validityDurationSeconds = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartTransactionRequest {
    return {
      identityPublicKey: isSet(object.identityPublicKey)
        ? bytesFromBase64(object.identityPublicKey)
        : new Uint8Array(0),
      partialTokenTransaction: isSet(object.partialTokenTransaction)
        ? TokenTransaction.fromJSON(object.partialTokenTransaction)
        : undefined,
      partialTokenTransactionOwnerSignatures: globalThis.Array.isArray(object?.partialTokenTransactionOwnerSignatures)
        ? object.partialTokenTransactionOwnerSignatures.map((e: any) => SignatureWithIndex.fromJSON(e))
        : [],
      validityDurationSeconds: isSet(object.validityDurationSeconds)
        ? globalThis.Number(object.validityDurationSeconds)
        : 0,
    };
  },

  toJSON(message: StartTransactionRequest): unknown {
    const obj: any = {};
    if (message.identityPublicKey.length !== 0) {
      obj.identityPublicKey = base64FromBytes(message.identityPublicKey);
    }
    if (message.partialTokenTransaction !== undefined) {
      obj.partialTokenTransaction = TokenTransaction.toJSON(message.partialTokenTransaction);
    }
    if (message.partialTokenTransactionOwnerSignatures?.length) {
      obj.partialTokenTransactionOwnerSignatures = message.partialTokenTransactionOwnerSignatures.map((e) =>
        SignatureWithIndex.toJSON(e)
      );
    }
    if (message.validityDurationSeconds !== 0) {
      obj.validityDurationSeconds = Math.round(message.validityDurationSeconds);
    }
    return obj;
  },

  create(base?: DeepPartial<StartTransactionRequest>): StartTransactionRequest {
    return StartTransactionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartTransactionRequest>): StartTransactionRequest {
    const message = createBaseStartTransactionRequest();
    message.identityPublicKey = object.identityPublicKey ?? new Uint8Array(0);
    message.partialTokenTransaction =
      (object.partialTokenTransaction !== undefined && object.partialTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.partialTokenTransaction)
        : undefined;
    message.partialTokenTransactionOwnerSignatures =
      object.partialTokenTransactionOwnerSignatures?.map((e) => SignatureWithIndex.fromPartial(e)) || [];
    message.validityDurationSeconds = object.validityDurationSeconds ?? 0;
    return message;
  },
};

function createBaseStartTransactionResponse(): StartTransactionResponse {
  return { finalTokenTransaction: undefined, keyshareInfo: undefined };
}

export const StartTransactionResponse: MessageFns<StartTransactionResponse> = {
  encode(message: StartTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    if (message.keyshareInfo !== undefined) {
      SigningKeyshare.encode(message.keyshareInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyshareInfo = SigningKeyshare.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartTransactionResponse {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
      keyshareInfo: isSet(object.keyshareInfo) ? SigningKeyshare.fromJSON(object.keyshareInfo) : undefined,
    };
  },

  toJSON(message: StartTransactionResponse): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    if (message.keyshareInfo !== undefined) {
      obj.keyshareInfo = SigningKeyshare.toJSON(message.keyshareInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<StartTransactionResponse>): StartTransactionResponse {
    return StartTransactionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartTransactionResponse>): StartTransactionResponse {
    const message = createBaseStartTransactionResponse();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    message.keyshareInfo = (object.keyshareInfo !== undefined && object.keyshareInfo !== null)
      ? SigningKeyshare.fromPartial(object.keyshareInfo)
      : undefined;
    return message;
  },
};

function createBaseCommitTransactionRequest(): CommitTransactionRequest {
  return {
    finalTokenTransaction: undefined,
    finalTokenTransactionHash: new Uint8Array(0),
    inputTtxoSignaturesPerOperator: [],
    ownerIdentityPublicKey: new Uint8Array(0),
  };
}

export const CommitTransactionRequest: MessageFns<CommitTransactionRequest> = {
  encode(message: CommitTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    if (message.finalTokenTransactionHash.length !== 0) {
      writer.uint32(18).bytes(message.finalTokenTransactionHash);
    }
    for (const v of message.inputTtxoSignaturesPerOperator) {
      InputTtxoSignaturesPerOperator.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.ownerIdentityPublicKey.length !== 0) {
      writer.uint32(34).bytes(message.ownerIdentityPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.finalTokenTransactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inputTtxoSignaturesPerOperator.push(InputTtxoSignaturesPerOperator.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ownerIdentityPublicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitTransactionRequest {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
      finalTokenTransactionHash: isSet(object.finalTokenTransactionHash)
        ? bytesFromBase64(object.finalTokenTransactionHash)
        : new Uint8Array(0),
      inputTtxoSignaturesPerOperator: globalThis.Array.isArray(object?.inputTtxoSignaturesPerOperator)
        ? object.inputTtxoSignaturesPerOperator.map((e: any) => InputTtxoSignaturesPerOperator.fromJSON(e))
        : [],
      ownerIdentityPublicKey: isSet(object.ownerIdentityPublicKey)
        ? bytesFromBase64(object.ownerIdentityPublicKey)
        : new Uint8Array(0),
    };
  },

  toJSON(message: CommitTransactionRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    if (message.finalTokenTransactionHash.length !== 0) {
      obj.finalTokenTransactionHash = base64FromBytes(message.finalTokenTransactionHash);
    }
    if (message.inputTtxoSignaturesPerOperator?.length) {
      obj.inputTtxoSignaturesPerOperator = message.inputTtxoSignaturesPerOperator.map((e) =>
        InputTtxoSignaturesPerOperator.toJSON(e)
      );
    }
    if (message.ownerIdentityPublicKey.length !== 0) {
      obj.ownerIdentityPublicKey = base64FromBytes(message.ownerIdentityPublicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<CommitTransactionRequest>): CommitTransactionRequest {
    return CommitTransactionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitTransactionRequest>): CommitTransactionRequest {
    const message = createBaseCommitTransactionRequest();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    message.finalTokenTransactionHash = object.finalTokenTransactionHash ?? new Uint8Array(0);
    message.inputTtxoSignaturesPerOperator =
      object.inputTtxoSignaturesPerOperator?.map((e) => InputTtxoSignaturesPerOperator.fromPartial(e)) || [];
    message.ownerIdentityPublicKey = object.ownerIdentityPublicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseCommitProgress(): CommitProgress {
  return { committedOperatorPublicKeys: [], uncommittedOperatorPublicKeys: [] };
}

export const CommitProgress: MessageFns<CommitProgress> = {
  encode(message: CommitProgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.committedOperatorPublicKeys) {
      writer.uint32(10).bytes(v!);
    }
    for (const v of message.uncommittedOperatorPublicKeys) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitProgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitProgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.committedOperatorPublicKeys.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uncommittedOperatorPublicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitProgress {
    return {
      committedOperatorPublicKeys: globalThis.Array.isArray(object?.committedOperatorPublicKeys)
        ? object.committedOperatorPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      uncommittedOperatorPublicKeys: globalThis.Array.isArray(object?.uncommittedOperatorPublicKeys)
        ? object.uncommittedOperatorPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: CommitProgress): unknown {
    const obj: any = {};
    if (message.committedOperatorPublicKeys?.length) {
      obj.committedOperatorPublicKeys = message.committedOperatorPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.uncommittedOperatorPublicKeys?.length) {
      obj.uncommittedOperatorPublicKeys = message.uncommittedOperatorPublicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CommitProgress>): CommitProgress {
    return CommitProgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitProgress>): CommitProgress {
    const message = createBaseCommitProgress();
    message.committedOperatorPublicKeys = object.committedOperatorPublicKeys?.map((e) => e) || [];
    message.uncommittedOperatorPublicKeys = object.uncommittedOperatorPublicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseCommitTransactionResponse(): CommitTransactionResponse {
  return { commitStatus: 0, commitProgress: undefined };
}

export const CommitTransactionResponse: MessageFns<CommitTransactionResponse> = {
  encode(message: CommitTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commitStatus !== 0) {
      writer.uint32(8).int32(message.commitStatus);
    }
    if (message.commitProgress !== undefined) {
      CommitProgress.encode(message.commitProgress, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommitTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommitTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.commitStatus = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commitProgress = CommitProgress.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommitTransactionResponse {
    return {
      commitStatus: isSet(object.commitStatus) ? commitStatusFromJSON(object.commitStatus) : 0,
      commitProgress: isSet(object.commitProgress) ? CommitProgress.fromJSON(object.commitProgress) : undefined,
    };
  },

  toJSON(message: CommitTransactionResponse): unknown {
    const obj: any = {};
    if (message.commitStatus !== 0) {
      obj.commitStatus = commitStatusToJSON(message.commitStatus);
    }
    if (message.commitProgress !== undefined) {
      obj.commitProgress = CommitProgress.toJSON(message.commitProgress);
    }
    return obj;
  },

  create(base?: DeepPartial<CommitTransactionResponse>): CommitTransactionResponse {
    return CommitTransactionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommitTransactionResponse>): CommitTransactionResponse {
    const message = createBaseCommitTransactionResponse();
    message.commitStatus = object.commitStatus ?? 0;
    message.commitProgress = (object.commitProgress !== undefined && object.commitProgress !== null)
      ? CommitProgress.fromPartial(object.commitProgress)
      : undefined;
    return message;
  },
};

function createBaseQueryTokenMetadataRequest(): QueryTokenMetadataRequest {
  return { tokenIdentifiers: [], issuerPublicKeys: [] };
}

export const QueryTokenMetadataRequest: MessageFns<QueryTokenMetadataRequest> = {
  encode(message: QueryTokenMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenIdentifiers) {
      writer.uint32(10).bytes(v!);
    }
    for (const v of message.issuerPublicKeys) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenIdentifiers.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuerPublicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenMetadataRequest {
    return {
      tokenIdentifiers: globalThis.Array.isArray(object?.tokenIdentifiers)
        ? object.tokenIdentifiers.map((e: any) => bytesFromBase64(e))
        : [],
      issuerPublicKeys: globalThis.Array.isArray(object?.issuerPublicKeys)
        ? object.issuerPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: QueryTokenMetadataRequest): unknown {
    const obj: any = {};
    if (message.tokenIdentifiers?.length) {
      obj.tokenIdentifiers = message.tokenIdentifiers.map((e) => base64FromBytes(e));
    }
    if (message.issuerPublicKeys?.length) {
      obj.issuerPublicKeys = message.issuerPublicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenMetadataRequest>): QueryTokenMetadataRequest {
    return QueryTokenMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenMetadataRequest>): QueryTokenMetadataRequest {
    const message = createBaseQueryTokenMetadataRequest();
    message.tokenIdentifiers = object.tokenIdentifiers?.map((e) => e) || [];
    message.issuerPublicKeys = object.issuerPublicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseTokenMetadata(): TokenMetadata {
  return {
    issuerPublicKey: new Uint8Array(0),
    tokenName: "",
    tokenTicker: "",
    decimals: 0,
    maxSupply: new Uint8Array(0),
    isFreezable: false,
    creationEntityPublicKey: undefined,
    tokenIdentifier: new Uint8Array(0),
  };
}

export const TokenMetadata: MessageFns<TokenMetadata> = {
  encode(message: TokenMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issuerPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.issuerPublicKey);
    }
    if (message.tokenName !== "") {
      writer.uint32(18).string(message.tokenName);
    }
    if (message.tokenTicker !== "") {
      writer.uint32(26).string(message.tokenTicker);
    }
    if (message.decimals !== 0) {
      writer.uint32(32).uint32(message.decimals);
    }
    if (message.maxSupply.length !== 0) {
      writer.uint32(42).bytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      writer.uint32(48).bool(message.isFreezable);
    }
    if (message.creationEntityPublicKey !== undefined) {
      writer.uint32(58).bytes(message.creationEntityPublicKey);
    }
    if (message.tokenIdentifier.length !== 0) {
      writer.uint32(66).bytes(message.tokenIdentifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.issuerPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenTicker = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.decimals = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxSupply = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isFreezable = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.creationEntityPublicKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tokenIdentifier = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenMetadata {
    return {
      issuerPublicKey: isSet(object.issuerPublicKey) ? bytesFromBase64(object.issuerPublicKey) : new Uint8Array(0),
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      tokenTicker: isSet(object.tokenTicker) ? globalThis.String(object.tokenTicker) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      maxSupply: isSet(object.maxSupply) ? bytesFromBase64(object.maxSupply) : new Uint8Array(0),
      isFreezable: isSet(object.isFreezable) ? globalThis.Boolean(object.isFreezable) : false,
      creationEntityPublicKey: isSet(object.creationEntityPublicKey)
        ? bytesFromBase64(object.creationEntityPublicKey)
        : undefined,
      tokenIdentifier: isSet(object.tokenIdentifier) ? bytesFromBase64(object.tokenIdentifier) : new Uint8Array(0),
    };
  },

  toJSON(message: TokenMetadata): unknown {
    const obj: any = {};
    if (message.issuerPublicKey.length !== 0) {
      obj.issuerPublicKey = base64FromBytes(message.issuerPublicKey);
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.tokenTicker !== "") {
      obj.tokenTicker = message.tokenTicker;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.maxSupply.length !== 0) {
      obj.maxSupply = base64FromBytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      obj.isFreezable = message.isFreezable;
    }
    if (message.creationEntityPublicKey !== undefined) {
      obj.creationEntityPublicKey = base64FromBytes(message.creationEntityPublicKey);
    }
    if (message.tokenIdentifier.length !== 0) {
      obj.tokenIdentifier = base64FromBytes(message.tokenIdentifier);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenMetadata>): TokenMetadata {
    return TokenMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenMetadata>): TokenMetadata {
    const message = createBaseTokenMetadata();
    message.issuerPublicKey = object.issuerPublicKey ?? new Uint8Array(0);
    message.tokenName = object.tokenName ?? "";
    message.tokenTicker = object.tokenTicker ?? "";
    message.decimals = object.decimals ?? 0;
    message.maxSupply = object.maxSupply ?? new Uint8Array(0);
    message.isFreezable = object.isFreezable ?? false;
    message.creationEntityPublicKey = object.creationEntityPublicKey ?? undefined;
    message.tokenIdentifier = object.tokenIdentifier ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryTokenMetadataResponse(): QueryTokenMetadataResponse {
  return { tokenMetadata: [] };
}

export const QueryTokenMetadataResponse: MessageFns<QueryTokenMetadataResponse> = {
  encode(message: QueryTokenMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenMetadata) {
      TokenMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenMetadata.push(TokenMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenMetadataResponse {
    return {
      tokenMetadata: globalThis.Array.isArray(object?.tokenMetadata)
        ? object.tokenMetadata.map((e: any) => TokenMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryTokenMetadataResponse): unknown {
    const obj: any = {};
    if (message.tokenMetadata?.length) {
      obj.tokenMetadata = message.tokenMetadata.map((e) => TokenMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenMetadataResponse>): QueryTokenMetadataResponse {
    return QueryTokenMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenMetadataResponse>): QueryTokenMetadataResponse {
    const message = createBaseQueryTokenMetadataResponse();
    message.tokenMetadata = object.tokenMetadata?.map((e) => TokenMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryTokenOutputsRequest(): QueryTokenOutputsRequest {
  return { ownerPublicKeys: [], issuerPublicKeys: [], tokenIdentifiers: [], network: 0, pageRequest: undefined };
}

export const QueryTokenOutputsRequest: MessageFns<QueryTokenOutputsRequest> = {
  encode(message: QueryTokenOutputsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ownerPublicKeys) {
      writer.uint32(10).bytes(v!);
    }
    for (const v of message.issuerPublicKeys) {
      writer.uint32(18).bytes(v!);
    }
    for (const v of message.tokenIdentifiers) {
      writer.uint32(34).bytes(v!);
    }
    if (message.network !== 0) {
      writer.uint32(24).int32(message.network);
    }
    if (message.pageRequest !== undefined) {
      PageRequest.encode(message.pageRequest, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenOutputsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenOutputsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerPublicKeys.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuerPublicKeys.push(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenIdentifiers.push(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.network = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pageRequest = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenOutputsRequest {
    return {
      ownerPublicKeys: globalThis.Array.isArray(object?.ownerPublicKeys)
        ? object.ownerPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      issuerPublicKeys: globalThis.Array.isArray(object?.issuerPublicKeys)
        ? object.issuerPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      tokenIdentifiers: globalThis.Array.isArray(object?.tokenIdentifiers)
        ? object.tokenIdentifiers.map((e: any) => bytesFromBase64(e))
        : [],
      network: isSet(object.network) ? networkFromJSON(object.network) : 0,
      pageRequest: isSet(object.pageRequest) ? PageRequest.fromJSON(object.pageRequest) : undefined,
    };
  },

  toJSON(message: QueryTokenOutputsRequest): unknown {
    const obj: any = {};
    if (message.ownerPublicKeys?.length) {
      obj.ownerPublicKeys = message.ownerPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.issuerPublicKeys?.length) {
      obj.issuerPublicKeys = message.issuerPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.tokenIdentifiers?.length) {
      obj.tokenIdentifiers = message.tokenIdentifiers.map((e) => base64FromBytes(e));
    }
    if (message.network !== 0) {
      obj.network = networkToJSON(message.network);
    }
    if (message.pageRequest !== undefined) {
      obj.pageRequest = PageRequest.toJSON(message.pageRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenOutputsRequest>): QueryTokenOutputsRequest {
    return QueryTokenOutputsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenOutputsRequest>): QueryTokenOutputsRequest {
    const message = createBaseQueryTokenOutputsRequest();
    message.ownerPublicKeys = object.ownerPublicKeys?.map((e) => e) || [];
    message.issuerPublicKeys = object.issuerPublicKeys?.map((e) => e) || [];
    message.tokenIdentifiers = object.tokenIdentifiers?.map((e) => e) || [];
    message.network = object.network ?? 0;
    message.pageRequest = (object.pageRequest !== undefined && object.pageRequest !== null)
      ? PageRequest.fromPartial(object.pageRequest)
      : undefined;
    return message;
  },
};

function createBaseQueryTokenTransactionsRequest(): QueryTokenTransactionsRequest {
  return {
    outputIds: [],
    ownerPublicKeys: [],
    issuerPublicKeys: [],
    tokenIdentifiers: [],
    tokenTransactionHashes: [],
    limit: 0,
    offset: 0,
  };
}

export const QueryTokenTransactionsRequest: MessageFns<QueryTokenTransactionsRequest> = {
  encode(message: QueryTokenTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.outputIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.ownerPublicKeys) {
      writer.uint32(18).bytes(v!);
    }
    for (const v of message.issuerPublicKeys) {
      writer.uint32(26).bytes(v!);
    }
    for (const v of message.tokenIdentifiers) {
      writer.uint32(58).bytes(v!);
    }
    for (const v of message.tokenTransactionHashes) {
      writer.uint32(34).bytes(v!);
    }
    if (message.limit !== 0) {
      writer.uint32(40).int64(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(48).int64(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerPublicKeys.push(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.issuerPublicKeys.push(reader.bytes());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenIdentifiers.push(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenTransactionHashes.push(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.limit = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenTransactionsRequest {
    return {
      outputIds: globalThis.Array.isArray(object?.outputIds)
        ? object.outputIds.map((e: any) => globalThis.String(e))
        : [],
      ownerPublicKeys: globalThis.Array.isArray(object?.ownerPublicKeys)
        ? object.ownerPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      issuerPublicKeys: globalThis.Array.isArray(object?.issuerPublicKeys)
        ? object.issuerPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
      tokenIdentifiers: globalThis.Array.isArray(object?.tokenIdentifiers)
        ? object.tokenIdentifiers.map((e: any) => bytesFromBase64(e))
        : [],
      tokenTransactionHashes: globalThis.Array.isArray(object?.tokenTransactionHashes)
        ? object.tokenTransactionHashes.map((e: any) => bytesFromBase64(e))
        : [],
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: QueryTokenTransactionsRequest): unknown {
    const obj: any = {};
    if (message.outputIds?.length) {
      obj.outputIds = message.outputIds;
    }
    if (message.ownerPublicKeys?.length) {
      obj.ownerPublicKeys = message.ownerPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.issuerPublicKeys?.length) {
      obj.issuerPublicKeys = message.issuerPublicKeys.map((e) => base64FromBytes(e));
    }
    if (message.tokenIdentifiers?.length) {
      obj.tokenIdentifiers = message.tokenIdentifiers.map((e) => base64FromBytes(e));
    }
    if (message.tokenTransactionHashes?.length) {
      obj.tokenTransactionHashes = message.tokenTransactionHashes.map((e) => base64FromBytes(e));
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenTransactionsRequest>): QueryTokenTransactionsRequest {
    return QueryTokenTransactionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenTransactionsRequest>): QueryTokenTransactionsRequest {
    const message = createBaseQueryTokenTransactionsRequest();
    message.outputIds = object.outputIds?.map((e) => e) || [];
    message.ownerPublicKeys = object.ownerPublicKeys?.map((e) => e) || [];
    message.issuerPublicKeys = object.issuerPublicKeys?.map((e) => e) || [];
    message.tokenIdentifiers = object.tokenIdentifiers?.map((e) => e) || [];
    message.tokenTransactionHashes = object.tokenTransactionHashes?.map((e) => e) || [];
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseQueryTokenTransactionsResponse(): QueryTokenTransactionsResponse {
  return { tokenTransactionsWithStatus: [], offset: 0 };
}

export const QueryTokenTransactionsResponse: MessageFns<QueryTokenTransactionsResponse> = {
  encode(message: QueryTokenTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenTransactionsWithStatus) {
      TokenTransactionWithStatus.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.offset !== 0) {
      writer.uint32(16).int64(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenTransactionsWithStatus.push(TokenTransactionWithStatus.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenTransactionsResponse {
    return {
      tokenTransactionsWithStatus: globalThis.Array.isArray(object?.tokenTransactionsWithStatus)
        ? object.tokenTransactionsWithStatus.map((e: any) => TokenTransactionWithStatus.fromJSON(e))
        : [],
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: QueryTokenTransactionsResponse): unknown {
    const obj: any = {};
    if (message.tokenTransactionsWithStatus?.length) {
      obj.tokenTransactionsWithStatus = message.tokenTransactionsWithStatus.map((e) =>
        TokenTransactionWithStatus.toJSON(e)
      );
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenTransactionsResponse>): QueryTokenTransactionsResponse {
    return QueryTokenTransactionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenTransactionsResponse>): QueryTokenTransactionsResponse {
    const message = createBaseQueryTokenTransactionsResponse();
    message.tokenTransactionsWithStatus =
      object.tokenTransactionsWithStatus?.map((e) => TokenTransactionWithStatus.fromPartial(e)) || [];
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseOutputWithPreviousTransactionData(): OutputWithPreviousTransactionData {
  return { output: undefined, previousTransactionHash: new Uint8Array(0), previousTransactionVout: 0 };
}

export const OutputWithPreviousTransactionData: MessageFns<OutputWithPreviousTransactionData> = {
  encode(message: OutputWithPreviousTransactionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.output !== undefined) {
      TokenOutput.encode(message.output, writer.uint32(10).fork()).join();
    }
    if (message.previousTransactionHash.length !== 0) {
      writer.uint32(18).bytes(message.previousTransactionHash);
    }
    if (message.previousTransactionVout !== 0) {
      writer.uint32(24).uint32(message.previousTransactionVout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputWithPreviousTransactionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputWithPreviousTransactionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.output = TokenOutput.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousTransactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.previousTransactionVout = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputWithPreviousTransactionData {
    return {
      output: isSet(object.output) ? TokenOutput.fromJSON(object.output) : undefined,
      previousTransactionHash: isSet(object.previousTransactionHash)
        ? bytesFromBase64(object.previousTransactionHash)
        : new Uint8Array(0),
      previousTransactionVout: isSet(object.previousTransactionVout)
        ? globalThis.Number(object.previousTransactionVout)
        : 0,
    };
  },

  toJSON(message: OutputWithPreviousTransactionData): unknown {
    const obj: any = {};
    if (message.output !== undefined) {
      obj.output = TokenOutput.toJSON(message.output);
    }
    if (message.previousTransactionHash.length !== 0) {
      obj.previousTransactionHash = base64FromBytes(message.previousTransactionHash);
    }
    if (message.previousTransactionVout !== 0) {
      obj.previousTransactionVout = Math.round(message.previousTransactionVout);
    }
    return obj;
  },

  create(base?: DeepPartial<OutputWithPreviousTransactionData>): OutputWithPreviousTransactionData {
    return OutputWithPreviousTransactionData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutputWithPreviousTransactionData>): OutputWithPreviousTransactionData {
    const message = createBaseOutputWithPreviousTransactionData();
    message.output = (object.output !== undefined && object.output !== null)
      ? TokenOutput.fromPartial(object.output)
      : undefined;
    message.previousTransactionHash = object.previousTransactionHash ?? new Uint8Array(0);
    message.previousTransactionVout = object.previousTransactionVout ?? 0;
    return message;
  },
};

function createBaseQueryTokenOutputsResponse(): QueryTokenOutputsResponse {
  return { outputsWithPreviousTransactionData: [], pageResponse: undefined };
}

export const QueryTokenOutputsResponse: MessageFns<QueryTokenOutputsResponse> = {
  encode(message: QueryTokenOutputsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.outputsWithPreviousTransactionData) {
      OutputWithPreviousTransactionData.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pageResponse !== undefined) {
      PageResponse.encode(message.pageResponse, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTokenOutputsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenOutputsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputsWithPreviousTransactionData.push(
            OutputWithPreviousTransactionData.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageResponse = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenOutputsResponse {
    return {
      outputsWithPreviousTransactionData: globalThis.Array.isArray(object?.outputsWithPreviousTransactionData)
        ? object.outputsWithPreviousTransactionData.map((e: any) => OutputWithPreviousTransactionData.fromJSON(e))
        : [],
      pageResponse: isSet(object.pageResponse) ? PageResponse.fromJSON(object.pageResponse) : undefined,
    };
  },

  toJSON(message: QueryTokenOutputsResponse): unknown {
    const obj: any = {};
    if (message.outputsWithPreviousTransactionData?.length) {
      obj.outputsWithPreviousTransactionData = message.outputsWithPreviousTransactionData.map((e) =>
        OutputWithPreviousTransactionData.toJSON(e)
      );
    }
    if (message.pageResponse !== undefined) {
      obj.pageResponse = PageResponse.toJSON(message.pageResponse);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTokenOutputsResponse>): QueryTokenOutputsResponse {
    return QueryTokenOutputsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTokenOutputsResponse>): QueryTokenOutputsResponse {
    const message = createBaseQueryTokenOutputsResponse();
    message.outputsWithPreviousTransactionData =
      object.outputsWithPreviousTransactionData?.map((e) => OutputWithPreviousTransactionData.fromPartial(e)) || [];
    message.pageResponse = (object.pageResponse !== undefined && object.pageResponse !== null)
      ? PageResponse.fromPartial(object.pageResponse)
      : undefined;
    return message;
  },
};

function createBaseSpentTokenOutputMetadata(): SpentTokenOutputMetadata {
  return { outputId: "", revocationSecret: new Uint8Array(0) };
}

export const SpentTokenOutputMetadata: MessageFns<SpentTokenOutputMetadata> = {
  encode(message: SpentTokenOutputMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputId !== "") {
      writer.uint32(10).string(message.outputId);
    }
    if (message.revocationSecret.length !== 0) {
      writer.uint32(18).bytes(message.revocationSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpentTokenOutputMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpentTokenOutputMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.revocationSecret = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpentTokenOutputMetadata {
    return {
      outputId: isSet(object.outputId) ? globalThis.String(object.outputId) : "",
      revocationSecret: isSet(object.revocationSecret) ? bytesFromBase64(object.revocationSecret) : new Uint8Array(0),
    };
  },

  toJSON(message: SpentTokenOutputMetadata): unknown {
    const obj: any = {};
    if (message.outputId !== "") {
      obj.outputId = message.outputId;
    }
    if (message.revocationSecret.length !== 0) {
      obj.revocationSecret = base64FromBytes(message.revocationSecret);
    }
    return obj;
  },

  create(base?: DeepPartial<SpentTokenOutputMetadata>): SpentTokenOutputMetadata {
    return SpentTokenOutputMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpentTokenOutputMetadata>): SpentTokenOutputMetadata {
    const message = createBaseSpentTokenOutputMetadata();
    message.outputId = object.outputId ?? "";
    message.revocationSecret = object.revocationSecret ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTokenTransactionConfirmationMetadata(): TokenTransactionConfirmationMetadata {
  return { spentTokenOutputsMetadata: [] };
}

export const TokenTransactionConfirmationMetadata: MessageFns<TokenTransactionConfirmationMetadata> = {
  encode(message: TokenTransactionConfirmationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spentTokenOutputsMetadata) {
      SpentTokenOutputMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenTransactionConfirmationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenTransactionConfirmationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spentTokenOutputsMetadata.push(SpentTokenOutputMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenTransactionConfirmationMetadata {
    return {
      spentTokenOutputsMetadata: globalThis.Array.isArray(object?.spentTokenOutputsMetadata)
        ? object.spentTokenOutputsMetadata.map((e: any) => SpentTokenOutputMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TokenTransactionConfirmationMetadata): unknown {
    const obj: any = {};
    if (message.spentTokenOutputsMetadata?.length) {
      obj.spentTokenOutputsMetadata = message.spentTokenOutputsMetadata.map((e) => SpentTokenOutputMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TokenTransactionConfirmationMetadata>): TokenTransactionConfirmationMetadata {
    return TokenTransactionConfirmationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenTransactionConfirmationMetadata>): TokenTransactionConfirmationMetadata {
    const message = createBaseTokenTransactionConfirmationMetadata();
    message.spentTokenOutputsMetadata =
      object.spentTokenOutputsMetadata?.map((e) => SpentTokenOutputMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTokenTransactionWithStatus(): TokenTransactionWithStatus {
  return {
    tokenTransaction: undefined,
    status: 0,
    confirmationMetadata: undefined,
    tokenTransactionHash: new Uint8Array(0),
  };
}

export const TokenTransactionWithStatus: MessageFns<TokenTransactionWithStatus> = {
  encode(message: TokenTransactionWithStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenTransaction !== undefined) {
      TokenTransaction.encode(message.tokenTransaction, writer.uint32(10).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.confirmationMetadata !== undefined) {
      TokenTransactionConfirmationMetadata.encode(message.confirmationMetadata, writer.uint32(26).fork()).join();
    }
    if (message.tokenTransactionHash.length !== 0) {
      writer.uint32(34).bytes(message.tokenTransactionHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenTransactionWithStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenTransactionWithStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.confirmationMetadata = TokenTransactionConfirmationMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenTransactionHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenTransactionWithStatus {
    return {
      tokenTransaction: isSet(object.tokenTransaction) ? TokenTransaction.fromJSON(object.tokenTransaction) : undefined,
      status: isSet(object.status) ? tokenTransactionStatusFromJSON(object.status) : 0,
      confirmationMetadata: isSet(object.confirmationMetadata)
        ? TokenTransactionConfirmationMetadata.fromJSON(object.confirmationMetadata)
        : undefined,
      tokenTransactionHash: isSet(object.tokenTransactionHash)
        ? bytesFromBase64(object.tokenTransactionHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: TokenTransactionWithStatus): unknown {
    const obj: any = {};
    if (message.tokenTransaction !== undefined) {
      obj.tokenTransaction = TokenTransaction.toJSON(message.tokenTransaction);
    }
    if (message.status !== 0) {
      obj.status = tokenTransactionStatusToJSON(message.status);
    }
    if (message.confirmationMetadata !== undefined) {
      obj.confirmationMetadata = TokenTransactionConfirmationMetadata.toJSON(message.confirmationMetadata);
    }
    if (message.tokenTransactionHash.length !== 0) {
      obj.tokenTransactionHash = base64FromBytes(message.tokenTransactionHash);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenTransactionWithStatus>): TokenTransactionWithStatus {
    return TokenTransactionWithStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenTransactionWithStatus>): TokenTransactionWithStatus {
    const message = createBaseTokenTransactionWithStatus();
    message.tokenTransaction = (object.tokenTransaction !== undefined && object.tokenTransaction !== null)
      ? TokenTransaction.fromPartial(object.tokenTransaction)
      : undefined;
    message.status = object.status ?? 0;
    message.confirmationMetadata = (object.confirmationMetadata !== undefined && object.confirmationMetadata !== null)
      ? TokenTransactionConfirmationMetadata.fromPartial(object.confirmationMetadata)
      : undefined;
    message.tokenTransactionHash = object.tokenTransactionHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFreezeTokensPayload(): FreezeTokensPayload {
  return {
    version: 0,
    ownerPublicKey: new Uint8Array(0),
    tokenPublicKey: undefined,
    tokenIdentifier: undefined,
    issuerProvidedTimestamp: 0,
    operatorIdentityPublicKey: new Uint8Array(0),
    shouldUnfreeze: false,
  };
}

export const FreezeTokensPayload: MessageFns<FreezeTokensPayload> = {
  encode(message: FreezeTokensPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(26).bytes(message.tokenPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      writer.uint32(34).bytes(message.tokenIdentifier);
    }
    if (message.issuerProvidedTimestamp !== 0) {
      writer.uint32(40).uint64(message.issuerProvidedTimestamp);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      writer.uint32(50).bytes(message.operatorIdentityPublicKey);
    }
    if (message.shouldUnfreeze !== false) {
      writer.uint32(56).bool(message.shouldUnfreeze);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenIdentifier = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.issuerProvidedTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.operatorIdentityPublicKey = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.shouldUnfreeze = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensPayload {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : undefined,
      tokenIdentifier: isSet(object.tokenIdentifier) ? bytesFromBase64(object.tokenIdentifier) : undefined,
      issuerProvidedTimestamp: isSet(object.issuerProvidedTimestamp)
        ? globalThis.Number(object.issuerProvidedTimestamp)
        : 0,
      operatorIdentityPublicKey: isSet(object.operatorIdentityPublicKey)
        ? bytesFromBase64(object.operatorIdentityPublicKey)
        : new Uint8Array(0),
      shouldUnfreeze: isSet(object.shouldUnfreeze) ? globalThis.Boolean(object.shouldUnfreeze) : false,
    };
  },

  toJSON(message: FreezeTokensPayload): unknown {
    const obj: any = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.tokenIdentifier !== undefined) {
      obj.tokenIdentifier = base64FromBytes(message.tokenIdentifier);
    }
    if (message.issuerProvidedTimestamp !== 0) {
      obj.issuerProvidedTimestamp = Math.round(message.issuerProvidedTimestamp);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      obj.operatorIdentityPublicKey = base64FromBytes(message.operatorIdentityPublicKey);
    }
    if (message.shouldUnfreeze !== false) {
      obj.shouldUnfreeze = message.shouldUnfreeze;
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensPayload>): FreezeTokensPayload {
    return FreezeTokensPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensPayload>): FreezeTokensPayload {
    const message = createBaseFreezeTokensPayload();
    message.version = object.version ?? 0;
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.tokenIdentifier = object.tokenIdentifier ?? undefined;
    message.issuerProvidedTimestamp = object.issuerProvidedTimestamp ?? 0;
    message.operatorIdentityPublicKey = object.operatorIdentityPublicKey ?? new Uint8Array(0);
    message.shouldUnfreeze = object.shouldUnfreeze ?? false;
    return message;
  },
};

function createBaseFreezeTokensRequest(): FreezeTokensRequest {
  return { freezeTokensPayload: undefined, issuerSignature: new Uint8Array(0) };
}

export const FreezeTokensRequest: MessageFns<FreezeTokensRequest> = {
  encode(message: FreezeTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.freezeTokensPayload !== undefined) {
      FreezeTokensPayload.encode(message.freezeTokensPayload, writer.uint32(10).fork()).join();
    }
    if (message.issuerSignature.length !== 0) {
      writer.uint32(18).bytes(message.issuerSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.freezeTokensPayload = FreezeTokensPayload.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuerSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensRequest {
    return {
      freezeTokensPayload: isSet(object.freezeTokensPayload)
        ? FreezeTokensPayload.fromJSON(object.freezeTokensPayload)
        : undefined,
      issuerSignature: isSet(object.issuerSignature) ? bytesFromBase64(object.issuerSignature) : new Uint8Array(0),
    };
  },

  toJSON(message: FreezeTokensRequest): unknown {
    const obj: any = {};
    if (message.freezeTokensPayload !== undefined) {
      obj.freezeTokensPayload = FreezeTokensPayload.toJSON(message.freezeTokensPayload);
    }
    if (message.issuerSignature.length !== 0) {
      obj.issuerSignature = base64FromBytes(message.issuerSignature);
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    return FreezeTokensRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    const message = createBaseFreezeTokensRequest();
    message.freezeTokensPayload = (object.freezeTokensPayload !== undefined && object.freezeTokensPayload !== null)
      ? FreezeTokensPayload.fromPartial(object.freezeTokensPayload)
      : undefined;
    message.issuerSignature = object.issuerSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFreezeTokensResponse(): FreezeTokensResponse {
  return { impactedOutputIds: [], impactedTokenAmount: new Uint8Array(0) };
}

export const FreezeTokensResponse: MessageFns<FreezeTokensResponse> = {
  encode(message: FreezeTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.impactedOutputIds) {
      writer.uint32(10).string(v!);
    }
    if (message.impactedTokenAmount.length !== 0) {
      writer.uint32(18).bytes(message.impactedTokenAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.impactedOutputIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.impactedTokenAmount = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensResponse {
    return {
      impactedOutputIds: globalThis.Array.isArray(object?.impactedOutputIds)
        ? object.impactedOutputIds.map((e: any) => globalThis.String(e))
        : [],
      impactedTokenAmount: isSet(object.impactedTokenAmount)
        ? bytesFromBase64(object.impactedTokenAmount)
        : new Uint8Array(0),
    };
  },

  toJSON(message: FreezeTokensResponse): unknown {
    const obj: any = {};
    if (message.impactedOutputIds?.length) {
      obj.impactedOutputIds = message.impactedOutputIds;
    }
    if (message.impactedTokenAmount.length !== 0) {
      obj.impactedTokenAmount = base64FromBytes(message.impactedTokenAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    return FreezeTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    const message = createBaseFreezeTokensResponse();
    message.impactedOutputIds = object.impactedOutputIds?.map((e) => e) || [];
    message.impactedTokenAmount = object.impactedTokenAmount ?? new Uint8Array(0);
    return message;
  },
};

export type SparkTokenServiceDefinition = typeof SparkTokenServiceDefinition;
export const SparkTokenServiceDefinition = {
  name: "SparkTokenService",
  fullName: "spark_token.SparkTokenService",
  methods: {
    /**
     * Start process to create final token transaction with all inputs required
     * from user and SOs (including revocation secret commitment)
     */
    start_transaction: {
      name: "start_transaction",
      requestType: StartTransactionRequest,
      requestStream: false,
      responseType: StartTransactionResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Complete the transaction and commit it with all SOs. This will be
     * coordinated by one SO.
     */
    commit_transaction: {
      name: "commit_transaction",
      requestType: CommitTransactionRequest,
      requestStream: false,
      responseType: CommitTransactionResponse,
      responseStream: false,
      options: {},
    },
    query_token_metadata: {
      name: "query_token_metadata",
      requestType: QueryTokenMetadataRequest,
      requestStream: false,
      responseType: QueryTokenMetadataResponse,
      responseStream: false,
      options: {},
    },
    query_token_transactions: {
      name: "query_token_transactions",
      requestType: QueryTokenTransactionsRequest,
      requestStream: false,
      responseType: QueryTokenTransactionsResponse,
      responseStream: false,
      options: {},
    },
    query_token_outputs: {
      name: "query_token_outputs",
      requestType: QueryTokenOutputsRequest,
      requestStream: false,
      responseType: QueryTokenOutputsResponse,
      responseStream: false,
      options: {},
    },
    freeze_tokens: {
      name: "freeze_tokens",
      requestType: FreezeTokensRequest,
      requestStream: false,
      responseType: FreezeTokensResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SparkTokenServiceImplementation<CallContextExt = {}> {
  /**
   * Start process to create final token transaction with all inputs required
   * from user and SOs (including revocation secret commitment)
   */
  start_transaction(
    request: StartTransactionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StartTransactionResponse>>;
  /**
   * Complete the transaction and commit it with all SOs. This will be
   * coordinated by one SO.
   */
  commit_transaction(
    request: CommitTransactionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CommitTransactionResponse>>;
  query_token_metadata(
    request: QueryTokenMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QueryTokenMetadataResponse>>;
  query_token_transactions(
    request: QueryTokenTransactionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QueryTokenTransactionsResponse>>;
  query_token_outputs(
    request: QueryTokenOutputsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<QueryTokenOutputsResponse>>;
  freeze_tokens(
    request: FreezeTokensRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FreezeTokensResponse>>;
}

export interface SparkTokenServiceClient<CallOptionsExt = {}> {
  /**
   * Start process to create final token transaction with all inputs required
   * from user and SOs (including revocation secret commitment)
   */
  start_transaction(
    request: DeepPartial<StartTransactionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartTransactionResponse>;
  /**
   * Complete the transaction and commit it with all SOs. This will be
   * coordinated by one SO.
   */
  commit_transaction(
    request: DeepPartial<CommitTransactionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CommitTransactionResponse>;
  query_token_metadata(
    request: DeepPartial<QueryTokenMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QueryTokenMetadataResponse>;
  query_token_transactions(
    request: DeepPartial<QueryTokenTransactionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QueryTokenTransactionsResponse>;
  query_token_outputs(
    request: DeepPartial<QueryTokenOutputsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<QueryTokenOutputsResponse>;
  freeze_tokens(
    request: DeepPartial<FreezeTokensRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FreezeTokensResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
