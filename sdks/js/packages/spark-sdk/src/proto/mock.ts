// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: mock.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty.js";

export const protobufPackage = "mock";

export interface CleanUpPreimageShareRequest {
  paymentHash: Uint8Array;
}

export interface InterruptTransferRequest {
  action: InterruptTransferRequest_InterruptTransferAction;
}

export enum InterruptTransferRequest_InterruptTransferAction {
  NONE = 0,
  INTERRUPT = 1,
  RESUME = 2,
  UNRECOGNIZED = -1,
}

export function interruptTransferRequest_InterruptTransferActionFromJSON(
  object: any,
): InterruptTransferRequest_InterruptTransferAction {
  switch (object) {
    case 0:
    case "NONE":
      return InterruptTransferRequest_InterruptTransferAction.NONE;
    case 1:
    case "INTERRUPT":
      return InterruptTransferRequest_InterruptTransferAction.INTERRUPT;
    case 2:
    case "RESUME":
      return InterruptTransferRequest_InterruptTransferAction.RESUME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InterruptTransferRequest_InterruptTransferAction.UNRECOGNIZED;
  }
}

export function interruptTransferRequest_InterruptTransferActionToJSON(
  object: InterruptTransferRequest_InterruptTransferAction,
): string {
  switch (object) {
    case InterruptTransferRequest_InterruptTransferAction.NONE:
      return "NONE";
    case InterruptTransferRequest_InterruptTransferAction.INTERRUPT:
      return "INTERRUPT";
    case InterruptTransferRequest_InterruptTransferAction.RESUME:
      return "RESUME";
    case InterruptTransferRequest_InterruptTransferAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UpdateNodesStatusRequest {
  nodeIds: string[];
  status: string;
}

/** TriggerTaskRequest is used to trigger a scheduled task immediately in hermetic tests. */
export interface TriggerTaskRequest {
  taskName: string;
}

export interface InterruptCoopExitRequest {
  action: InterruptCoopExitRequest_InterruptCoopExitAction;
  /** optional, defaults to MockAction.TargetOperatorID */
  targetOperator: string;
}

export enum InterruptCoopExitRequest_InterruptCoopExitAction {
  NONE = 0,
  INTERRUPT = 1,
  RESUME = 2,
  UNRECOGNIZED = -1,
}

export function interruptCoopExitRequest_InterruptCoopExitActionFromJSON(
  object: any,
): InterruptCoopExitRequest_InterruptCoopExitAction {
  switch (object) {
    case 0:
    case "NONE":
      return InterruptCoopExitRequest_InterruptCoopExitAction.NONE;
    case 1:
    case "INTERRUPT":
      return InterruptCoopExitRequest_InterruptCoopExitAction.INTERRUPT;
    case 2:
    case "RESUME":
      return InterruptCoopExitRequest_InterruptCoopExitAction.RESUME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InterruptCoopExitRequest_InterruptCoopExitAction.UNRECOGNIZED;
  }
}

export function interruptCoopExitRequest_InterruptCoopExitActionToJSON(
  object: InterruptCoopExitRequest_InterruptCoopExitAction,
): string {
  switch (object) {
    case InterruptCoopExitRequest_InterruptCoopExitAction.NONE:
      return "NONE";
    case InterruptCoopExitRequest_InterruptCoopExitAction.INTERRUPT:
      return "INTERRUPT";
    case InterruptCoopExitRequest_InterruptCoopExitAction.RESUME:
      return "RESUME";
    case InterruptCoopExitRequest_InterruptCoopExitAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCleanUpPreimageShareRequest(): CleanUpPreimageShareRequest {
  return { paymentHash: new Uint8Array(0) };
}

export const CleanUpPreimageShareRequest: MessageFns<CleanUpPreimageShareRequest> = {
  encode(message: CleanUpPreimageShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentHash.length !== 0) {
      writer.uint32(10).bytes(message.paymentHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanUpPreimageShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanUpPreimageShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanUpPreimageShareRequest {
    return { paymentHash: isSet(object.paymentHash) ? bytesFromBase64(object.paymentHash) : new Uint8Array(0) };
  },

  toJSON(message: CleanUpPreimageShareRequest): unknown {
    const obj: any = {};
    if (message.paymentHash.length !== 0) {
      obj.paymentHash = base64FromBytes(message.paymentHash);
    }
    return obj;
  },

  create(base?: DeepPartial<CleanUpPreimageShareRequest>): CleanUpPreimageShareRequest {
    return CleanUpPreimageShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanUpPreimageShareRequest>): CleanUpPreimageShareRequest {
    const message = createBaseCleanUpPreimageShareRequest();
    message.paymentHash = object.paymentHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseInterruptTransferRequest(): InterruptTransferRequest {
  return { action: 0 };
}

export const InterruptTransferRequest: MessageFns<InterruptTransferRequest> = {
  encode(message: InterruptTransferRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== 0) {
      writer.uint32(8).int32(message.action);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterruptTransferRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterruptTransferRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterruptTransferRequest {
    return {
      action: isSet(object.action) ? interruptTransferRequest_InterruptTransferActionFromJSON(object.action) : 0,
    };
  },

  toJSON(message: InterruptTransferRequest): unknown {
    const obj: any = {};
    if (message.action !== 0) {
      obj.action = interruptTransferRequest_InterruptTransferActionToJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<InterruptTransferRequest>): InterruptTransferRequest {
    return InterruptTransferRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterruptTransferRequest>): InterruptTransferRequest {
    const message = createBaseInterruptTransferRequest();
    message.action = object.action ?? 0;
    return message;
  },
};

function createBaseUpdateNodesStatusRequest(): UpdateNodesStatusRequest {
  return { nodeIds: [], status: "" };
}

export const UpdateNodesStatusRequest: MessageFns<UpdateNodesStatusRequest> = {
  encode(message: UpdateNodesStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodeIds) {
      writer.uint32(10).string(v!);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNodesStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNodesStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNodesStatusRequest {
    return {
      nodeIds: globalThis.Array.isArray(object?.nodeIds) ? object.nodeIds.map((e: any) => globalThis.String(e)) : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: UpdateNodesStatusRequest): unknown {
    const obj: any = {};
    if (message.nodeIds?.length) {
      obj.nodeIds = message.nodeIds;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNodesStatusRequest>): UpdateNodesStatusRequest {
    return UpdateNodesStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNodesStatusRequest>): UpdateNodesStatusRequest {
    const message = createBaseUpdateNodesStatusRequest();
    message.nodeIds = object.nodeIds?.map((e) => e) || [];
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseTriggerTaskRequest(): TriggerTaskRequest {
  return { taskName: "" };
}

export const TriggerTaskRequest: MessageFns<TriggerTaskRequest> = {
  encode(message: TriggerTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskName !== "") {
      writer.uint32(10).string(message.taskName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerTaskRequest {
    return { taskName: isSet(object.taskName) ? globalThis.String(object.taskName) : "" };
  },

  toJSON(message: TriggerTaskRequest): unknown {
    const obj: any = {};
    if (message.taskName !== "") {
      obj.taskName = message.taskName;
    }
    return obj;
  },

  create(base?: DeepPartial<TriggerTaskRequest>): TriggerTaskRequest {
    return TriggerTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TriggerTaskRequest>): TriggerTaskRequest {
    const message = createBaseTriggerTaskRequest();
    message.taskName = object.taskName ?? "";
    return message;
  },
};

function createBaseInterruptCoopExitRequest(): InterruptCoopExitRequest {
  return { action: 0, targetOperator: "" };
}

export const InterruptCoopExitRequest: MessageFns<InterruptCoopExitRequest> = {
  encode(message: InterruptCoopExitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== 0) {
      writer.uint32(8).int32(message.action);
    }
    if (message.targetOperator !== "") {
      writer.uint32(18).string(message.targetOperator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterruptCoopExitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterruptCoopExitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetOperator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterruptCoopExitRequest {
    return {
      action: isSet(object.action) ? interruptCoopExitRequest_InterruptCoopExitActionFromJSON(object.action) : 0,
      targetOperator: isSet(object.targetOperator) ? globalThis.String(object.targetOperator) : "",
    };
  },

  toJSON(message: InterruptCoopExitRequest): unknown {
    const obj: any = {};
    if (message.action !== 0) {
      obj.action = interruptCoopExitRequest_InterruptCoopExitActionToJSON(message.action);
    }
    if (message.targetOperator !== "") {
      obj.targetOperator = message.targetOperator;
    }
    return obj;
  },

  create(base?: DeepPartial<InterruptCoopExitRequest>): InterruptCoopExitRequest {
    return InterruptCoopExitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InterruptCoopExitRequest>): InterruptCoopExitRequest {
    const message = createBaseInterruptCoopExitRequest();
    message.action = object.action ?? 0;
    message.targetOperator = object.targetOperator ?? "";
    return message;
  },
};

export type MockServiceDefinition = typeof MockServiceDefinition;
export const MockServiceDefinition = {
  name: "MockService",
  fullName: "mock.MockService",
  methods: {
    clean_up_preimage_share: {
      name: "clean_up_preimage_share",
      requestType: CleanUpPreimageShareRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    interrupt_transfer: {
      name: "interrupt_transfer",
      requestType: InterruptTransferRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    interrupt_coop_exit: {
      name: "interrupt_coop_exit",
      requestType: InterruptCoopExitRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    update_nodes_status: {
      name: "update_nodes_status",
      requestType: UpdateNodesStatusRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Triggers the execution of a scheduled task immediately by name. Used by hermetic tests */
    trigger_task: {
      name: "trigger_task",
      requestType: TriggerTaskRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MockServiceImplementation<CallContextExt = {}> {
  clean_up_preimage_share(
    request: CleanUpPreimageShareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  interrupt_transfer(
    request: InterruptTransferRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  interrupt_coop_exit(
    request: InterruptCoopExitRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  update_nodes_status(
    request: UpdateNodesStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Triggers the execution of a scheduled task immediately by name. Used by hermetic tests */
  trigger_task(request: TriggerTaskRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface MockServiceClient<CallOptionsExt = {}> {
  clean_up_preimage_share(
    request: DeepPartial<CleanUpPreimageShareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  interrupt_transfer(
    request: DeepPartial<InterruptTransferRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  interrupt_coop_exit(
    request: DeepPartial<InterruptCoopExitRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  update_nodes_status(
    request: DeepPartial<UpdateNodesStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Triggers the execution of a scheduled task immediately by name. Used by hermetic tests */
  trigger_task(request: DeepPartial<TriggerTaskRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
