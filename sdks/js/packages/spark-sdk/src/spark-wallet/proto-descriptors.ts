/**
 * Auto-generated protobuf descriptors
 * Generated from spark_descriptors.pb
 *
 * This file contains the binary protobuf descriptors encoded as base64
 * for runtime field number extraction and reflection.
 */

// Base64-encoded FileDescriptorSet
export const SPARK_DESCRIPTORS_BASE64 =
  "";

// Convert back to Uint8Array when needed
export function getSparkDescriptorBytes(): Uint8Array {
  // Convert base64 to binary
  const binaryString = atob(SPARK_DESCRIPTORS_BASE64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}
