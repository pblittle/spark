// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: spark_internal.proto

package spark_internal

import (
	common "github.com/lightsparkdev/spark/proto/common"
	spark "github.com/lightsparkdev/spark/proto/spark"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SettleKeyTweakAction int32

const (
	SettleKeyTweakAction_NONE     SettleKeyTweakAction = 0
	SettleKeyTweakAction_COMMIT   SettleKeyTweakAction = 1
	SettleKeyTweakAction_ROLLBACK SettleKeyTweakAction = 2
)

// Enum value maps for SettleKeyTweakAction.
var (
	SettleKeyTweakAction_name = map[int32]string{
		0: "NONE",
		1: "COMMIT",
		2: "ROLLBACK",
	}
	SettleKeyTweakAction_value = map[string]int32{
		"NONE":     0,
		"COMMIT":   1,
		"ROLLBACK": 2,
	}
)

func (x SettleKeyTweakAction) Enum() *SettleKeyTweakAction {
	p := new(SettleKeyTweakAction)
	*p = x
	return p
}

func (x SettleKeyTweakAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettleKeyTweakAction) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_internal_proto_enumTypes[0].Descriptor()
}

func (SettleKeyTweakAction) Type() protoreflect.EnumType {
	return &file_spark_internal_proto_enumTypes[0]
}

func (x SettleKeyTweakAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettleKeyTweakAction.Descriptor instead.
func (SettleKeyTweakAction) EnumDescriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{0}
}

type MarkKeysharesAsUsedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId    []string               `protobuf:"bytes,1,rep,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkKeysharesAsUsedRequest) Reset() {
	*x = MarkKeysharesAsUsedRequest{}
	mi := &file_spark_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeysharesAsUsedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeysharesAsUsedRequest) ProtoMessage() {}

func (x *MarkKeysharesAsUsedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeysharesAsUsedRequest.ProtoReflect.Descriptor instead.
func (*MarkKeysharesAsUsedRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{0}
}

func (x *MarkKeysharesAsUsedRequest) GetKeyshareId() []string {
	if x != nil {
		return x.KeyshareId
	}
	return nil
}

type MarkKeyshareForDepositAddressRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId             string                 `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	Address                string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	OwnerIdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	OwnerSigningPublicKey  []byte                 `protobuf:"bytes,4,opt,name=owner_signing_public_key,json=ownerSigningPublicKey,proto3" json:"owner_signing_public_key,omitempty"`
	// Static deposit address flag
	IsStatic      *bool `protobuf:"varint,5,opt,name=is_static,json=isStatic,proto3,oneof" json:"is_static,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkKeyshareForDepositAddressRequest) Reset() {
	*x = MarkKeyshareForDepositAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressRequest) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressRequest.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{1}
}

func (x *MarkKeyshareForDepositAddressRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerSigningPublicKey() []byte {
	if x != nil {
		return x.OwnerSigningPublicKey
	}
	return nil
}

func (x *MarkKeyshareForDepositAddressRequest) GetIsStatic() bool {
	if x != nil && x.IsStatic != nil {
		return *x.IsStatic
	}
	return false
}

type MarkKeyshareForDepositAddressResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AddressSignature []byte                 `protobuf:"bytes,1,opt,name=address_signature,json=addressSignature,proto3" json:"address_signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MarkKeyshareForDepositAddressResponse) Reset() {
	*x = MarkKeyshareForDepositAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressResponse) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressResponse.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{2}
}

func (x *MarkKeyshareForDepositAddressResponse) GetAddressSignature() []byte {
	if x != nil {
		return x.AddressSignature
	}
	return nil
}

type FrostRound1Request struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	KeyshareIds []string               `protobuf:"bytes,1,rep,name=keyshare_ids,json=keyshareIds,proto3" json:"keyshare_ids,omitempty"`
	PublicKeys  map[string][]byte      `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Count       uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// If this is set to non-zero, the keyshare_ids will be ignored and the random keys will be used.
	RandomNonceCount uint32 `protobuf:"varint,4,opt,name=random_nonce_count,json=randomNonceCount,proto3" json:"random_nonce_count,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FrostRound1Request) Reset() {
	*x = FrostRound1Request{}
	mi := &file_spark_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Request) ProtoMessage() {}

func (x *FrostRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Request.ProtoReflect.Descriptor instead.
func (*FrostRound1Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{3}
}

func (x *FrostRound1Request) GetKeyshareIds() []string {
	if x != nil {
		return x.KeyshareIds
	}
	return nil
}

func (x *FrostRound1Request) GetPublicKeys() map[string][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *FrostRound1Request) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FrostRound1Request) GetRandomNonceCount() uint32 {
	if x != nil {
		return x.RandomNonceCount
	}
	return 0
}

type FrostRound1Response struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	SigningCommitments []*common.SigningCommitment `protobuf:"bytes,1,rep,name=signing_commitments,json=signingCommitments,proto3" json:"signing_commitments,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FrostRound1Response) Reset() {
	*x = FrostRound1Response{}
	mi := &file_spark_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Response) ProtoMessage() {}

func (x *FrostRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Response.ProtoReflect.Descriptor instead.
func (*FrostRound1Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{4}
}

func (x *FrostRound1Response) GetSigningCommitments() []*common.SigningCommitment {
	if x != nil {
		return x.SigningCommitments
	}
	return nil
}

type SigningJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the signing job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The message to sign.
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The secret package from DKG round 3.
	KeyshareId string `protobuf:"bytes,3,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*common.SigningCommitment `protobuf:"bytes,5,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The commitments for all participants of the user.
	UserCommitments *common.SigningCommitment `protobuf:"bytes,6,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
	// The adaptor for the message.
	AdaptorPublicKey []byte `protobuf:"bytes,7,opt,name=adaptor_public_key,json=adaptorPublicKey,proto3" json:"adaptor_public_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SigningJob) Reset() {
	*x = SigningJob{}
	mi := &file_spark_internal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningJob) ProtoMessage() {}

func (x *SigningJob) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningJob.ProtoReflect.Descriptor instead.
func (*SigningJob) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{5}
}

func (x *SigningJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SigningJob) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SigningJob) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *SigningJob) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *SigningJob) GetCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *SigningJob) GetUserCommitments() *common.SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

func (x *SigningJob) GetAdaptorPublicKey() []byte {
	if x != nil {
		return x.AdaptorPublicKey
	}
	return nil
}

type FrostRound2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SigningJobs   []*SigningJob          `protobuf:"bytes,1,rep,name=signing_jobs,json=signingJobs,proto3" json:"signing_jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrostRound2Request) Reset() {
	*x = FrostRound2Request{}
	mi := &file_spark_internal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Request) ProtoMessage() {}

func (x *FrostRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Request.ProtoReflect.Descriptor instead.
func (*FrostRound2Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{6}
}

func (x *FrostRound2Request) GetSigningJobs() []*SigningJob {
	if x != nil {
		return x.SigningJobs
	}
	return nil
}

type FrostRound2Response struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Results       map[string]*common.SigningResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrostRound2Response) Reset() {
	*x = FrostRound2Response{}
	mi := &file_spark_internal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Response) ProtoMessage() {}

func (x *FrostRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Response.ProtoReflect.Descriptor instead.
func (*FrostRound2Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{7}
}

func (x *FrostRound2Response) GetResults() map[string]*common.SigningResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FinalizeTreeCreationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*TreeNode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Network       spark.Network          `protobuf:"varint,2,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeTreeCreationRequest) Reset() {
	*x = FinalizeTreeCreationRequest{}
	mi := &file_spark_internal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTreeCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTreeCreationRequest) ProtoMessage() {}

func (x *FinalizeTreeCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTreeCreationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTreeCreationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{8}
}

func (x *FinalizeTreeCreationRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FinalizeTreeCreationRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type FinalizeTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Nodes         []*TreeNode            `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeTransferRequest) Reset() {
	*x = FinalizeTransferRequest{}
	mi := &file_spark_internal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTransferRequest) ProtoMessage() {}

func (x *FinalizeTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTransferRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{9}
}

func (x *FinalizeTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FinalizeTransferRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FinalizeTransferRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FinalizeRefreshTimelockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*TreeNode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeRefreshTimelockRequest) Reset() {
	*x = FinalizeRefreshTimelockRequest{}
	mi := &file_spark_internal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeRefreshTimelockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRefreshTimelockRequest) ProtoMessage() {}

func (x *FinalizeRefreshTimelockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRefreshTimelockRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRefreshTimelockRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{10}
}

func (x *FinalizeRefreshTimelockRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FinalizeExtendLeafRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *TreeNode              `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeExtendLeafRequest) Reset() {
	*x = FinalizeExtendLeafRequest{}
	mi := &file_spark_internal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeExtendLeafRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeExtendLeafRequest) ProtoMessage() {}

func (x *FinalizeExtendLeafRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeExtendLeafRequest.ProtoReflect.Descriptor instead.
func (*FinalizeExtendLeafRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{11}
}

func (x *FinalizeExtendLeafRequest) GetNode() *TreeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type FinalizeRenewRefundTimelockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *TreeNode              `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeRenewRefundTimelockRequest) Reset() {
	*x = FinalizeRenewRefundTimelockRequest{}
	mi := &file_spark_internal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeRenewRefundTimelockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRenewRefundTimelockRequest) ProtoMessage() {}

func (x *FinalizeRenewRefundTimelockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRenewRefundTimelockRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRenewRefundTimelockRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{12}
}

func (x *FinalizeRenewRefundTimelockRequest) GetNode() *TreeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type FinalizeRenewNodeTimelockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SplitNode     *TreeNode              `protobuf:"bytes,1,opt,name=split_node,json=splitNode,proto3" json:"split_node,omitempty"`
	Node          *TreeNode              `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeRenewNodeTimelockRequest) Reset() {
	*x = FinalizeRenewNodeTimelockRequest{}
	mi := &file_spark_internal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeRenewNodeTimelockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRenewNodeTimelockRequest) ProtoMessage() {}

func (x *FinalizeRenewNodeTimelockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRenewNodeTimelockRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRenewNodeTimelockRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{13}
}

func (x *FinalizeRenewNodeTimelockRequest) GetSplitNode() *TreeNode {
	if x != nil {
		return x.SplitNode
	}
	return nil
}

func (x *FinalizeRenewNodeTimelockRequest) GetNode() *TreeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type TreeNode struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                  uint64                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	VerifyingPubkey        []byte                 `protobuf:"bytes,3,opt,name=verifying_pubkey,json=verifyingPubkey,proto3" json:"verifying_pubkey,omitempty"`
	OwnerIdentityPubkey    []byte                 `protobuf:"bytes,4,opt,name=owner_identity_pubkey,json=ownerIdentityPubkey,proto3" json:"owner_identity_pubkey,omitempty"`
	OwnerSigningPubkey     []byte                 `protobuf:"bytes,5,opt,name=owner_signing_pubkey,json=ownerSigningPubkey,proto3" json:"owner_signing_pubkey,omitempty"`
	RawTx                  []byte                 `protobuf:"bytes,6,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	RawRefundTx            []byte                 `protobuf:"bytes,7,opt,name=raw_refund_tx,json=rawRefundTx,proto3" json:"raw_refund_tx,omitempty"`
	TreeId                 string                 `protobuf:"bytes,8,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	ParentNodeId           *string                `protobuf:"bytes,9,opt,name=parent_node_id,json=parentNodeId,proto3,oneof" json:"parent_node_id,omitempty"`
	SigningKeyshareId      string                 `protobuf:"bytes,10,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	Vout                   uint32                 `protobuf:"varint,11,opt,name=vout,proto3" json:"vout,omitempty"`
	RefundTimelock         uint32                 `protobuf:"varint,12,opt,name=refund_timelock,json=refundTimelock,proto3" json:"refund_timelock,omitempty"`
	DirectTx               []byte                 `protobuf:"bytes,13,opt,name=direct_tx,json=directTx,proto3" json:"direct_tx,omitempty"`
	DirectRefundTx         []byte                 `protobuf:"bytes,14,opt,name=direct_refund_tx,json=directRefundTx,proto3" json:"direct_refund_tx,omitempty"`
	DirectFromCpfpRefundTx []byte                 `protobuf:"bytes,15,opt,name=direct_from_cpfp_refund_tx,json=directFromCpfpRefundTx,proto3" json:"direct_from_cpfp_refund_tx,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	mi := &file_spark_internal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{14}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TreeNode) GetVerifyingPubkey() []byte {
	if x != nil {
		return x.VerifyingPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerIdentityPubkey() []byte {
	if x != nil {
		return x.OwnerIdentityPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerSigningPubkey() []byte {
	if x != nil {
		return x.OwnerSigningPubkey
	}
	return nil
}

func (x *TreeNode) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *TreeNode) GetRawRefundTx() []byte {
	if x != nil {
		return x.RawRefundTx
	}
	return nil
}

func (x *TreeNode) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *TreeNode) GetParentNodeId() string {
	if x != nil && x.ParentNodeId != nil {
		return *x.ParentNodeId
	}
	return ""
}

func (x *TreeNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *TreeNode) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *TreeNode) GetRefundTimelock() uint32 {
	if x != nil {
		return x.RefundTimelock
	}
	return 0
}

func (x *TreeNode) GetDirectTx() []byte {
	if x != nil {
		return x.DirectTx
	}
	return nil
}

func (x *TreeNode) GetDirectRefundTx() []byte {
	if x != nil {
		return x.DirectRefundTx
	}
	return nil
}

func (x *TreeNode) GetDirectFromCpfpRefundTx() []byte {
	if x != nil {
		return x.DirectFromCpfpRefundTx
	}
	return nil
}

type InitiatePreimageSwapRequest struct {
	state                          protoimpl.MessageState             `protogen:"open.v1"`
	Request                        *spark.InitiatePreimageSwapRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	CpfpRefundSignatures           map[string][]byte                  `protobuf:"bytes,2,rep,name=cpfp_refund_signatures,json=cpfpRefundSignatures,proto3" json:"cpfp_refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DirectRefundSignatures         map[string][]byte                  `protobuf:"bytes,3,rep,name=direct_refund_signatures,json=directRefundSignatures,proto3" json:"direct_refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DirectFromCpfpRefundSignatures map[string][]byte                  `protobuf:"bytes,4,rep,name=direct_from_cpfp_refund_signatures,json=directFromCpfpRefundSignatures,proto3" json:"direct_from_cpfp_refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *InitiatePreimageSwapRequest) Reset() {
	*x = InitiatePreimageSwapRequest{}
	mi := &file_spark_internal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiatePreimageSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatePreimageSwapRequest) ProtoMessage() {}

func (x *InitiatePreimageSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatePreimageSwapRequest.ProtoReflect.Descriptor instead.
func (*InitiatePreimageSwapRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{15}
}

func (x *InitiatePreimageSwapRequest) GetRequest() *spark.InitiatePreimageSwapRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *InitiatePreimageSwapRequest) GetCpfpRefundSignatures() map[string][]byte {
	if x != nil {
		return x.CpfpRefundSignatures
	}
	return nil
}

func (x *InitiatePreimageSwapRequest) GetDirectRefundSignatures() map[string][]byte {
	if x != nil {
		return x.DirectRefundSignatures
	}
	return nil
}

func (x *InitiatePreimageSwapRequest) GetDirectFromCpfpRefundSignatures() map[string][]byte {
	if x != nil {
		return x.DirectFromCpfpRefundSignatures
	}
	return nil
}

type InitiatePreimageSwapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PreimageShare []byte                 `protobuf:"bytes,1,opt,name=preimage_share,json=preimageShare,proto3" json:"preimage_share,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiatePreimageSwapResponse) Reset() {
	*x = InitiatePreimageSwapResponse{}
	mi := &file_spark_internal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiatePreimageSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatePreimageSwapResponse) ProtoMessage() {}

func (x *InitiatePreimageSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatePreimageSwapResponse.ProtoReflect.Descriptor instead.
func (*InitiatePreimageSwapResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{16}
}

func (x *InitiatePreimageSwapResponse) GetPreimageShare() []byte {
	if x != nil {
		return x.PreimageShare
	}
	return nil
}

type PrepareTreeAddressNode struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	SigningKeyshareId string                    `protobuf:"bytes,1,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	UserPublicKey     []byte                    `protobuf:"bytes,2,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	Children          []*PrepareTreeAddressNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PrepareTreeAddressNode) Reset() {
	*x = PrepareTreeAddressNode{}
	mi := &file_spark_internal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressNode) ProtoMessage() {}

func (x *PrepareTreeAddressNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressNode.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{17}
}

func (x *PrepareTreeAddressNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressNode) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *PrepareTreeAddressNode) GetChildren() []*PrepareTreeAddressNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type PrepareTreeAddressRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	TargetKeyshareId string                  `protobuf:"bytes,1,opt,name=target_keyshare_id,json=targetKeyshareId,proto3" json:"target_keyshare_id,omitempty"`
	Node             *PrepareTreeAddressNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// TODO: This should be removed once we have a proper auth process.
	UserIdentityPublicKey []byte        `protobuf:"bytes,3,opt,name=user_identity_public_key,json=userIdentityPublicKey,proto3" json:"user_identity_public_key,omitempty"`
	Network               spark.Network `protobuf:"varint,4,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PrepareTreeAddressRequest) Reset() {
	*x = PrepareTreeAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressRequest) ProtoMessage() {}

func (x *PrepareTreeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressRequest.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareTreeAddressRequest) GetTargetKeyshareId() string {
	if x != nil {
		return x.TargetKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressRequest) GetNode() *PrepareTreeAddressNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PrepareTreeAddressRequest) GetUserIdentityPublicKey() []byte {
	if x != nil {
		return x.UserIdentityPublicKey
	}
	return nil
}

func (x *PrepareTreeAddressRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type PrepareTreeAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signatures    map[string][]byte      `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareTreeAddressResponse) Reset() {
	*x = PrepareTreeAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressResponse) ProtoMessage() {}

func (x *PrepareTreeAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressResponse.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{19}
}

func (x *PrepareTreeAddressResponse) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type InitiateTransferLeaf struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LeafId                 string                 `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	RawRefundTx            []byte                 `protobuf:"bytes,2,opt,name=raw_refund_tx,json=rawRefundTx,proto3" json:"raw_refund_tx,omitempty"`
	DirectRefundTx         []byte                 `protobuf:"bytes,3,opt,name=direct_refund_tx,json=directRefundTx,proto3" json:"direct_refund_tx,omitempty"`
	DirectFromCpfpRefundTx []byte                 `protobuf:"bytes,4,opt,name=direct_from_cpfp_refund_tx,json=directFromCpfpRefundTx,proto3" json:"direct_from_cpfp_refund_tx,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InitiateTransferLeaf) Reset() {
	*x = InitiateTransferLeaf{}
	mi := &file_spark_internal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateTransferLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateTransferLeaf) ProtoMessage() {}

func (x *InitiateTransferLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateTransferLeaf.ProtoReflect.Descriptor instead.
func (*InitiateTransferLeaf) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{20}
}

func (x *InitiateTransferLeaf) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *InitiateTransferLeaf) GetRawRefundTx() []byte {
	if x != nil {
		return x.RawRefundTx
	}
	return nil
}

func (x *InitiateTransferLeaf) GetDirectRefundTx() []byte {
	if x != nil {
		return x.DirectRefundTx
	}
	return nil
}

func (x *InitiateTransferLeaf) GetDirectFromCpfpRefundTx() []byte {
	if x != nil {
		return x.DirectFromCpfpRefundTx
	}
	return nil
}

type InitiateTransferRequest struct {
	state                     protoimpl.MessageState        `protogen:"open.v1"`
	TransferId                string                        `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SenderIdentityPublicKey   []byte                        `protobuf:"bytes,2,opt,name=sender_identity_public_key,json=senderIdentityPublicKey,proto3" json:"sender_identity_public_key,omitempty"`
	ReceiverIdentityPublicKey []byte                        `protobuf:"bytes,3,opt,name=receiver_identity_public_key,json=receiverIdentityPublicKey,proto3" json:"receiver_identity_public_key,omitempty"`
	ExpiryTime                *timestamppb.Timestamp        `protobuf:"bytes,4,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Leaves                    []*InitiateTransferLeaf       `protobuf:"bytes,5,rep,name=leaves,proto3" json:"leaves,omitempty"`
	SenderKeyTweakProofs      map[string]*spark.SecretProof `protobuf:"bytes,6,rep,name=sender_key_tweak_proofs,json=senderKeyTweakProofs,proto3" json:"sender_key_tweak_proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type                      spark.TransferType            `protobuf:"varint,7,opt,name=type,proto3,enum=spark.TransferType" json:"type,omitempty"`
	TransferPackage           *spark.TransferPackage        `protobuf:"bytes,8,opt,name=transfer_package,json=transferPackage,proto3" json:"transfer_package,omitempty"`
	// The finalized signatures for the cpfp refund transactions.
	RefundSignatures map[string][]byte `protobuf:"bytes,9,rep,name=refund_signatures,json=refundSignatures,proto3" json:"refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The finalized signatures for the direct refund transactions.
	DirectRefundSignatures map[string][]byte `protobuf:"bytes,10,rep,name=direct_refund_signatures,json=directRefundSignatures,proto3" json:"direct_refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The finalized signatures for the direct from cpfp refund transactions.
	DirectFromCpfpRefundSignatures map[string][]byte `protobuf:"bytes,11,rep,name=direct_from_cpfp_refund_signatures,json=directFromCpfpRefundSignatures,proto3" json:"direct_from_cpfp_refund_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The invoice this transfer pays.
	SparkInvoice  string `protobuf:"bytes,12,opt,name=spark_invoice,json=sparkInvoice,proto3" json:"spark_invoice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateTransferRequest) Reset() {
	*x = InitiateTransferRequest{}
	mi := &file_spark_internal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateTransferRequest) ProtoMessage() {}

func (x *InitiateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateTransferRequest.ProtoReflect.Descriptor instead.
func (*InitiateTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{21}
}

func (x *InitiateTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *InitiateTransferRequest) GetSenderIdentityPublicKey() []byte {
	if x != nil {
		return x.SenderIdentityPublicKey
	}
	return nil
}

func (x *InitiateTransferRequest) GetReceiverIdentityPublicKey() []byte {
	if x != nil {
		return x.ReceiverIdentityPublicKey
	}
	return nil
}

func (x *InitiateTransferRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *InitiateTransferRequest) GetLeaves() []*InitiateTransferLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

func (x *InitiateTransferRequest) GetSenderKeyTweakProofs() map[string]*spark.SecretProof {
	if x != nil {
		return x.SenderKeyTweakProofs
	}
	return nil
}

func (x *InitiateTransferRequest) GetType() spark.TransferType {
	if x != nil {
		return x.Type
	}
	return spark.TransferType(0)
}

func (x *InitiateTransferRequest) GetTransferPackage() *spark.TransferPackage {
	if x != nil {
		return x.TransferPackage
	}
	return nil
}

func (x *InitiateTransferRequest) GetRefundSignatures() map[string][]byte {
	if x != nil {
		return x.RefundSignatures
	}
	return nil
}

func (x *InitiateTransferRequest) GetDirectRefundSignatures() map[string][]byte {
	if x != nil {
		return x.DirectRefundSignatures
	}
	return nil
}

func (x *InitiateTransferRequest) GetDirectFromCpfpRefundSignatures() map[string][]byte {
	if x != nil {
		return x.DirectFromCpfpRefundSignatures
	}
	return nil
}

func (x *InitiateTransferRequest) GetSparkInvoice() string {
	if x != nil {
		return x.SparkInvoice
	}
	return ""
}

type DeliverSenderKeyTweakRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TransferId              string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SenderIdentityPublicKey []byte                 `protobuf:"bytes,2,opt,name=sender_identity_public_key,json=senderIdentityPublicKey,proto3" json:"sender_identity_public_key,omitempty"`
	TransferPackage         *spark.TransferPackage `protobuf:"bytes,3,opt,name=transfer_package,json=transferPackage,proto3" json:"transfer_package,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeliverSenderKeyTweakRequest) Reset() {
	*x = DeliverSenderKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliverSenderKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverSenderKeyTweakRequest) ProtoMessage() {}

func (x *DeliverSenderKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverSenderKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*DeliverSenderKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{22}
}

func (x *DeliverSenderKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *DeliverSenderKeyTweakRequest) GetSenderIdentityPublicKey() []byte {
	if x != nil {
		return x.SenderIdentityPublicKey
	}
	return nil
}

func (x *DeliverSenderKeyTweakRequest) GetTransferPackage() *spark.TransferPackage {
	if x != nil {
		return x.TransferPackage
	}
	return nil
}

type InitiateCooperativeExitRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Transfer      *InitiateTransferRequest `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	ExitId        string                   `protobuf:"bytes,2,opt,name=exit_id,json=exitId,proto3" json:"exit_id,omitempty"`
	ExitTxid      []byte                   `protobuf:"bytes,3,opt,name=exit_txid,json=exitTxid,proto3" json:"exit_txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateCooperativeExitRequest) Reset() {
	*x = InitiateCooperativeExitRequest{}
	mi := &file_spark_internal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateCooperativeExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateCooperativeExitRequest) ProtoMessage() {}

func (x *InitiateCooperativeExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateCooperativeExitRequest.ProtoReflect.Descriptor instead.
func (*InitiateCooperativeExitRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{23}
}

func (x *InitiateCooperativeExitRequest) GetTransfer() *InitiateTransferRequest {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *InitiateCooperativeExitRequest) GetExitId() string {
	if x != nil {
		return x.ExitId
	}
	return ""
}

func (x *InitiateCooperativeExitRequest) GetExitTxid() []byte {
	if x != nil {
		return x.ExitTxid
	}
	return nil
}

type UpdatePreimageRequestRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PreimageRequestId string                 `protobuf:"bytes,1,opt,name=preimage_request_id,json=preimageRequestId,proto3" json:"preimage_request_id,omitempty"`
	Preimage          []byte                 `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	IdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=identity_public_key,json=identityPublicKey,proto3" json:"identity_public_key,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdatePreimageRequestRequest) Reset() {
	*x = UpdatePreimageRequestRequest{}
	mi := &file_spark_internal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePreimageRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreimageRequestRequest) ProtoMessage() {}

func (x *UpdatePreimageRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreimageRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdatePreimageRequestRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{24}
}

func (x *UpdatePreimageRequestRequest) GetPreimageRequestId() string {
	if x != nil {
		return x.PreimageRequestId
	}
	return ""
}

func (x *UpdatePreimageRequestRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *UpdatePreimageRequestRequest) GetIdentityPublicKey() []byte {
	if x != nil {
		return x.IdentityPublicKey
	}
	return nil
}

type StartTokenTransactionInternalRequest struct {
	state                      protoimpl.MessageState            `protogen:"open.v1"`
	FinalTokenTransaction      *spark.TokenTransaction           `protobuf:"bytes,1,opt,name=final_token_transaction,json=finalTokenTransaction,proto3" json:"final_token_transaction,omitempty"`
	TokenTransactionSignatures *spark.TokenTransactionSignatures `protobuf:"bytes,2,opt,name=token_transaction_signatures,json=tokenTransactionSignatures,proto3" json:"token_transaction_signatures,omitempty"`
	KeyshareIds                []string                          `protobuf:"bytes,3,rep,name=keyshare_ids,json=keyshareIds,proto3" json:"keyshare_ids,omitempty"`
	CoordinatorPublicKey       []byte                            `protobuf:"bytes,10,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *StartTokenTransactionInternalRequest) Reset() {
	*x = StartTokenTransactionInternalRequest{}
	mi := &file_spark_internal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTokenTransactionInternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTokenTransactionInternalRequest) ProtoMessage() {}

func (x *StartTokenTransactionInternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTokenTransactionInternalRequest.ProtoReflect.Descriptor instead.
func (*StartTokenTransactionInternalRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{25}
}

func (x *StartTokenTransactionInternalRequest) GetFinalTokenTransaction() *spark.TokenTransaction {
	if x != nil {
		return x.FinalTokenTransaction
	}
	return nil
}

func (x *StartTokenTransactionInternalRequest) GetTokenTransactionSignatures() *spark.TokenTransactionSignatures {
	if x != nil {
		return x.TokenTransactionSignatures
	}
	return nil
}

func (x *StartTokenTransactionInternalRequest) GetKeyshareIds() []string {
	if x != nil {
		return x.KeyshareIds
	}
	return nil
}

func (x *StartTokenTransactionInternalRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type StartTokenTransactionInternalResponse struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	FinalTokenTransaction *spark.TokenTransaction `protobuf:"bytes,1,opt,name=final_token_transaction,json=finalTokenTransaction,proto3" json:"final_token_transaction,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StartTokenTransactionInternalResponse) Reset() {
	*x = StartTokenTransactionInternalResponse{}
	mi := &file_spark_internal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTokenTransactionInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTokenTransactionInternalResponse) ProtoMessage() {}

func (x *StartTokenTransactionInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTokenTransactionInternalResponse.ProtoReflect.Descriptor instead.
func (*StartTokenTransactionInternalResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{26}
}

func (x *StartTokenTransactionInternalResponse) GetFinalTokenTransaction() *spark.TokenTransaction {
	if x != nil {
		return x.FinalTokenTransaction
	}
	return nil
}

type InitiateSettleReceiverKeyTweakRequest struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	TransferId     string                        `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	KeyTweakProofs map[string]*spark.SecretProof `protobuf:"bytes,2,rep,name=key_tweak_proofs,json=keyTweakProofs,proto3" json:"key_tweak_proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserPublicKeys map[string][]byte             `protobuf:"bytes,3,rep,name=user_public_keys,json=userPublicKeys,proto3" json:"user_public_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InitiateSettleReceiverKeyTweakRequest) Reset() {
	*x = InitiateSettleReceiverKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateSettleReceiverKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSettleReceiverKeyTweakRequest) ProtoMessage() {}

func (x *InitiateSettleReceiverKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSettleReceiverKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*InitiateSettleReceiverKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{27}
}

func (x *InitiateSettleReceiverKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *InitiateSettleReceiverKeyTweakRequest) GetKeyTweakProofs() map[string]*spark.SecretProof {
	if x != nil {
		return x.KeyTweakProofs
	}
	return nil
}

func (x *InitiateSettleReceiverKeyTweakRequest) GetUserPublicKeys() map[string][]byte {
	if x != nil {
		return x.UserPublicKeys
	}
	return nil
}

type SettleReceiverKeyTweakRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Action        SettleKeyTweakAction   `protobuf:"varint,3,opt,name=action,proto3,enum=spark_internal.SettleKeyTweakAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettleReceiverKeyTweakRequest) Reset() {
	*x = SettleReceiverKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettleReceiverKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleReceiverKeyTweakRequest) ProtoMessage() {}

func (x *SettleReceiverKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleReceiverKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*SettleReceiverKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{28}
}

func (x *SettleReceiverKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *SettleReceiverKeyTweakRequest) GetAction() SettleKeyTweakAction {
	if x != nil {
		return x.Action
	}
	return SettleKeyTweakAction_NONE
}

type SettleSenderKeyTweakRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Action        SettleKeyTweakAction   `protobuf:"varint,2,opt,name=action,proto3,enum=spark_internal.SettleKeyTweakAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettleSenderKeyTweakRequest) Reset() {
	*x = SettleSenderKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettleSenderKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleSenderKeyTweakRequest) ProtoMessage() {}

func (x *SettleSenderKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleSenderKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*SettleSenderKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{29}
}

func (x *SettleSenderKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *SettleSenderKeyTweakRequest) GetAction() SettleKeyTweakAction {
	if x != nil {
		return x.Action
	}
	return SettleKeyTweakAction_NONE
}

type CreateUtxoSwapRequest struct {
	state                protoimpl.MessageState         `protogen:"open.v1"`
	Request              *spark.InitiateUtxoSwapRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Signature            []byte                         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CoordinatorPublicKey []byte                         `protobuf:"bytes,3,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateUtxoSwapRequest) Reset() {
	*x = CreateUtxoSwapRequest{}
	mi := &file_spark_internal_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUtxoSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUtxoSwapRequest) ProtoMessage() {}

func (x *CreateUtxoSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUtxoSwapRequest.ProtoReflect.Descriptor instead.
func (*CreateUtxoSwapRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{30}
}

func (x *CreateUtxoSwapRequest) GetRequest() *spark.InitiateUtxoSwapRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CreateUtxoSwapRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CreateUtxoSwapRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type CreateUtxoSwapResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UtxoDepositAddress string                 `protobuf:"bytes,1,opt,name=UtxoDepositAddress,proto3" json:"UtxoDepositAddress,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateUtxoSwapResponse) Reset() {
	*x = CreateUtxoSwapResponse{}
	mi := &file_spark_internal_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUtxoSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUtxoSwapResponse) ProtoMessage() {}

func (x *CreateUtxoSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUtxoSwapResponse.ProtoReflect.Descriptor instead.
func (*CreateUtxoSwapResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{31}
}

func (x *CreateUtxoSwapResponse) GetUtxoDepositAddress() string {
	if x != nil {
		return x.UtxoDepositAddress
	}
	return ""
}

type InitiateStaticDepositUtxoSwapRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	OnChainUtxo *spark.UTXO            `protobuf:"bytes,1,opt,name=on_chain_utxo,json=onChainUtxo,proto3" json:"on_chain_utxo,omitempty"`
	// SSP signature of a message consenting to transfer a specific amount of funds
	// in exchange for a specific UTXO.
	SspSignature []byte `protobuf:"bytes,2,opt,name=ssp_signature,json=sspSignature,proto3" json:"ssp_signature,omitempty"`
	// User signature of a message consenting to exchange a specific UTXO for a fund
	// transfer from a specific SSP.
	UserSignature []byte `protobuf:"bytes,3,opt,name=user_signature,json=userSignature,proto3" json:"user_signature,omitempty"`
	// Transfer package to send from SSP to User.
	Transfer *spark.StartTransferRequest `protobuf:"bytes,4,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// Transaction constructed by the SSP spending the UTXO to an address it owns.
	SpendTxSigningJob *spark.SigningJob `protobuf:"bytes,5,opt,name=spend_tx_signing_job,json=spendTxSigningJob,proto3" json:"spend_tx_signing_job,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InitiateStaticDepositUtxoSwapRequest) Reset() {
	*x = InitiateStaticDepositUtxoSwapRequest{}
	mi := &file_spark_internal_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateStaticDepositUtxoSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateStaticDepositUtxoSwapRequest) ProtoMessage() {}

func (x *InitiateStaticDepositUtxoSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateStaticDepositUtxoSwapRequest.ProtoReflect.Descriptor instead.
func (*InitiateStaticDepositUtxoSwapRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{32}
}

func (x *InitiateStaticDepositUtxoSwapRequest) GetOnChainUtxo() *spark.UTXO {
	if x != nil {
		return x.OnChainUtxo
	}
	return nil
}

func (x *InitiateStaticDepositUtxoSwapRequest) GetSspSignature() []byte {
	if x != nil {
		return x.SspSignature
	}
	return nil
}

func (x *InitiateStaticDepositUtxoSwapRequest) GetUserSignature() []byte {
	if x != nil {
		return x.UserSignature
	}
	return nil
}

func (x *InitiateStaticDepositUtxoSwapRequest) GetTransfer() *spark.StartTransferRequest {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *InitiateStaticDepositUtxoSwapRequest) GetSpendTxSigningJob() *spark.SigningJob {
	if x != nil {
		return x.SpendTxSigningJob
	}
	return nil
}

type CreateStaticDepositUtxoSwapRequest struct {
	state                protoimpl.MessageState                `protogen:"open.v1"`
	Request              *InitiateStaticDepositUtxoSwapRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Signature            []byte                                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CoordinatorPublicKey []byte                                `protobuf:"bytes,3,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateStaticDepositUtxoSwapRequest) Reset() {
	*x = CreateStaticDepositUtxoSwapRequest{}
	mi := &file_spark_internal_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticDepositUtxoSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticDepositUtxoSwapRequest) ProtoMessage() {}

func (x *CreateStaticDepositUtxoSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticDepositUtxoSwapRequest.ProtoReflect.Descriptor instead.
func (*CreateStaticDepositUtxoSwapRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{33}
}

func (x *CreateStaticDepositUtxoSwapRequest) GetRequest() *InitiateStaticDepositUtxoSwapRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CreateStaticDepositUtxoSwapRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CreateStaticDepositUtxoSwapRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type CreateStaticDepositUtxoSwapResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UtxoDepositAddress string                 `protobuf:"bytes,1,opt,name=UtxoDepositAddress,proto3" json:"UtxoDepositAddress,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateStaticDepositUtxoSwapResponse) Reset() {
	*x = CreateStaticDepositUtxoSwapResponse{}
	mi := &file_spark_internal_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticDepositUtxoSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticDepositUtxoSwapResponse) ProtoMessage() {}

func (x *CreateStaticDepositUtxoSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticDepositUtxoSwapResponse.ProtoReflect.Descriptor instead.
func (*CreateStaticDepositUtxoSwapResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{34}
}

func (x *CreateStaticDepositUtxoSwapResponse) GetUtxoDepositAddress() string {
	if x != nil {
		return x.UtxoDepositAddress
	}
	return ""
}

type CreateStaticDepositUtxoRefundRequest struct {
	state                protoimpl.MessageState                        `protogen:"open.v1"`
	Request              *spark.InitiateStaticDepositUtxoRefundRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Signature            []byte                                        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CoordinatorPublicKey []byte                                        `protobuf:"bytes,3,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateStaticDepositUtxoRefundRequest) Reset() {
	*x = CreateStaticDepositUtxoRefundRequest{}
	mi := &file_spark_internal_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticDepositUtxoRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticDepositUtxoRefundRequest) ProtoMessage() {}

func (x *CreateStaticDepositUtxoRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticDepositUtxoRefundRequest.ProtoReflect.Descriptor instead.
func (*CreateStaticDepositUtxoRefundRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{35}
}

func (x *CreateStaticDepositUtxoRefundRequest) GetRequest() *spark.InitiateStaticDepositUtxoRefundRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CreateStaticDepositUtxoRefundRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CreateStaticDepositUtxoRefundRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type CreateStaticDepositUtxoRefundResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UtxoDepositAddress string                 `protobuf:"bytes,1,opt,name=UtxoDepositAddress,proto3" json:"UtxoDepositAddress,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateStaticDepositUtxoRefundResponse) Reset() {
	*x = CreateStaticDepositUtxoRefundResponse{}
	mi := &file_spark_internal_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStaticDepositUtxoRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticDepositUtxoRefundResponse) ProtoMessage() {}

func (x *CreateStaticDepositUtxoRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticDepositUtxoRefundResponse.ProtoReflect.Descriptor instead.
func (*CreateStaticDepositUtxoRefundResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{36}
}

func (x *CreateStaticDepositUtxoRefundResponse) GetUtxoDepositAddress() string {
	if x != nil {
		return x.UtxoDepositAddress
	}
	return ""
}

type RollbackUtxoSwapRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OnChainUtxo          *spark.UTXO            `protobuf:"bytes,1,opt,name=on_chain_utxo,json=onChainUtxo,proto3" json:"on_chain_utxo,omitempty"`
	Signature            []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CoordinatorPublicKey []byte                 `protobuf:"bytes,3,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RollbackUtxoSwapRequest) Reset() {
	*x = RollbackUtxoSwapRequest{}
	mi := &file_spark_internal_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackUtxoSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackUtxoSwapRequest) ProtoMessage() {}

func (x *RollbackUtxoSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackUtxoSwapRequest.ProtoReflect.Descriptor instead.
func (*RollbackUtxoSwapRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{37}
}

func (x *RollbackUtxoSwapRequest) GetOnChainUtxo() *spark.UTXO {
	if x != nil {
		return x.OnChainUtxo
	}
	return nil
}

func (x *RollbackUtxoSwapRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RollbackUtxoSwapRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type RollbackUtxoSwapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackUtxoSwapResponse) Reset() {
	*x = RollbackUtxoSwapResponse{}
	mi := &file_spark_internal_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackUtxoSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackUtxoSwapResponse) ProtoMessage() {}

func (x *RollbackUtxoSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackUtxoSwapResponse.ProtoReflect.Descriptor instead.
func (*RollbackUtxoSwapResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{38}
}

type UtxoSwapCompletedRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OnChainUtxo          *spark.UTXO            `protobuf:"bytes,1,opt,name=on_chain_utxo,json=onChainUtxo,proto3" json:"on_chain_utxo,omitempty"`
	Signature            []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CoordinatorPublicKey []byte                 `protobuf:"bytes,3,opt,name=coordinator_public_key,json=coordinatorPublicKey,proto3" json:"coordinator_public_key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UtxoSwapCompletedRequest) Reset() {
	*x = UtxoSwapCompletedRequest{}
	mi := &file_spark_internal_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtxoSwapCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoSwapCompletedRequest) ProtoMessage() {}

func (x *UtxoSwapCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoSwapCompletedRequest.ProtoReflect.Descriptor instead.
func (*UtxoSwapCompletedRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{39}
}

func (x *UtxoSwapCompletedRequest) GetOnChainUtxo() *spark.UTXO {
	if x != nil {
		return x.OnChainUtxo
	}
	return nil
}

func (x *UtxoSwapCompletedRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *UtxoSwapCompletedRequest) GetCoordinatorPublicKey() []byte {
	if x != nil {
		return x.CoordinatorPublicKey
	}
	return nil
}

type UtxoSwapCompletedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UtxoSwapCompletedResponse) Reset() {
	*x = UtxoSwapCompletedResponse{}
	mi := &file_spark_internal_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtxoSwapCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoSwapCompletedResponse) ProtoMessage() {}

func (x *UtxoSwapCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoSwapCompletedResponse.ProtoReflect.Descriptor instead.
func (*UtxoSwapCompletedResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{40}
}

type CancelOrFinalizeExpiredTokenTransactionRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	FinalTokenTransaction *spark.TokenTransaction `protobuf:"bytes,1,opt,name=final_token_transaction,json=finalTokenTransaction,proto3" json:"final_token_transaction,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CancelOrFinalizeExpiredTokenTransactionRequest) Reset() {
	*x = CancelOrFinalizeExpiredTokenTransactionRequest{}
	mi := &file_spark_internal_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrFinalizeExpiredTokenTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrFinalizeExpiredTokenTransactionRequest) ProtoMessage() {}

func (x *CancelOrFinalizeExpiredTokenTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrFinalizeExpiredTokenTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelOrFinalizeExpiredTokenTransactionRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{41}
}

func (x *CancelOrFinalizeExpiredTokenTransactionRequest) GetFinalTokenTransaction() *spark.TokenTransaction {
	if x != nil {
		return x.FinalTokenTransaction
	}
	return nil
}

type QueryLeafSigningPubkeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeafIds       []string               `protobuf:"bytes,1,rep,name=leaf_ids,json=leafIds,proto3" json:"leaf_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryLeafSigningPubkeysRequest) Reset() {
	*x = QueryLeafSigningPubkeysRequest{}
	mi := &file_spark_internal_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryLeafSigningPubkeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLeafSigningPubkeysRequest) ProtoMessage() {}

func (x *QueryLeafSigningPubkeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLeafSigningPubkeysRequest.ProtoReflect.Descriptor instead.
func (*QueryLeafSigningPubkeysRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{42}
}

func (x *QueryLeafSigningPubkeysRequest) GetLeafIds() []string {
	if x != nil {
		return x.LeafIds
	}
	return nil
}

type QueryLeafSigningPubkeysResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SigningPubkeys map[string][]byte      `protobuf:"bytes,1,rep,name=signing_pubkeys,json=signingPubkeys,proto3" json:"signing_pubkeys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryLeafSigningPubkeysResponse) Reset() {
	*x = QueryLeafSigningPubkeysResponse{}
	mi := &file_spark_internal_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryLeafSigningPubkeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLeafSigningPubkeysResponse) ProtoMessage() {}

func (x *QueryLeafSigningPubkeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLeafSigningPubkeysResponse.ProtoReflect.Descriptor instead.
func (*QueryLeafSigningPubkeysResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{43}
}

func (x *QueryLeafSigningPubkeysResponse) GetSigningPubkeys() map[string][]byte {
	if x != nil {
		return x.SigningPubkeys
	}
	return nil
}

type ResolveLeafInvestigationRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LostLeafIds      []string               `protobuf:"bytes,1,rep,name=lost_leaf_ids,json=lostLeafIds,proto3" json:"lost_leaf_ids,omitempty"`
	AvailableLeafIds []string               `protobuf:"bytes,2,rep,name=available_leaf_ids,json=availableLeafIds,proto3" json:"available_leaf_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResolveLeafInvestigationRequest) Reset() {
	*x = ResolveLeafInvestigationRequest{}
	mi := &file_spark_internal_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveLeafInvestigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveLeafInvestigationRequest) ProtoMessage() {}

func (x *ResolveLeafInvestigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveLeafInvestigationRequest.ProtoReflect.Descriptor instead.
func (*ResolveLeafInvestigationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{44}
}

func (x *ResolveLeafInvestigationRequest) GetLostLeafIds() []string {
	if x != nil {
		return x.LostLeafIds
	}
	return nil
}

func (x *ResolveLeafInvestigationRequest) GetAvailableLeafIds() []string {
	if x != nil {
		return x.AvailableLeafIds
	}
	return nil
}

type ProvidePreimageRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PaymentHash       []byte                 `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Preimage          []byte                 `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	IdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=identity_public_key,json=identityPublicKey,proto3" json:"identity_public_key,omitempty"`
	// The key tweak proofs for the leaves, to validate that each SO holds the correct key tweak.
	KeyTweakProofs map[string]*spark.SecretProof `protobuf:"bytes,4,rep,name=key_tweak_proofs,json=keyTweakProofs,proto3" json:"key_tweak_proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProvidePreimageRequest) Reset() {
	*x = ProvidePreimageRequest{}
	mi := &file_spark_internal_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvidePreimageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvidePreimageRequest) ProtoMessage() {}

func (x *ProvidePreimageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvidePreimageRequest.ProtoReflect.Descriptor instead.
func (*ProvidePreimageRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{45}
}

func (x *ProvidePreimageRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ProvidePreimageRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *ProvidePreimageRequest) GetIdentityPublicKey() []byte {
	if x != nil {
		return x.IdentityPublicKey
	}
	return nil
}

func (x *ProvidePreimageRequest) GetKeyTweakProofs() map[string]*spark.SecretProof {
	if x != nil {
		return x.KeyTweakProofs
	}
	return nil
}

type ReserveEntityDkgKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId    string                 `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveEntityDkgKeyRequest) Reset() {
	*x = ReserveEntityDkgKeyRequest{}
	mi := &file_spark_internal_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveEntityDkgKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveEntityDkgKeyRequest) ProtoMessage() {}

func (x *ReserveEntityDkgKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveEntityDkgKeyRequest.ProtoReflect.Descriptor instead.
func (*ReserveEntityDkgKeyRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{46}
}

func (x *ReserveEntityDkgKeyRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

type FixKeyshareRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BadKeyshareId   string                 `protobuf:"bytes,1,opt,name=bad_keyshare_id,json=badKeyshareId,proto3" json:"bad_keyshare_id,omitempty"`
	BadOperatorId   string                 `protobuf:"bytes,2,opt,name=bad_operator_id,json=badOperatorId,proto3" json:"bad_operator_id,omitempty"`
	GoodOperatorIds []string               `protobuf:"bytes,3,rep,name=good_operator_ids,json=goodOperatorIds,proto3" json:"good_operator_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FixKeyshareRequest) Reset() {
	*x = FixKeyshareRequest{}
	mi := &file_spark_internal_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixKeyshareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixKeyshareRequest) ProtoMessage() {}

func (x *FixKeyshareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixKeyshareRequest.ProtoReflect.Descriptor instead.
func (*FixKeyshareRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{47}
}

func (x *FixKeyshareRequest) GetBadKeyshareId() string {
	if x != nil {
		return x.BadKeyshareId
	}
	return ""
}

func (x *FixKeyshareRequest) GetBadOperatorId() string {
	if x != nil {
		return x.BadOperatorId
	}
	return ""
}

func (x *FixKeyshareRequest) GetGoodOperatorIds() []string {
	if x != nil {
		return x.GoodOperatorIds
	}
	return nil
}

type FixKeyshareRound1Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BadKeyshareId   string                 `protobuf:"bytes,1,opt,name=bad_keyshare_id,json=badKeyshareId,proto3" json:"bad_keyshare_id,omitempty"`
	BadOperatorId   string                 `protobuf:"bytes,2,opt,name=bad_operator_id,json=badOperatorId,proto3" json:"bad_operator_id,omitempty"`
	GoodOperatorIds []string               `protobuf:"bytes,3,rep,name=good_operator_ids,json=goodOperatorIds,proto3" json:"good_operator_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FixKeyshareRound1Request) Reset() {
	*x = FixKeyshareRound1Request{}
	mi := &file_spark_internal_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixKeyshareRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixKeyshareRound1Request) ProtoMessage() {}

func (x *FixKeyshareRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixKeyshareRound1Request.ProtoReflect.Descriptor instead.
func (*FixKeyshareRound1Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{48}
}

func (x *FixKeyshareRound1Request) GetBadKeyshareId() string {
	if x != nil {
		return x.BadKeyshareId
	}
	return ""
}

func (x *FixKeyshareRound1Request) GetBadOperatorId() string {
	if x != nil {
		return x.BadOperatorId
	}
	return ""
}

func (x *FixKeyshareRound1Request) GetGoodOperatorIds() []string {
	if x != nil {
		return x.GoodOperatorIds
	}
	return nil
}

type FixKeyshareRound1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       [][]byte               `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixKeyshareRound1Response) Reset() {
	*x = FixKeyshareRound1Response{}
	mi := &file_spark_internal_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixKeyshareRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixKeyshareRound1Response) ProtoMessage() {}

func (x *FixKeyshareRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixKeyshareRound1Response.ProtoReflect.Descriptor instead.
func (*FixKeyshareRound1Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{49}
}

func (x *FixKeyshareRound1Response) GetMessage() [][]byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type FixKeyshareRound2Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BadKeyshareId   string                 `protobuf:"bytes,1,opt,name=bad_keyshare_id,json=badKeyshareId,proto3" json:"bad_keyshare_id,omitempty"`
	BadOperatorId   string                 `protobuf:"bytes,2,opt,name=bad_operator_id,json=badOperatorId,proto3" json:"bad_operator_id,omitempty"`
	GoodOperatorIds []string               `protobuf:"bytes,3,rep,name=good_operator_ids,json=goodOperatorIds,proto3" json:"good_operator_ids,omitempty"`
	Message         [][]byte               `protobuf:"bytes,4,rep,name=message,proto3" json:"message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FixKeyshareRound2Request) Reset() {
	*x = FixKeyshareRound2Request{}
	mi := &file_spark_internal_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixKeyshareRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixKeyshareRound2Request) ProtoMessage() {}

func (x *FixKeyshareRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixKeyshareRound2Request.ProtoReflect.Descriptor instead.
func (*FixKeyshareRound2Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{50}
}

func (x *FixKeyshareRound2Request) GetBadKeyshareId() string {
	if x != nil {
		return x.BadKeyshareId
	}
	return ""
}

func (x *FixKeyshareRound2Request) GetBadOperatorId() string {
	if x != nil {
		return x.BadOperatorId
	}
	return ""
}

func (x *FixKeyshareRound2Request) GetGoodOperatorIds() []string {
	if x != nil {
		return x.GoodOperatorIds
	}
	return nil
}

func (x *FixKeyshareRound2Request) GetMessage() [][]byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type FixKeyshareRound2Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       []byte                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixKeyshareRound2Response) Reset() {
	*x = FixKeyshareRound2Response{}
	mi := &file_spark_internal_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixKeyshareRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixKeyshareRound2Response) ProtoMessage() {}

func (x *FixKeyshareRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixKeyshareRound2Response.ProtoReflect.Descriptor instead.
func (*FixKeyshareRound2Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{51}
}

func (x *FixKeyshareRound2Response) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetTransfersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferIds   []string               `protobuf:"bytes,1,rep,name=transfer_ids,json=transferIds,proto3" json:"transfer_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransfersRequest) Reset() {
	*x = GetTransfersRequest{}
	mi := &file_spark_internal_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransfersRequest) ProtoMessage() {}

func (x *GetTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransfersRequest.ProtoReflect.Descriptor instead.
func (*GetTransfersRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{52}
}

func (x *GetTransfersRequest) GetTransferIds() []string {
	if x != nil {
		return x.TransferIds
	}
	return nil
}

type GetTransfersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transfers     []*spark.Transfer      `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransfersResponse) Reset() {
	*x = GetTransfersResponse{}
	mi := &file_spark_internal_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransfersResponse) ProtoMessage() {}

func (x *GetTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransfersResponse.ProtoReflect.Descriptor instead.
func (*GetTransfersResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{53}
}

func (x *GetTransfersResponse) GetTransfers() []*spark.Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type GenerateStaticDepositAddressProofsRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId             string                 `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	Address                string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	OwnerIdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GenerateStaticDepositAddressProofsRequest) Reset() {
	*x = GenerateStaticDepositAddressProofsRequest{}
	mi := &file_spark_internal_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStaticDepositAddressProofsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStaticDepositAddressProofsRequest) ProtoMessage() {}

func (x *GenerateStaticDepositAddressProofsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStaticDepositAddressProofsRequest.ProtoReflect.Descriptor instead.
func (*GenerateStaticDepositAddressProofsRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{54}
}

func (x *GenerateStaticDepositAddressProofsRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *GenerateStaticDepositAddressProofsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GenerateStaticDepositAddressProofsRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

type GenerateStaticDepositAddressProofsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AddressSignature []byte                 `protobuf:"bytes,1,opt,name=address_signature,json=addressSignature,proto3" json:"address_signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GenerateStaticDepositAddressProofsResponse) Reset() {
	*x = GenerateStaticDepositAddressProofsResponse{}
	mi := &file_spark_internal_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStaticDepositAddressProofsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStaticDepositAddressProofsResponse) ProtoMessage() {}

func (x *GenerateStaticDepositAddressProofsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStaticDepositAddressProofsResponse.ProtoReflect.Descriptor instead.
func (*GenerateStaticDepositAddressProofsResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{55}
}

func (x *GenerateStaticDepositAddressProofsResponse) GetAddressSignature() []byte {
	if x != nil {
		return x.AddressSignature
	}
	return nil
}

var File_spark_internal_proto protoreflect.FileDescriptor

const file_spark_internal_proto_rawDesc = "" +
	"\n" +
	"\x14spark_internal.proto\x12\x0espark_internal\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\fcommon.proto\x1a\vspark.proto\"=\n" +
	"\x1aMarkKeysharesAsUsedRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x03(\tR\n" +
	"keyshareId\"\x85\x02\n" +
	"$MarkKeyshareForDepositAddressRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x01(\tR\n" +
	"keyshareId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x129\n" +
	"\x19owner_identity_public_key\x18\x03 \x01(\fR\x16ownerIdentityPublicKey\x127\n" +
	"\x18owner_signing_public_key\x18\x04 \x01(\fR\x15ownerSigningPublicKey\x12 \n" +
	"\tis_static\x18\x05 \x01(\bH\x00R\bisStatic\x88\x01\x01B\f\n" +
	"\n" +
	"_is_static\"T\n" +
	"%MarkKeyshareForDepositAddressResponse\x12+\n" +
	"\x11address_signature\x18\x01 \x01(\fR\x10addressSignature\"\x8f\x02\n" +
	"\x12FrostRound1Request\x12!\n" +
	"\fkeyshare_ids\x18\x01 \x03(\tR\vkeyshareIds\x12S\n" +
	"\vpublic_keys\x18\x02 \x03(\v22.spark_internal.FrostRound1Request.PublicKeysEntryR\n" +
	"publicKeys\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\x12,\n" +
	"\x12random_nonce_count\x18\x04 \x01(\rR\x10randomNonceCount\x1a=\n" +
	"\x0fPublicKeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"a\n" +
	"\x13FrostRound1Response\x12J\n" +
	"\x13signing_commitments\x18\x01 \x03(\v2\x19.common.SigningCommitmentR\x12signingCommitments\"\xa1\x03\n" +
	"\n" +
	"SigningJob\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\x12\x1f\n" +
	"\vkeyshare_id\x18\x03 \x01(\tR\n" +
	"keyshareId\x12#\n" +
	"\rverifying_key\x18\x04 \x01(\fR\fverifyingKey\x12M\n" +
	"\vcommitments\x18\x05 \x03(\v2+.spark_internal.SigningJob.CommitmentsEntryR\vcommitments\x12D\n" +
	"\x10user_commitments\x18\x06 \x01(\v2\x19.common.SigningCommitmentR\x0fuserCommitments\x12,\n" +
	"\x12adaptor_public_key\x18\a \x01(\fR\x10adaptorPublicKey\x1aY\n" +
	"\x10CommitmentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.common.SigningCommitmentR\x05value:\x028\x01\"S\n" +
	"\x12FrostRound2Request\x12=\n" +
	"\fsigning_jobs\x18\x01 \x03(\v2\x1a.spark_internal.SigningJobR\vsigningJobs\"\xb4\x01\n" +
	"\x13FrostRound2Response\x12J\n" +
	"\aresults\x18\x01 \x03(\v20.spark_internal.FrostRound2Response.ResultsEntryR\aresults\x1aQ\n" +
	"\fResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.common.SigningResultR\x05value:\x028\x01\"w\n" +
	"\x1bFinalizeTreeCreationRequest\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\x12(\n" +
	"\anetwork\x18\x02 \x01(\x0e2\x0e.spark.NetworkR\anetwork\"\xa4\x01\n" +
	"\x17FinalizeTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12.\n" +
	"\x05nodes\x18\x02 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"P\n" +
	"\x1eFinalizeRefreshTimelockRequest\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\"I\n" +
	"\x19FinalizeExtendLeafRequest\x12,\n" +
	"\x04node\x18\x01 \x01(\v2\x18.spark_internal.TreeNodeR\x04node\"R\n" +
	"\"FinalizeRenewRefundTimelockRequest\x12,\n" +
	"\x04node\x18\x01 \x01(\v2\x18.spark_internal.TreeNodeR\x04node\"\x89\x01\n" +
	" FinalizeRenewNodeTimelockRequest\x127\n" +
	"\n" +
	"split_node\x18\x01 \x01(\v2\x18.spark_internal.TreeNodeR\tsplitNode\x12,\n" +
	"\x04node\x18\x02 \x01(\v2\x18.spark_internal.TreeNodeR\x04node\"\xc3\x04\n" +
	"\bTreeNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value\x12)\n" +
	"\x10verifying_pubkey\x18\x03 \x01(\fR\x0fverifyingPubkey\x122\n" +
	"\x15owner_identity_pubkey\x18\x04 \x01(\fR\x13ownerIdentityPubkey\x120\n" +
	"\x14owner_signing_pubkey\x18\x05 \x01(\fR\x12ownerSigningPubkey\x12\x15\n" +
	"\x06raw_tx\x18\x06 \x01(\fR\x05rawTx\x12\"\n" +
	"\rraw_refund_tx\x18\a \x01(\fR\vrawRefundTx\x12\x17\n" +
	"\atree_id\x18\b \x01(\tR\x06treeId\x12)\n" +
	"\x0eparent_node_id\x18\t \x01(\tH\x00R\fparentNodeId\x88\x01\x01\x12.\n" +
	"\x13signing_keyshare_id\x18\n" +
	" \x01(\tR\x11signingKeyshareId\x12\x12\n" +
	"\x04vout\x18\v \x01(\rR\x04vout\x12'\n" +
	"\x0frefund_timelock\x18\f \x01(\rR\x0erefundTimelock\x12\x1b\n" +
	"\tdirect_tx\x18\r \x01(\fR\bdirectTx\x12(\n" +
	"\x10direct_refund_tx\x18\x0e \x01(\fR\x0edirectRefundTx\x12:\n" +
	"\x1adirect_from_cpfp_refund_tx\x18\x0f \x01(\fR\x16directFromCpfpRefundTxB\x11\n" +
	"\x0f_parent_node_id\"\xe1\x05\n" +
	"\x1bInitiatePreimageSwapRequest\x12<\n" +
	"\arequest\x18\x01 \x01(\v2\".spark.InitiatePreimageSwapRequestR\arequest\x12{\n" +
	"\x16cpfp_refund_signatures\x18\x02 \x03(\v2E.spark_internal.InitiatePreimageSwapRequest.CpfpRefundSignaturesEntryR\x14cpfpRefundSignatures\x12\x81\x01\n" +
	"\x18direct_refund_signatures\x18\x03 \x03(\v2G.spark_internal.InitiatePreimageSwapRequest.DirectRefundSignaturesEntryR\x16directRefundSignatures\x12\x9b\x01\n" +
	"\"direct_from_cpfp_refund_signatures\x18\x04 \x03(\v2O.spark_internal.InitiatePreimageSwapRequest.DirectFromCpfpRefundSignaturesEntryR\x1edirectFromCpfpRefundSignatures\x1aG\n" +
	"\x19CpfpRefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aI\n" +
	"\x1bDirectRefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aQ\n" +
	"#DirectFromCpfpRefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"E\n" +
	"\x1cInitiatePreimageSwapResponse\x12%\n" +
	"\x0epreimage_share\x18\x01 \x01(\fR\rpreimageShare\"\xb4\x01\n" +
	"\x16PrepareTreeAddressNode\x12.\n" +
	"\x13signing_keyshare_id\x18\x01 \x01(\tR\x11signingKeyshareId\x12&\n" +
	"\x0fuser_public_key\x18\x02 \x01(\fR\ruserPublicKey\x12B\n" +
	"\bchildren\x18\x03 \x03(\v2&.spark_internal.PrepareTreeAddressNodeR\bchildren\"\xe8\x01\n" +
	"\x19PrepareTreeAddressRequest\x12,\n" +
	"\x12target_keyshare_id\x18\x01 \x01(\tR\x10targetKeyshareId\x12:\n" +
	"\x04node\x18\x02 \x01(\v2&.spark_internal.PrepareTreeAddressNodeR\x04node\x127\n" +
	"\x18user_identity_public_key\x18\x03 \x01(\fR\x15userIdentityPublicKey\x12(\n" +
	"\anetwork\x18\x04 \x01(\x0e2\x0e.spark.NetworkR\anetwork\"\xb7\x01\n" +
	"\x1aPrepareTreeAddressResponse\x12Z\n" +
	"\n" +
	"signatures\x18\x01 \x03(\v2:.spark_internal.PrepareTreeAddressResponse.SignaturesEntryR\n" +
	"signatures\x1a=\n" +
	"\x0fSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xb9\x01\n" +
	"\x14InitiateTransferLeaf\x12\x17\n" +
	"\aleaf_id\x18\x01 \x01(\tR\x06leafId\x12\"\n" +
	"\rraw_refund_tx\x18\x02 \x01(\fR\vrawRefundTx\x12(\n" +
	"\x10direct_refund_tx\x18\x03 \x01(\fR\x0edirectRefundTx\x12:\n" +
	"\x1adirect_from_cpfp_refund_tx\x18\x04 \x01(\fR\x16directFromCpfpRefundTx\"\x83\n" +
	"\n" +
	"\x17InitiateTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12;\n" +
	"\x1asender_identity_public_key\x18\x02 \x01(\fR\x17senderIdentityPublicKey\x12?\n" +
	"\x1creceiver_identity_public_key\x18\x03 \x01(\fR\x19receiverIdentityPublicKey\x12;\n" +
	"\vexpiry_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiryTime\x12<\n" +
	"\x06leaves\x18\x05 \x03(\v2$.spark_internal.InitiateTransferLeafR\x06leaves\x12x\n" +
	"\x17sender_key_tweak_proofs\x18\x06 \x03(\v2A.spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntryR\x14senderKeyTweakProofs\x12'\n" +
	"\x04type\x18\a \x01(\x0e2\x13.spark.TransferTypeR\x04type\x12A\n" +
	"\x10transfer_package\x18\b \x01(\v2\x16.spark.TransferPackageR\x0ftransferPackage\x12j\n" +
	"\x11refund_signatures\x18\t \x03(\v2=.spark_internal.InitiateTransferRequest.RefundSignaturesEntryR\x10refundSignatures\x12}\n" +
	"\x18direct_refund_signatures\x18\n" +
	" \x03(\v2C.spark_internal.InitiateTransferRequest.DirectRefundSignaturesEntryR\x16directRefundSignatures\x12\x97\x01\n" +
	"\"direct_from_cpfp_refund_signatures\x18\v \x03(\v2K.spark_internal.InitiateTransferRequest.DirectFromCpfpRefundSignaturesEntryR\x1edirectFromCpfpRefundSignatures\x12#\n" +
	"\rspark_invoice\x18\f \x01(\tR\fsparkInvoice\x1a[\n" +
	"\x19SenderKeyTweakProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.spark.SecretProofR\x05value:\x028\x01\x1aC\n" +
	"\x15RefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aI\n" +
	"\x1bDirectRefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aQ\n" +
	"#DirectFromCpfpRefundSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xbf\x01\n" +
	"\x1cDeliverSenderKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12;\n" +
	"\x1asender_identity_public_key\x18\x02 \x01(\fR\x17senderIdentityPublicKey\x12A\n" +
	"\x10transfer_package\x18\x03 \x01(\v2\x16.spark.TransferPackageR\x0ftransferPackage\"\x9b\x01\n" +
	"\x1eInitiateCooperativeExitRequest\x12C\n" +
	"\btransfer\x18\x01 \x01(\v2'.spark_internal.InitiateTransferRequestR\btransfer\x12\x17\n" +
	"\aexit_id\x18\x02 \x01(\tR\x06exitId\x12\x1b\n" +
	"\texit_txid\x18\x03 \x01(\fR\bexitTxid\"\x9a\x01\n" +
	"\x1cUpdatePreimageRequestRequest\x12.\n" +
	"\x13preimage_request_id\x18\x01 \x01(\tR\x11preimageRequestId\x12\x1a\n" +
	"\bpreimage\x18\x02 \x01(\fR\bpreimage\x12.\n" +
	"\x13identity_public_key\x18\x03 \x01(\fR\x11identityPublicKey\"\xb5\x02\n" +
	"$StartTokenTransactionInternalRequest\x12O\n" +
	"\x17final_token_transaction\x18\x01 \x01(\v2\x17.spark.TokenTransactionR\x15finalTokenTransaction\x12c\n" +
	"\x1ctoken_transaction_signatures\x18\x02 \x01(\v2!.spark.TokenTransactionSignaturesR\x1atokenTransactionSignatures\x12!\n" +
	"\fkeyshare_ids\x18\x03 \x03(\tR\vkeyshareIds\x124\n" +
	"\x16coordinator_public_key\x18\n" +
	" \x01(\fR\x14coordinatorPublicKey\"x\n" +
	"%StartTokenTransactionInternalResponse\x12O\n" +
	"\x17final_token_transaction\x18\x01 \x01(\v2\x17.spark.TokenTransactionR\x15finalTokenTransaction\"\xcc\x03\n" +
	"%InitiateSettleReceiverKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12s\n" +
	"\x10key_tweak_proofs\x18\x02 \x03(\v2I.spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntryR\x0ekeyTweakProofs\x12s\n" +
	"\x10user_public_keys\x18\x03 \x03(\v2I.spark_internal.InitiateSettleReceiverKeyTweakRequest.UserPublicKeysEntryR\x0euserPublicKeys\x1aU\n" +
	"\x13KeyTweakProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.spark.SecretProofR\x05value:\x028\x01\x1aA\n" +
	"\x13UserPublicKeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\x84\x01\n" +
	"\x1dSettleReceiverKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12<\n" +
	"\x06action\x18\x03 \x01(\x0e2$.spark_internal.SettleKeyTweakActionR\x06actionJ\x04\b\x02\x10\x03\"|\n" +
	"\x1bSettleSenderKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12<\n" +
	"\x06action\x18\x02 \x01(\x0e2$.spark_internal.SettleKeyTweakActionR\x06action\"\xa5\x01\n" +
	"\x15CreateUtxoSwapRequest\x128\n" +
	"\arequest\x18\x01 \x01(\v2\x1e.spark.InitiateUtxoSwapRequestR\arequest\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x124\n" +
	"\x16coordinator_public_key\x18\x03 \x01(\fR\x14coordinatorPublicKey\"H\n" +
	"\x16CreateUtxoSwapResponse\x12.\n" +
	"\x12UtxoDepositAddress\x18\x01 \x01(\tR\x12UtxoDepositAddress\"\xa0\x02\n" +
	"$InitiateStaticDepositUtxoSwapRequest\x12/\n" +
	"\ron_chain_utxo\x18\x01 \x01(\v2\v.spark.UTXOR\vonChainUtxo\x12#\n" +
	"\rssp_signature\x18\x02 \x01(\fR\fsspSignature\x12%\n" +
	"\x0euser_signature\x18\x03 \x01(\fR\ruserSignature\x127\n" +
	"\btransfer\x18\x04 \x01(\v2\x1b.spark.StartTransferRequestR\btransfer\x12B\n" +
	"\x14spend_tx_signing_job\x18\x05 \x01(\v2\x11.spark.SigningJobR\x11spendTxSigningJob\"\xc8\x01\n" +
	"\"CreateStaticDepositUtxoSwapRequest\x12N\n" +
	"\arequest\x18\x01 \x01(\v24.spark_internal.InitiateStaticDepositUtxoSwapRequestR\arequest\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x124\n" +
	"\x16coordinator_public_key\x18\x03 \x01(\fR\x14coordinatorPublicKey\"U\n" +
	"#CreateStaticDepositUtxoSwapResponse\x12.\n" +
	"\x12UtxoDepositAddress\x18\x01 \x01(\tR\x12UtxoDepositAddress\"\xc3\x01\n" +
	"$CreateStaticDepositUtxoRefundRequest\x12G\n" +
	"\arequest\x18\x01 \x01(\v2-.spark.InitiateStaticDepositUtxoRefundRequestR\arequest\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x124\n" +
	"\x16coordinator_public_key\x18\x03 \x01(\fR\x14coordinatorPublicKey\"W\n" +
	"%CreateStaticDepositUtxoRefundResponse\x12.\n" +
	"\x12UtxoDepositAddress\x18\x01 \x01(\tR\x12UtxoDepositAddress\"\x9e\x01\n" +
	"\x17RollbackUtxoSwapRequest\x12/\n" +
	"\ron_chain_utxo\x18\x01 \x01(\v2\v.spark.UTXOR\vonChainUtxo\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x124\n" +
	"\x16coordinator_public_key\x18\x03 \x01(\fR\x14coordinatorPublicKey\"\x1a\n" +
	"\x18RollbackUtxoSwapResponse\"\x9f\x01\n" +
	"\x18UtxoSwapCompletedRequest\x12/\n" +
	"\ron_chain_utxo\x18\x01 \x01(\v2\v.spark.UTXOR\vonChainUtxo\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x124\n" +
	"\x16coordinator_public_key\x18\x03 \x01(\fR\x14coordinatorPublicKey\"\x1b\n" +
	"\x19UtxoSwapCompletedResponse\"\x81\x01\n" +
	".CancelOrFinalizeExpiredTokenTransactionRequest\x12O\n" +
	"\x17final_token_transaction\x18\x01 \x01(\v2\x17.spark.TokenTransactionR\x15finalTokenTransaction\";\n" +
	"\x1eQueryLeafSigningPubkeysRequest\x12\x19\n" +
	"\bleaf_ids\x18\x01 \x03(\tR\aleafIds\"\xd2\x01\n" +
	"\x1fQueryLeafSigningPubkeysResponse\x12l\n" +
	"\x0fsigning_pubkeys\x18\x01 \x03(\v2C.spark_internal.QueryLeafSigningPubkeysResponse.SigningPubkeysEntryR\x0esigningPubkeys\x1aA\n" +
	"\x13SigningPubkeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"s\n" +
	"\x1fResolveLeafInvestigationRequest\x12\"\n" +
	"\rlost_leaf_ids\x18\x01 \x03(\tR\vlostLeafIds\x12,\n" +
	"\x12available_leaf_ids\x18\x02 \x03(\tR\x10availableLeafIds\"\xc4\x02\n" +
	"\x16ProvidePreimageRequest\x12!\n" +
	"\fpayment_hash\x18\x01 \x01(\fR\vpaymentHash\x12\x1a\n" +
	"\bpreimage\x18\x02 \x01(\fR\bpreimage\x12.\n" +
	"\x13identity_public_key\x18\x03 \x01(\fR\x11identityPublicKey\x12d\n" +
	"\x10key_tweak_proofs\x18\x04 \x03(\v2:.spark_internal.ProvidePreimageRequest.KeyTweakProofsEntryR\x0ekeyTweakProofs\x1aU\n" +
	"\x13KeyTweakProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.spark.SecretProofR\x05value:\x028\x01\"=\n" +
	"\x1aReserveEntityDkgKeyRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x01(\tR\n" +
	"keyshareId\"\x90\x01\n" +
	"\x12FixKeyshareRequest\x12&\n" +
	"\x0fbad_keyshare_id\x18\x01 \x01(\tR\rbadKeyshareId\x12&\n" +
	"\x0fbad_operator_id\x18\x02 \x01(\tR\rbadOperatorId\x12*\n" +
	"\x11good_operator_ids\x18\x03 \x03(\tR\x0fgoodOperatorIds\"\x96\x01\n" +
	"\x18FixKeyshareRound1Request\x12&\n" +
	"\x0fbad_keyshare_id\x18\x01 \x01(\tR\rbadKeyshareId\x12&\n" +
	"\x0fbad_operator_id\x18\x02 \x01(\tR\rbadOperatorId\x12*\n" +
	"\x11good_operator_ids\x18\x03 \x03(\tR\x0fgoodOperatorIds\"5\n" +
	"\x19FixKeyshareRound1Response\x12\x18\n" +
	"\amessage\x18\x01 \x03(\fR\amessage\"\xb0\x01\n" +
	"\x18FixKeyshareRound2Request\x12&\n" +
	"\x0fbad_keyshare_id\x18\x01 \x01(\tR\rbadKeyshareId\x12&\n" +
	"\x0fbad_operator_id\x18\x02 \x01(\tR\rbadOperatorId\x12*\n" +
	"\x11good_operator_ids\x18\x03 \x03(\tR\x0fgoodOperatorIds\x12\x18\n" +
	"\amessage\x18\x04 \x03(\fR\amessage\"5\n" +
	"\x19FixKeyshareRound2Response\x12\x18\n" +
	"\amessage\x18\x01 \x01(\fR\amessage\"8\n" +
	"\x13GetTransfersRequest\x12!\n" +
	"\ftransfer_ids\x18\x01 \x03(\tR\vtransferIds\"E\n" +
	"\x14GetTransfersResponse\x12-\n" +
	"\ttransfers\x18\x01 \x03(\v2\x0f.spark.TransferR\ttransfers\"\xa1\x01\n" +
	")GenerateStaticDepositAddressProofsRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x01(\tR\n" +
	"keyshareId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x129\n" +
	"\x19owner_identity_public_key\x18\x03 \x01(\fR\x16ownerIdentityPublicKey\"Y\n" +
	"*GenerateStaticDepositAddressProofsResponse\x12+\n" +
	"\x11address_signature\x18\x01 \x01(\fR\x10addressSignature*:\n" +
	"\x14SettleKeyTweakAction\x12\b\n" +
	"\x04NONE\x10\x00\x12\n" +
	"\n" +
	"\x06COMMIT\x10\x01\x12\f\n" +
	"\bROLLBACK\x10\x022\x9e\x1f\n" +
	"\x14SparkInternalService\x12^\n" +
	"\x16mark_keyshares_as_used\x12*.spark_internal.MarkKeysharesAsUsedRequest\x1a\x16.google.protobuf.Empty\"\x00\x12\x92\x01\n" +
	"!mark_keyshare_for_deposit_address\x124.spark_internal.MarkKeyshareForDepositAddressRequest\x1a5.spark_internal.MarkKeyshareForDepositAddressResponse\"\x00\x12^\n" +
	"\x16reserve_entity_dkg_key\x12*.spark_internal.ReserveEntityDkgKeyRequest\x1a\x16.google.protobuf.Empty\"\x00\x12_\n" +
	"\x16finalize_tree_creation\x12+.spark_internal.FinalizeTreeCreationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12Y\n" +
	"\ffrost_round1\x12\".spark_internal.FrostRound1Request\x1a#.spark_internal.FrostRound1Response\"\x00\x12Y\n" +
	"\ffrost_round2\x12\".spark_internal.FrostRound2Request\x1a#.spark_internal.FrostRound2Response\"\x00\x12V\n" +
	"\x11finalize_transfer\x12'.spark_internal.FinalizeTransferRequest\x1a\x16.google.protobuf.Empty\"\x00\x12e\n" +
	"\x19finalize_refresh_timelock\x12..spark_internal.FinalizeRefreshTimelockRequest\x1a\x16.google.protobuf.Empty\"\x00\x12[\n" +
	"\x14finalize_extend_leaf\x12).spark_internal.FinalizeExtendLeafRequest\x1a\x16.google.protobuf.Empty\"\x00\x12n\n" +
	"\x1efinalize_renew_refund_timelock\x122.spark_internal.FinalizeRenewRefundTimelockRequest\x1a\x16.google.protobuf.Empty\"\x00\x12j\n" +
	"\x1cfinalize_renew_node_timelock\x120.spark_internal.FinalizeRenewNodeTimelockRequest\x1a\x16.google.protobuf.Empty\"\x00\x12l\n" +
	"\x16initiate_preimage_swap\x12\".spark.InitiatePreimageSwapRequest\x1a,.spark_internal.InitiatePreimageSwapResponse\"\x00\x12x\n" +
	"\x19initiate_preimage_swap_v2\x12+.spark_internal.InitiatePreimageSwapRequest\x1a,.spark_internal.InitiatePreimageSwapResponse\"\x00\x12T\n" +
	"\x10provide_preimage\x12&.spark_internal.ProvidePreimageRequest\x1a\x16.google.protobuf.Empty\"\x00\x12a\n" +
	"\x17update_preimage_request\x12,.spark_internal.UpdatePreimageRequestRequest\x1a\x16.google.protobuf.Empty\"\x00\x12o\n" +
	"\x14prepare_tree_address\x12).spark_internal.PrepareTreeAddressRequest\x1a*.spark_internal.PrepareTreeAddressResponse\"\x00\x12V\n" +
	"\x11initiate_transfer\x12'.spark_internal.InitiateTransferRequest\x1a\x16.google.protobuf.Empty\"\x00\x12b\n" +
	"\x18deliver_sender_key_tweak\x12,.spark_internal.DeliverSenderKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00\x12e\n" +
	"\x19initiate_cooperative_exit\x12..spark_internal.InitiateCooperativeExitRequest\x1a\x16.google.protobuf.Empty\"\x00\x12Z\n" +
	"\x18return_lightning_payment\x12$.spark.ReturnLightningPaymentRequest\x1a\x16.google.protobuf.Empty\"\x00\x12r\n" +
	" start_token_transaction_internal\x124.spark_internal.StartTokenTransactionInternalRequest\x1a\x16.google.protobuf.Empty\"\x00\x12c\n" +
	"\x1cquery_token_outputs_internal\x12\x1f.spark.QueryTokenOutputsRequest\x1a .spark.QueryTokenOutputsResponse\"\x00\x12u\n" +
	"\"initiate_settle_receiver_key_tweak\x125.spark_internal.InitiateSettleReceiverKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00\x12d\n" +
	"\x19settle_receiver_key_tweak\x12-.spark_internal.SettleReceiverKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00\x12`\n" +
	"\x17settle_sender_key_tweak\x12+.spark_internal.SettleSenderKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00\x12f\n" +
	"\x10create_utxo_swap\x12%.spark_internal.CreateUtxoSwapRequest\x1a&.spark_internal.CreateUtxoSwapResponse\"\x03\x88\x02\x01\x12\x8c\x01\n" +
	"\x1fcreate_static_deposit_utxo_swap\x122.spark_internal.CreateStaticDepositUtxoSwapRequest\x1a3.spark_internal.CreateStaticDepositUtxoSwapResponse\"\x00\x12\x92\x01\n" +
	"!create_static_deposit_utxo_refund\x124.spark_internal.CreateStaticDepositUtxoRefundRequest\x1a5.spark_internal.CreateStaticDepositUtxoRefundResponse\"\x00\x12i\n" +
	"\x12rollback_utxo_swap\x12'.spark_internal.RollbackUtxoSwapRequest\x1a(.spark_internal.RollbackUtxoSwapResponse\"\x00\x12l\n" +
	"\x13utxo_swap_completed\x12(.spark_internal.UtxoSwapCompletedRequest\x1a).spark_internal.UtxoSwapCompletedResponse\"\x00\x12\x7f\n" +
	"\x1aquery_leaf_signing_pubkeys\x12..spark_internal.QueryLeafSigningPubkeysRequest\x1a/.spark_internal.QueryLeafSigningPubkeysResponse\"\x00\x12g\n" +
	"\x1aresolve_leaf_investigation\x12/.spark_internal.ResolveLeafInvestigationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12L\n" +
	"\ffix_keyshare\x12\".spark_internal.FixKeyshareRequest\x1a\x16.google.protobuf.Empty\"\x00\x12l\n" +
	"\x13fix_keyshare_round1\x12(.spark_internal.FixKeyshareRound1Request\x1a).spark_internal.FixKeyshareRound1Response\"\x00\x12l\n" +
	"\x13fix_keyshare_round2\x12(.spark_internal.FixKeyshareRound2Request\x1a).spark_internal.FixKeyshareRound2Response\"\x00\x12\\\n" +
	"\rget_transfers\x12#.spark_internal.GetTransfersRequest\x1a$.spark_internal.GetTransfersResponse\"\x00\x12\xa1\x01\n" +
	"&generate_static_deposit_address_proofs\x129.spark_internal.GenerateStaticDepositAddressProofsRequest\x1a:.spark_internal.GenerateStaticDepositAddressProofsResponse\"\x00B5Z3github.com/lightsparkdev/spark/proto/spark_internalb\x06proto3"

var (
	file_spark_internal_proto_rawDescOnce sync.Once
	file_spark_internal_proto_rawDescData []byte
)

func file_spark_internal_proto_rawDescGZIP() []byte {
	file_spark_internal_proto_rawDescOnce.Do(func() {
		file_spark_internal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spark_internal_proto_rawDesc), len(file_spark_internal_proto_rawDesc)))
	})
	return file_spark_internal_proto_rawDescData
}

var file_spark_internal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spark_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_spark_internal_proto_goTypes = []any{
	(SettleKeyTweakAction)(0),                              // 0: spark_internal.SettleKeyTweakAction
	(*MarkKeysharesAsUsedRequest)(nil),                     // 1: spark_internal.MarkKeysharesAsUsedRequest
	(*MarkKeyshareForDepositAddressRequest)(nil),           // 2: spark_internal.MarkKeyshareForDepositAddressRequest
	(*MarkKeyshareForDepositAddressResponse)(nil),          // 3: spark_internal.MarkKeyshareForDepositAddressResponse
	(*FrostRound1Request)(nil),                             // 4: spark_internal.FrostRound1Request
	(*FrostRound1Response)(nil),                            // 5: spark_internal.FrostRound1Response
	(*SigningJob)(nil),                                     // 6: spark_internal.SigningJob
	(*FrostRound2Request)(nil),                             // 7: spark_internal.FrostRound2Request
	(*FrostRound2Response)(nil),                            // 8: spark_internal.FrostRound2Response
	(*FinalizeTreeCreationRequest)(nil),                    // 9: spark_internal.FinalizeTreeCreationRequest
	(*FinalizeTransferRequest)(nil),                        // 10: spark_internal.FinalizeTransferRequest
	(*FinalizeRefreshTimelockRequest)(nil),                 // 11: spark_internal.FinalizeRefreshTimelockRequest
	(*FinalizeExtendLeafRequest)(nil),                      // 12: spark_internal.FinalizeExtendLeafRequest
	(*FinalizeRenewRefundTimelockRequest)(nil),             // 13: spark_internal.FinalizeRenewRefundTimelockRequest
	(*FinalizeRenewNodeTimelockRequest)(nil),               // 14: spark_internal.FinalizeRenewNodeTimelockRequest
	(*TreeNode)(nil),                                       // 15: spark_internal.TreeNode
	(*InitiatePreimageSwapRequest)(nil),                    // 16: spark_internal.InitiatePreimageSwapRequest
	(*InitiatePreimageSwapResponse)(nil),                   // 17: spark_internal.InitiatePreimageSwapResponse
	(*PrepareTreeAddressNode)(nil),                         // 18: spark_internal.PrepareTreeAddressNode
	(*PrepareTreeAddressRequest)(nil),                      // 19: spark_internal.PrepareTreeAddressRequest
	(*PrepareTreeAddressResponse)(nil),                     // 20: spark_internal.PrepareTreeAddressResponse
	(*InitiateTransferLeaf)(nil),                           // 21: spark_internal.InitiateTransferLeaf
	(*InitiateTransferRequest)(nil),                        // 22: spark_internal.InitiateTransferRequest
	(*DeliverSenderKeyTweakRequest)(nil),                   // 23: spark_internal.DeliverSenderKeyTweakRequest
	(*InitiateCooperativeExitRequest)(nil),                 // 24: spark_internal.InitiateCooperativeExitRequest
	(*UpdatePreimageRequestRequest)(nil),                   // 25: spark_internal.UpdatePreimageRequestRequest
	(*StartTokenTransactionInternalRequest)(nil),           // 26: spark_internal.StartTokenTransactionInternalRequest
	(*StartTokenTransactionInternalResponse)(nil),          // 27: spark_internal.StartTokenTransactionInternalResponse
	(*InitiateSettleReceiverKeyTweakRequest)(nil),          // 28: spark_internal.InitiateSettleReceiverKeyTweakRequest
	(*SettleReceiverKeyTweakRequest)(nil),                  // 29: spark_internal.SettleReceiverKeyTweakRequest
	(*SettleSenderKeyTweakRequest)(nil),                    // 30: spark_internal.SettleSenderKeyTweakRequest
	(*CreateUtxoSwapRequest)(nil),                          // 31: spark_internal.CreateUtxoSwapRequest
	(*CreateUtxoSwapResponse)(nil),                         // 32: spark_internal.CreateUtxoSwapResponse
	(*InitiateStaticDepositUtxoSwapRequest)(nil),           // 33: spark_internal.InitiateStaticDepositUtxoSwapRequest
	(*CreateStaticDepositUtxoSwapRequest)(nil),             // 34: spark_internal.CreateStaticDepositUtxoSwapRequest
	(*CreateStaticDepositUtxoSwapResponse)(nil),            // 35: spark_internal.CreateStaticDepositUtxoSwapResponse
	(*CreateStaticDepositUtxoRefundRequest)(nil),           // 36: spark_internal.CreateStaticDepositUtxoRefundRequest
	(*CreateStaticDepositUtxoRefundResponse)(nil),          // 37: spark_internal.CreateStaticDepositUtxoRefundResponse
	(*RollbackUtxoSwapRequest)(nil),                        // 38: spark_internal.RollbackUtxoSwapRequest
	(*RollbackUtxoSwapResponse)(nil),                       // 39: spark_internal.RollbackUtxoSwapResponse
	(*UtxoSwapCompletedRequest)(nil),                       // 40: spark_internal.UtxoSwapCompletedRequest
	(*UtxoSwapCompletedResponse)(nil),                      // 41: spark_internal.UtxoSwapCompletedResponse
	(*CancelOrFinalizeExpiredTokenTransactionRequest)(nil), // 42: spark_internal.CancelOrFinalizeExpiredTokenTransactionRequest
	(*QueryLeafSigningPubkeysRequest)(nil),                 // 43: spark_internal.QueryLeafSigningPubkeysRequest
	(*QueryLeafSigningPubkeysResponse)(nil),                // 44: spark_internal.QueryLeafSigningPubkeysResponse
	(*ResolveLeafInvestigationRequest)(nil),                // 45: spark_internal.ResolveLeafInvestigationRequest
	(*ProvidePreimageRequest)(nil),                         // 46: spark_internal.ProvidePreimageRequest
	(*ReserveEntityDkgKeyRequest)(nil),                     // 47: spark_internal.ReserveEntityDkgKeyRequest
	(*FixKeyshareRequest)(nil),                             // 48: spark_internal.FixKeyshareRequest
	(*FixKeyshareRound1Request)(nil),                       // 49: spark_internal.FixKeyshareRound1Request
	(*FixKeyshareRound1Response)(nil),                      // 50: spark_internal.FixKeyshareRound1Response
	(*FixKeyshareRound2Request)(nil),                       // 51: spark_internal.FixKeyshareRound2Request
	(*FixKeyshareRound2Response)(nil),                      // 52: spark_internal.FixKeyshareRound2Response
	(*GetTransfersRequest)(nil),                            // 53: spark_internal.GetTransfersRequest
	(*GetTransfersResponse)(nil),                           // 54: spark_internal.GetTransfersResponse
	(*GenerateStaticDepositAddressProofsRequest)(nil),      // 55: spark_internal.GenerateStaticDepositAddressProofsRequest
	(*GenerateStaticDepositAddressProofsResponse)(nil),     // 56: spark_internal.GenerateStaticDepositAddressProofsResponse
	nil,                              // 57: spark_internal.FrostRound1Request.PublicKeysEntry
	nil,                              // 58: spark_internal.SigningJob.CommitmentsEntry
	nil,                              // 59: spark_internal.FrostRound2Response.ResultsEntry
	nil,                              // 60: spark_internal.InitiatePreimageSwapRequest.CpfpRefundSignaturesEntry
	nil,                              // 61: spark_internal.InitiatePreimageSwapRequest.DirectRefundSignaturesEntry
	nil,                              // 62: spark_internal.InitiatePreimageSwapRequest.DirectFromCpfpRefundSignaturesEntry
	nil,                              // 63: spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	nil,                              // 64: spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry
	nil,                              // 65: spark_internal.InitiateTransferRequest.RefundSignaturesEntry
	nil,                              // 66: spark_internal.InitiateTransferRequest.DirectRefundSignaturesEntry
	nil,                              // 67: spark_internal.InitiateTransferRequest.DirectFromCpfpRefundSignaturesEntry
	nil,                              // 68: spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry
	nil,                              // 69: spark_internal.InitiateSettleReceiverKeyTweakRequest.UserPublicKeysEntry
	nil,                              // 70: spark_internal.QueryLeafSigningPubkeysResponse.SigningPubkeysEntry
	nil,                              // 71: spark_internal.ProvidePreimageRequest.KeyTweakProofsEntry
	(*common.SigningCommitment)(nil), // 72: common.SigningCommitment
	(spark.Network)(0),               // 73: spark.Network
	(*timestamppb.Timestamp)(nil),    // 74: google.protobuf.Timestamp
	(*spark.InitiatePreimageSwapRequest)(nil),            // 75: spark.InitiatePreimageSwapRequest
	(spark.TransferType)(0),                              // 76: spark.TransferType
	(*spark.TransferPackage)(nil),                        // 77: spark.TransferPackage
	(*spark.TokenTransaction)(nil),                       // 78: spark.TokenTransaction
	(*spark.TokenTransactionSignatures)(nil),             // 79: spark.TokenTransactionSignatures
	(*spark.InitiateUtxoSwapRequest)(nil),                // 80: spark.InitiateUtxoSwapRequest
	(*spark.UTXO)(nil),                                   // 81: spark.UTXO
	(*spark.StartTransferRequest)(nil),                   // 82: spark.StartTransferRequest
	(*spark.SigningJob)(nil),                             // 83: spark.SigningJob
	(*spark.InitiateStaticDepositUtxoRefundRequest)(nil), // 84: spark.InitiateStaticDepositUtxoRefundRequest
	(*spark.Transfer)(nil),                               // 85: spark.Transfer
	(*common.SigningResult)(nil),                         // 86: common.SigningResult
	(*spark.SecretProof)(nil),                            // 87: spark.SecretProof
	(*spark.ReturnLightningPaymentRequest)(nil),          // 88: spark.ReturnLightningPaymentRequest
	(*spark.QueryTokenOutputsRequest)(nil),               // 89: spark.QueryTokenOutputsRequest
	(*emptypb.Empty)(nil),                                // 90: google.protobuf.Empty
	(*spark.QueryTokenOutputsResponse)(nil),              // 91: spark.QueryTokenOutputsResponse
}
var file_spark_internal_proto_depIdxs = []int32{
	57, // 0: spark_internal.FrostRound1Request.public_keys:type_name -> spark_internal.FrostRound1Request.PublicKeysEntry
	72, // 1: spark_internal.FrostRound1Response.signing_commitments:type_name -> common.SigningCommitment
	58, // 2: spark_internal.SigningJob.commitments:type_name -> spark_internal.SigningJob.CommitmentsEntry
	72, // 3: spark_internal.SigningJob.user_commitments:type_name -> common.SigningCommitment
	6,  // 4: spark_internal.FrostRound2Request.signing_jobs:type_name -> spark_internal.SigningJob
	59, // 5: spark_internal.FrostRound2Response.results:type_name -> spark_internal.FrostRound2Response.ResultsEntry
	15, // 6: spark_internal.FinalizeTreeCreationRequest.nodes:type_name -> spark_internal.TreeNode
	73, // 7: spark_internal.FinalizeTreeCreationRequest.network:type_name -> spark.Network
	15, // 8: spark_internal.FinalizeTransferRequest.nodes:type_name -> spark_internal.TreeNode
	74, // 9: spark_internal.FinalizeTransferRequest.timestamp:type_name -> google.protobuf.Timestamp
	15, // 10: spark_internal.FinalizeRefreshTimelockRequest.nodes:type_name -> spark_internal.TreeNode
	15, // 11: spark_internal.FinalizeExtendLeafRequest.node:type_name -> spark_internal.TreeNode
	15, // 12: spark_internal.FinalizeRenewRefundTimelockRequest.node:type_name -> spark_internal.TreeNode
	15, // 13: spark_internal.FinalizeRenewNodeTimelockRequest.split_node:type_name -> spark_internal.TreeNode
	15, // 14: spark_internal.FinalizeRenewNodeTimelockRequest.node:type_name -> spark_internal.TreeNode
	75, // 15: spark_internal.InitiatePreimageSwapRequest.request:type_name -> spark.InitiatePreimageSwapRequest
	60, // 16: spark_internal.InitiatePreimageSwapRequest.cpfp_refund_signatures:type_name -> spark_internal.InitiatePreimageSwapRequest.CpfpRefundSignaturesEntry
	61, // 17: spark_internal.InitiatePreimageSwapRequest.direct_refund_signatures:type_name -> spark_internal.InitiatePreimageSwapRequest.DirectRefundSignaturesEntry
	62, // 18: spark_internal.InitiatePreimageSwapRequest.direct_from_cpfp_refund_signatures:type_name -> spark_internal.InitiatePreimageSwapRequest.DirectFromCpfpRefundSignaturesEntry
	18, // 19: spark_internal.PrepareTreeAddressNode.children:type_name -> spark_internal.PrepareTreeAddressNode
	18, // 20: spark_internal.PrepareTreeAddressRequest.node:type_name -> spark_internal.PrepareTreeAddressNode
	73, // 21: spark_internal.PrepareTreeAddressRequest.network:type_name -> spark.Network
	63, // 22: spark_internal.PrepareTreeAddressResponse.signatures:type_name -> spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	74, // 23: spark_internal.InitiateTransferRequest.expiry_time:type_name -> google.protobuf.Timestamp
	21, // 24: spark_internal.InitiateTransferRequest.leaves:type_name -> spark_internal.InitiateTransferLeaf
	64, // 25: spark_internal.InitiateTransferRequest.sender_key_tweak_proofs:type_name -> spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry
	76, // 26: spark_internal.InitiateTransferRequest.type:type_name -> spark.TransferType
	77, // 27: spark_internal.InitiateTransferRequest.transfer_package:type_name -> spark.TransferPackage
	65, // 28: spark_internal.InitiateTransferRequest.refund_signatures:type_name -> spark_internal.InitiateTransferRequest.RefundSignaturesEntry
	66, // 29: spark_internal.InitiateTransferRequest.direct_refund_signatures:type_name -> spark_internal.InitiateTransferRequest.DirectRefundSignaturesEntry
	67, // 30: spark_internal.InitiateTransferRequest.direct_from_cpfp_refund_signatures:type_name -> spark_internal.InitiateTransferRequest.DirectFromCpfpRefundSignaturesEntry
	77, // 31: spark_internal.DeliverSenderKeyTweakRequest.transfer_package:type_name -> spark.TransferPackage
	22, // 32: spark_internal.InitiateCooperativeExitRequest.transfer:type_name -> spark_internal.InitiateTransferRequest
	78, // 33: spark_internal.StartTokenTransactionInternalRequest.final_token_transaction:type_name -> spark.TokenTransaction
	79, // 34: spark_internal.StartTokenTransactionInternalRequest.token_transaction_signatures:type_name -> spark.TokenTransactionSignatures
	78, // 35: spark_internal.StartTokenTransactionInternalResponse.final_token_transaction:type_name -> spark.TokenTransaction
	68, // 36: spark_internal.InitiateSettleReceiverKeyTweakRequest.key_tweak_proofs:type_name -> spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry
	69, // 37: spark_internal.InitiateSettleReceiverKeyTweakRequest.user_public_keys:type_name -> spark_internal.InitiateSettleReceiverKeyTweakRequest.UserPublicKeysEntry
	0,  // 38: spark_internal.SettleReceiverKeyTweakRequest.action:type_name -> spark_internal.SettleKeyTweakAction
	0,  // 39: spark_internal.SettleSenderKeyTweakRequest.action:type_name -> spark_internal.SettleKeyTweakAction
	80, // 40: spark_internal.CreateUtxoSwapRequest.request:type_name -> spark.InitiateUtxoSwapRequest
	81, // 41: spark_internal.InitiateStaticDepositUtxoSwapRequest.on_chain_utxo:type_name -> spark.UTXO
	82, // 42: spark_internal.InitiateStaticDepositUtxoSwapRequest.transfer:type_name -> spark.StartTransferRequest
	83, // 43: spark_internal.InitiateStaticDepositUtxoSwapRequest.spend_tx_signing_job:type_name -> spark.SigningJob
	33, // 44: spark_internal.CreateStaticDepositUtxoSwapRequest.request:type_name -> spark_internal.InitiateStaticDepositUtxoSwapRequest
	84, // 45: spark_internal.CreateStaticDepositUtxoRefundRequest.request:type_name -> spark.InitiateStaticDepositUtxoRefundRequest
	81, // 46: spark_internal.RollbackUtxoSwapRequest.on_chain_utxo:type_name -> spark.UTXO
	81, // 47: spark_internal.UtxoSwapCompletedRequest.on_chain_utxo:type_name -> spark.UTXO
	78, // 48: spark_internal.CancelOrFinalizeExpiredTokenTransactionRequest.final_token_transaction:type_name -> spark.TokenTransaction
	70, // 49: spark_internal.QueryLeafSigningPubkeysResponse.signing_pubkeys:type_name -> spark_internal.QueryLeafSigningPubkeysResponse.SigningPubkeysEntry
	71, // 50: spark_internal.ProvidePreimageRequest.key_tweak_proofs:type_name -> spark_internal.ProvidePreimageRequest.KeyTweakProofsEntry
	85, // 51: spark_internal.GetTransfersResponse.transfers:type_name -> spark.Transfer
	72, // 52: spark_internal.SigningJob.CommitmentsEntry.value:type_name -> common.SigningCommitment
	86, // 53: spark_internal.FrostRound2Response.ResultsEntry.value:type_name -> common.SigningResult
	87, // 54: spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry.value:type_name -> spark.SecretProof
	87, // 55: spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry.value:type_name -> spark.SecretProof
	87, // 56: spark_internal.ProvidePreimageRequest.KeyTweakProofsEntry.value:type_name -> spark.SecretProof
	1,  // 57: spark_internal.SparkInternalService.mark_keyshares_as_used:input_type -> spark_internal.MarkKeysharesAsUsedRequest
	2,  // 58: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:input_type -> spark_internal.MarkKeyshareForDepositAddressRequest
	47, // 59: spark_internal.SparkInternalService.reserve_entity_dkg_key:input_type -> spark_internal.ReserveEntityDkgKeyRequest
	9,  // 60: spark_internal.SparkInternalService.finalize_tree_creation:input_type -> spark_internal.FinalizeTreeCreationRequest
	4,  // 61: spark_internal.SparkInternalService.frost_round1:input_type -> spark_internal.FrostRound1Request
	7,  // 62: spark_internal.SparkInternalService.frost_round2:input_type -> spark_internal.FrostRound2Request
	10, // 63: spark_internal.SparkInternalService.finalize_transfer:input_type -> spark_internal.FinalizeTransferRequest
	11, // 64: spark_internal.SparkInternalService.finalize_refresh_timelock:input_type -> spark_internal.FinalizeRefreshTimelockRequest
	12, // 65: spark_internal.SparkInternalService.finalize_extend_leaf:input_type -> spark_internal.FinalizeExtendLeafRequest
	13, // 66: spark_internal.SparkInternalService.finalize_renew_refund_timelock:input_type -> spark_internal.FinalizeRenewRefundTimelockRequest
	14, // 67: spark_internal.SparkInternalService.finalize_renew_node_timelock:input_type -> spark_internal.FinalizeRenewNodeTimelockRequest
	75, // 68: spark_internal.SparkInternalService.initiate_preimage_swap:input_type -> spark.InitiatePreimageSwapRequest
	16, // 69: spark_internal.SparkInternalService.initiate_preimage_swap_v2:input_type -> spark_internal.InitiatePreimageSwapRequest
	46, // 70: spark_internal.SparkInternalService.provide_preimage:input_type -> spark_internal.ProvidePreimageRequest
	25, // 71: spark_internal.SparkInternalService.update_preimage_request:input_type -> spark_internal.UpdatePreimageRequestRequest
	19, // 72: spark_internal.SparkInternalService.prepare_tree_address:input_type -> spark_internal.PrepareTreeAddressRequest
	22, // 73: spark_internal.SparkInternalService.initiate_transfer:input_type -> spark_internal.InitiateTransferRequest
	23, // 74: spark_internal.SparkInternalService.deliver_sender_key_tweak:input_type -> spark_internal.DeliverSenderKeyTweakRequest
	24, // 75: spark_internal.SparkInternalService.initiate_cooperative_exit:input_type -> spark_internal.InitiateCooperativeExitRequest
	88, // 76: spark_internal.SparkInternalService.return_lightning_payment:input_type -> spark.ReturnLightningPaymentRequest
	26, // 77: spark_internal.SparkInternalService.start_token_transaction_internal:input_type -> spark_internal.StartTokenTransactionInternalRequest
	89, // 78: spark_internal.SparkInternalService.query_token_outputs_internal:input_type -> spark.QueryTokenOutputsRequest
	28, // 79: spark_internal.SparkInternalService.initiate_settle_receiver_key_tweak:input_type -> spark_internal.InitiateSettleReceiverKeyTweakRequest
	29, // 80: spark_internal.SparkInternalService.settle_receiver_key_tweak:input_type -> spark_internal.SettleReceiverKeyTweakRequest
	30, // 81: spark_internal.SparkInternalService.settle_sender_key_tweak:input_type -> spark_internal.SettleSenderKeyTweakRequest
	31, // 82: spark_internal.SparkInternalService.create_utxo_swap:input_type -> spark_internal.CreateUtxoSwapRequest
	34, // 83: spark_internal.SparkInternalService.create_static_deposit_utxo_swap:input_type -> spark_internal.CreateStaticDepositUtxoSwapRequest
	36, // 84: spark_internal.SparkInternalService.create_static_deposit_utxo_refund:input_type -> spark_internal.CreateStaticDepositUtxoRefundRequest
	38, // 85: spark_internal.SparkInternalService.rollback_utxo_swap:input_type -> spark_internal.RollbackUtxoSwapRequest
	40, // 86: spark_internal.SparkInternalService.utxo_swap_completed:input_type -> spark_internal.UtxoSwapCompletedRequest
	43, // 87: spark_internal.SparkInternalService.query_leaf_signing_pubkeys:input_type -> spark_internal.QueryLeafSigningPubkeysRequest
	45, // 88: spark_internal.SparkInternalService.resolve_leaf_investigation:input_type -> spark_internal.ResolveLeafInvestigationRequest
	48, // 89: spark_internal.SparkInternalService.fix_keyshare:input_type -> spark_internal.FixKeyshareRequest
	49, // 90: spark_internal.SparkInternalService.fix_keyshare_round1:input_type -> spark_internal.FixKeyshareRound1Request
	51, // 91: spark_internal.SparkInternalService.fix_keyshare_round2:input_type -> spark_internal.FixKeyshareRound2Request
	53, // 92: spark_internal.SparkInternalService.get_transfers:input_type -> spark_internal.GetTransfersRequest
	55, // 93: spark_internal.SparkInternalService.generate_static_deposit_address_proofs:input_type -> spark_internal.GenerateStaticDepositAddressProofsRequest
	90, // 94: spark_internal.SparkInternalService.mark_keyshares_as_used:output_type -> google.protobuf.Empty
	3,  // 95: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:output_type -> spark_internal.MarkKeyshareForDepositAddressResponse
	90, // 96: spark_internal.SparkInternalService.reserve_entity_dkg_key:output_type -> google.protobuf.Empty
	90, // 97: spark_internal.SparkInternalService.finalize_tree_creation:output_type -> google.protobuf.Empty
	5,  // 98: spark_internal.SparkInternalService.frost_round1:output_type -> spark_internal.FrostRound1Response
	8,  // 99: spark_internal.SparkInternalService.frost_round2:output_type -> spark_internal.FrostRound2Response
	90, // 100: spark_internal.SparkInternalService.finalize_transfer:output_type -> google.protobuf.Empty
	90, // 101: spark_internal.SparkInternalService.finalize_refresh_timelock:output_type -> google.protobuf.Empty
	90, // 102: spark_internal.SparkInternalService.finalize_extend_leaf:output_type -> google.protobuf.Empty
	90, // 103: spark_internal.SparkInternalService.finalize_renew_refund_timelock:output_type -> google.protobuf.Empty
	90, // 104: spark_internal.SparkInternalService.finalize_renew_node_timelock:output_type -> google.protobuf.Empty
	17, // 105: spark_internal.SparkInternalService.initiate_preimage_swap:output_type -> spark_internal.InitiatePreimageSwapResponse
	17, // 106: spark_internal.SparkInternalService.initiate_preimage_swap_v2:output_type -> spark_internal.InitiatePreimageSwapResponse
	90, // 107: spark_internal.SparkInternalService.provide_preimage:output_type -> google.protobuf.Empty
	90, // 108: spark_internal.SparkInternalService.update_preimage_request:output_type -> google.protobuf.Empty
	20, // 109: spark_internal.SparkInternalService.prepare_tree_address:output_type -> spark_internal.PrepareTreeAddressResponse
	90, // 110: spark_internal.SparkInternalService.initiate_transfer:output_type -> google.protobuf.Empty
	90, // 111: spark_internal.SparkInternalService.deliver_sender_key_tweak:output_type -> google.protobuf.Empty
	90, // 112: spark_internal.SparkInternalService.initiate_cooperative_exit:output_type -> google.protobuf.Empty
	90, // 113: spark_internal.SparkInternalService.return_lightning_payment:output_type -> google.protobuf.Empty
	90, // 114: spark_internal.SparkInternalService.start_token_transaction_internal:output_type -> google.protobuf.Empty
	91, // 115: spark_internal.SparkInternalService.query_token_outputs_internal:output_type -> spark.QueryTokenOutputsResponse
	90, // 116: spark_internal.SparkInternalService.initiate_settle_receiver_key_tweak:output_type -> google.protobuf.Empty
	90, // 117: spark_internal.SparkInternalService.settle_receiver_key_tweak:output_type -> google.protobuf.Empty
	90, // 118: spark_internal.SparkInternalService.settle_sender_key_tweak:output_type -> google.protobuf.Empty
	32, // 119: spark_internal.SparkInternalService.create_utxo_swap:output_type -> spark_internal.CreateUtxoSwapResponse
	35, // 120: spark_internal.SparkInternalService.create_static_deposit_utxo_swap:output_type -> spark_internal.CreateStaticDepositUtxoSwapResponse
	37, // 121: spark_internal.SparkInternalService.create_static_deposit_utxo_refund:output_type -> spark_internal.CreateStaticDepositUtxoRefundResponse
	39, // 122: spark_internal.SparkInternalService.rollback_utxo_swap:output_type -> spark_internal.RollbackUtxoSwapResponse
	41, // 123: spark_internal.SparkInternalService.utxo_swap_completed:output_type -> spark_internal.UtxoSwapCompletedResponse
	44, // 124: spark_internal.SparkInternalService.query_leaf_signing_pubkeys:output_type -> spark_internal.QueryLeafSigningPubkeysResponse
	90, // 125: spark_internal.SparkInternalService.resolve_leaf_investigation:output_type -> google.protobuf.Empty
	90, // 126: spark_internal.SparkInternalService.fix_keyshare:output_type -> google.protobuf.Empty
	50, // 127: spark_internal.SparkInternalService.fix_keyshare_round1:output_type -> spark_internal.FixKeyshareRound1Response
	52, // 128: spark_internal.SparkInternalService.fix_keyshare_round2:output_type -> spark_internal.FixKeyshareRound2Response
	54, // 129: spark_internal.SparkInternalService.get_transfers:output_type -> spark_internal.GetTransfersResponse
	56, // 130: spark_internal.SparkInternalService.generate_static_deposit_address_proofs:output_type -> spark_internal.GenerateStaticDepositAddressProofsResponse
	94, // [94:131] is the sub-list for method output_type
	57, // [57:94] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_spark_internal_proto_init() }
func file_spark_internal_proto_init() {
	if File_spark_internal_proto != nil {
		return
	}
	file_spark_internal_proto_msgTypes[1].OneofWrappers = []any{}
	file_spark_internal_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spark_internal_proto_rawDesc), len(file_spark_internal_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_internal_proto_goTypes,
		DependencyIndexes: file_spark_internal_proto_depIdxs,
		EnumInfos:         file_spark_internal_proto_enumTypes,
		MessageInfos:      file_spark_internal_proto_msgTypes,
	}.Build()
	File_spark_internal_proto = out.File
	file_spark_internal_proto_goTypes = nil
	file_spark_internal_proto_depIdxs = nil
}
