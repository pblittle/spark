// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: spark_internal.proto

package spark_internal

import (
	context "context"
	spark "github.com/lightsparkdev/spark/proto/spark"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkInternalService_MarkKeysharesAsUsed_FullMethodName                = "/spark_internal.SparkInternalService/mark_keyshares_as_used"
	SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName      = "/spark_internal.SparkInternalService/mark_keyshare_for_deposit_address"
	SparkInternalService_ReserveEntityDkgKey_FullMethodName                = "/spark_internal.SparkInternalService/reserve_entity_dkg_key"
	SparkInternalService_FinalizeTreeCreation_FullMethodName               = "/spark_internal.SparkInternalService/finalize_tree_creation"
	SparkInternalService_FrostRound1_FullMethodName                        = "/spark_internal.SparkInternalService/frost_round1"
	SparkInternalService_FrostRound2_FullMethodName                        = "/spark_internal.SparkInternalService/frost_round2"
	SparkInternalService_FinalizeTransfer_FullMethodName                   = "/spark_internal.SparkInternalService/finalize_transfer"
	SparkInternalService_FinalizeRefreshTimelock_FullMethodName            = "/spark_internal.SparkInternalService/finalize_refresh_timelock"
	SparkInternalService_FinalizeExtendLeaf_FullMethodName                 = "/spark_internal.SparkInternalService/finalize_extend_leaf"
	SparkInternalService_FinalizeRenewRefundTimelock_FullMethodName        = "/spark_internal.SparkInternalService/finalize_renew_refund_timelock"
	SparkInternalService_FinalizeRenewNodeTimelock_FullMethodName          = "/spark_internal.SparkInternalService/finalize_renew_node_timelock"
	SparkInternalService_InitiatePreimageSwap_FullMethodName               = "/spark_internal.SparkInternalService/initiate_preimage_swap"
	SparkInternalService_InitiatePreimageSwapV2_FullMethodName             = "/spark_internal.SparkInternalService/initiate_preimage_swap_v2"
	SparkInternalService_ProvidePreimage_FullMethodName                    = "/spark_internal.SparkInternalService/provide_preimage"
	SparkInternalService_UpdatePreimageRequest_FullMethodName              = "/spark_internal.SparkInternalService/update_preimage_request"
	SparkInternalService_PrepareTreeAddress_FullMethodName                 = "/spark_internal.SparkInternalService/prepare_tree_address"
	SparkInternalService_InitiateTransfer_FullMethodName                   = "/spark_internal.SparkInternalService/initiate_transfer"
	SparkInternalService_DeliverSenderKeyTweak_FullMethodName              = "/spark_internal.SparkInternalService/deliver_sender_key_tweak"
	SparkInternalService_InitiateCooperativeExit_FullMethodName            = "/spark_internal.SparkInternalService/initiate_cooperative_exit"
	SparkInternalService_ReturnLightningPayment_FullMethodName             = "/spark_internal.SparkInternalService/return_lightning_payment"
	SparkInternalService_StartTokenTransactionInternal_FullMethodName      = "/spark_internal.SparkInternalService/start_token_transaction_internal"
	SparkInternalService_QueryTokenOutputsInternal_FullMethodName          = "/spark_internal.SparkInternalService/query_token_outputs_internal"
	SparkInternalService_InitiateSettleReceiverKeyTweak_FullMethodName     = "/spark_internal.SparkInternalService/initiate_settle_receiver_key_tweak"
	SparkInternalService_SettleReceiverKeyTweak_FullMethodName             = "/spark_internal.SparkInternalService/settle_receiver_key_tweak"
	SparkInternalService_SettleSenderKeyTweak_FullMethodName               = "/spark_internal.SparkInternalService/settle_sender_key_tweak"
	SparkInternalService_CreateUtxoSwap_FullMethodName                     = "/spark_internal.SparkInternalService/create_utxo_swap"
	SparkInternalService_CreateStaticDepositUtxoSwap_FullMethodName        = "/spark_internal.SparkInternalService/create_static_deposit_utxo_swap"
	SparkInternalService_CreateStaticDepositUtxoRefund_FullMethodName      = "/spark_internal.SparkInternalService/create_static_deposit_utxo_refund"
	SparkInternalService_RollbackUtxoSwap_FullMethodName                   = "/spark_internal.SparkInternalService/rollback_utxo_swap"
	SparkInternalService_UtxoSwapCompleted_FullMethodName                  = "/spark_internal.SparkInternalService/utxo_swap_completed"
	SparkInternalService_QueryLeafSigningPubkeys_FullMethodName            = "/spark_internal.SparkInternalService/query_leaf_signing_pubkeys"
	SparkInternalService_ResolveLeafInvestigation_FullMethodName           = "/spark_internal.SparkInternalService/resolve_leaf_investigation"
	SparkInternalService_FixKeyshare_FullMethodName                        = "/spark_internal.SparkInternalService/fix_keyshare"
	SparkInternalService_FixKeyshareRound1_FullMethodName                  = "/spark_internal.SparkInternalService/fix_keyshare_round1"
	SparkInternalService_FixKeyshareRound2_FullMethodName                  = "/spark_internal.SparkInternalService/fix_keyshare_round2"
	SparkInternalService_GetTransfers_FullMethodName                       = "/spark_internal.SparkInternalService/get_transfers"
	SparkInternalService_GenerateStaticDepositAddressProofs_FullMethodName = "/spark_internal.SparkInternalService/generate_static_deposit_address_proofs"
)

// SparkInternalServiceClient is the client API for SparkInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkInternalServiceClient interface {
	MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*MarkKeyshareForDepositAddressResponse, error)
	ReserveEntityDkgKey(ctx context.Context, in *ReserveEntityDkgKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeTreeCreation(ctx context.Context, in *FinalizeTreeCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error)
	FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error)
	FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeRefreshTimelock(ctx context.Context, in *FinalizeRefreshTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeExtendLeaf(ctx context.Context, in *FinalizeExtendLeafRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeRenewRefundTimelock(ctx context.Context, in *FinalizeRenewRefundTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeRenewNodeTimelock(ctx context.Context, in *FinalizeRenewNodeTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitiatePreimageSwap(ctx context.Context, in *spark.InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error)
	InitiatePreimageSwapV2(ctx context.Context, in *InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error)
	ProvidePreimage(ctx context.Context, in *ProvidePreimageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePreimageRequest(ctx context.Context, in *UpdatePreimageRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error)
	InitiateTransfer(ctx context.Context, in *InitiateTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeliverSenderKeyTweak(ctx context.Context, in *DeliverSenderKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitiateCooperativeExit(ctx context.Context, in *InitiateCooperativeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReturnLightningPayment(ctx context.Context, in *spark.ReturnLightningPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartTokenTransactionInternal(ctx context.Context, in *StartTokenTransactionInternalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryTokenOutputsInternal(ctx context.Context, in *spark.QueryTokenOutputsRequest, opts ...grpc.CallOption) (*spark.QueryTokenOutputsResponse, error)
	InitiateSettleReceiverKeyTweak(ctx context.Context, in *InitiateSettleReceiverKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SettleReceiverKeyTweak(ctx context.Context, in *SettleReceiverKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SettleSenderKeyTweak(ctx context.Context, in *SettleSenderKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use create_static_deposit_utxo_swap() instead.
	CreateUtxoSwap(ctx context.Context, in *CreateUtxoSwapRequest, opts ...grpc.CallOption) (*CreateUtxoSwapResponse, error)
	// Create UTXO swap record to claim UTXO by SSP in the static deposit flow
	CreateStaticDepositUtxoSwap(ctx context.Context, in *CreateStaticDepositUtxoSwapRequest, opts ...grpc.CallOption) (*CreateStaticDepositUtxoSwapResponse, error)
	// Create UTXO swap record to refund UTXO to the user in the static deposit flow
	CreateStaticDepositUtxoRefund(ctx context.Context, in *CreateStaticDepositUtxoRefundRequest, opts ...grpc.CallOption) (*CreateStaticDepositUtxoRefundResponse, error)
	// Internal method to cancel a swap for other SOs if one of them failed to ack it
	RollbackUtxoSwap(ctx context.Context, in *RollbackUtxoSwapRequest, opts ...grpc.CallOption) (*RollbackUtxoSwapResponse, error)
	// Internal method to mark a swap as COMPLETE in all SOs
	UtxoSwapCompleted(ctx context.Context, in *UtxoSwapCompletedRequest, opts ...grpc.CallOption) (*UtxoSwapCompletedResponse, error)
	QueryLeafSigningPubkeys(ctx context.Context, in *QueryLeafSigningPubkeysRequest, opts ...grpc.CallOption) (*QueryLeafSigningPubkeysResponse, error)
	ResolveLeafInvestigation(ctx context.Context, in *ResolveLeafInvestigationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FixKeyshare(ctx context.Context, in *FixKeyshareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FixKeyshareRound1(ctx context.Context, in *FixKeyshareRound1Request, opts ...grpc.CallOption) (*FixKeyshareRound1Response, error)
	FixKeyshareRound2(ctx context.Context, in *FixKeyshareRound2Request, opts ...grpc.CallOption) (*FixKeyshareRound2Response, error)
	GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error)
	// Generate proofs of possession for a static deposit address.
	// The client can use them to validate that all SOs know about this address.
	// The coordinator can use them to validate if an address was created correctly.
	GenerateStaticDepositAddressProofs(ctx context.Context, in *GenerateStaticDepositAddressProofsRequest, opts ...grpc.CallOption) (*GenerateStaticDepositAddressProofsResponse, error)
}

type sparkInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkInternalServiceClient(cc grpc.ClientConnInterface) SparkInternalServiceClient {
	return &sparkInternalServiceClient{cc}
}

func (c *sparkInternalServiceClient) MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeysharesAsUsed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*MarkKeyshareForDepositAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkKeyshareForDepositAddressResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) ReserveEntityDkgKey(ctx context.Context, in *ReserveEntityDkgKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_ReserveEntityDkgKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeTreeCreation(ctx context.Context, in *FinalizeTreeCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound1Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound2Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeRefreshTimelock(ctx context.Context, in *FinalizeRefreshTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeRefreshTimelock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeExtendLeaf(ctx context.Context, in *FinalizeExtendLeafRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeExtendLeaf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeRenewRefundTimelock(ctx context.Context, in *FinalizeRenewRefundTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeRenewRefundTimelock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeRenewNodeTimelock(ctx context.Context, in *FinalizeRenewNodeTimelockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeRenewNodeTimelock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiatePreimageSwap(ctx context.Context, in *spark.InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePreimageSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiatePreimageSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiatePreimageSwapV2(ctx context.Context, in *InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePreimageSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiatePreimageSwapV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) ProvidePreimage(ctx context.Context, in *ProvidePreimageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_ProvidePreimage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) UpdatePreimageRequest(ctx context.Context, in *UpdatePreimageRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_UpdatePreimageRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTreeAddressResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_PrepareTreeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiateTransfer(ctx context.Context, in *InitiateTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) DeliverSenderKeyTweak(ctx context.Context, in *DeliverSenderKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_DeliverSenderKeyTweak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiateCooperativeExit(ctx context.Context, in *InitiateCooperativeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiateCooperativeExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) ReturnLightningPayment(ctx context.Context, in *spark.ReturnLightningPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_ReturnLightningPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) StartTokenTransactionInternal(ctx context.Context, in *StartTokenTransactionInternalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_StartTokenTransactionInternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) QueryTokenOutputsInternal(ctx context.Context, in *spark.QueryTokenOutputsRequest, opts ...grpc.CallOption) (*spark.QueryTokenOutputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(spark.QueryTokenOutputsResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_QueryTokenOutputsInternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiateSettleReceiverKeyTweak(ctx context.Context, in *InitiateSettleReceiverKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiateSettleReceiverKeyTweak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) SettleReceiverKeyTweak(ctx context.Context, in *SettleReceiverKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_SettleReceiverKeyTweak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) SettleSenderKeyTweak(ctx context.Context, in *SettleSenderKeyTweakRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_SettleSenderKeyTweak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sparkInternalServiceClient) CreateUtxoSwap(ctx context.Context, in *CreateUtxoSwapRequest, opts ...grpc.CallOption) (*CreateUtxoSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUtxoSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_CreateUtxoSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) CreateStaticDepositUtxoSwap(ctx context.Context, in *CreateStaticDepositUtxoSwapRequest, opts ...grpc.CallOption) (*CreateStaticDepositUtxoSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStaticDepositUtxoSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_CreateStaticDepositUtxoSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) CreateStaticDepositUtxoRefund(ctx context.Context, in *CreateStaticDepositUtxoRefundRequest, opts ...grpc.CallOption) (*CreateStaticDepositUtxoRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStaticDepositUtxoRefundResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_CreateStaticDepositUtxoRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) RollbackUtxoSwap(ctx context.Context, in *RollbackUtxoSwapRequest, opts ...grpc.CallOption) (*RollbackUtxoSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackUtxoSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_RollbackUtxoSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) UtxoSwapCompleted(ctx context.Context, in *UtxoSwapCompletedRequest, opts ...grpc.CallOption) (*UtxoSwapCompletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UtxoSwapCompletedResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_UtxoSwapCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) QueryLeafSigningPubkeys(ctx context.Context, in *QueryLeafSigningPubkeysRequest, opts ...grpc.CallOption) (*QueryLeafSigningPubkeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryLeafSigningPubkeysResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_QueryLeafSigningPubkeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) ResolveLeafInvestigation(ctx context.Context, in *ResolveLeafInvestigationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_ResolveLeafInvestigation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FixKeyshare(ctx context.Context, in *FixKeyshareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FixKeyshare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FixKeyshareRound1(ctx context.Context, in *FixKeyshareRound1Request, opts ...grpc.CallOption) (*FixKeyshareRound1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FixKeyshareRound1Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FixKeyshareRound1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FixKeyshareRound2(ctx context.Context, in *FixKeyshareRound2Request, opts ...grpc.CallOption) (*FixKeyshareRound2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FixKeyshareRound2Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FixKeyshareRound2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransfersResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_GetTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) GenerateStaticDepositAddressProofs(ctx context.Context, in *GenerateStaticDepositAddressProofsRequest, opts ...grpc.CallOption) (*GenerateStaticDepositAddressProofsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateStaticDepositAddressProofsResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_GenerateStaticDepositAddressProofs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkInternalServiceServer is the server API for SparkInternalService service.
// All implementations must embed UnimplementedSparkInternalServiceServer
// for forward compatibility.
type SparkInternalServiceServer interface {
	MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*MarkKeyshareForDepositAddressResponse, error)
	ReserveEntityDkgKey(context.Context, *ReserveEntityDkgKeyRequest) (*emptypb.Empty, error)
	FinalizeTreeCreation(context.Context, *FinalizeTreeCreationRequest) (*emptypb.Empty, error)
	FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error)
	FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error)
	FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*emptypb.Empty, error)
	FinalizeRefreshTimelock(context.Context, *FinalizeRefreshTimelockRequest) (*emptypb.Empty, error)
	FinalizeExtendLeaf(context.Context, *FinalizeExtendLeafRequest) (*emptypb.Empty, error)
	FinalizeRenewRefundTimelock(context.Context, *FinalizeRenewRefundTimelockRequest) (*emptypb.Empty, error)
	FinalizeRenewNodeTimelock(context.Context, *FinalizeRenewNodeTimelockRequest) (*emptypb.Empty, error)
	InitiatePreimageSwap(context.Context, *spark.InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error)
	InitiatePreimageSwapV2(context.Context, *InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error)
	ProvidePreimage(context.Context, *ProvidePreimageRequest) (*emptypb.Empty, error)
	UpdatePreimageRequest(context.Context, *UpdatePreimageRequestRequest) (*emptypb.Empty, error)
	PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error)
	InitiateTransfer(context.Context, *InitiateTransferRequest) (*emptypb.Empty, error)
	DeliverSenderKeyTweak(context.Context, *DeliverSenderKeyTweakRequest) (*emptypb.Empty, error)
	InitiateCooperativeExit(context.Context, *InitiateCooperativeExitRequest) (*emptypb.Empty, error)
	ReturnLightningPayment(context.Context, *spark.ReturnLightningPaymentRequest) (*emptypb.Empty, error)
	StartTokenTransactionInternal(context.Context, *StartTokenTransactionInternalRequest) (*emptypb.Empty, error)
	QueryTokenOutputsInternal(context.Context, *spark.QueryTokenOutputsRequest) (*spark.QueryTokenOutputsResponse, error)
	InitiateSettleReceiverKeyTweak(context.Context, *InitiateSettleReceiverKeyTweakRequest) (*emptypb.Empty, error)
	SettleReceiverKeyTweak(context.Context, *SettleReceiverKeyTweakRequest) (*emptypb.Empty, error)
	SettleSenderKeyTweak(context.Context, *SettleSenderKeyTweakRequest) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// DEPRECATED: Use create_static_deposit_utxo_swap() instead.
	CreateUtxoSwap(context.Context, *CreateUtxoSwapRequest) (*CreateUtxoSwapResponse, error)
	// Create UTXO swap record to claim UTXO by SSP in the static deposit flow
	CreateStaticDepositUtxoSwap(context.Context, *CreateStaticDepositUtxoSwapRequest) (*CreateStaticDepositUtxoSwapResponse, error)
	// Create UTXO swap record to refund UTXO to the user in the static deposit flow
	CreateStaticDepositUtxoRefund(context.Context, *CreateStaticDepositUtxoRefundRequest) (*CreateStaticDepositUtxoRefundResponse, error)
	// Internal method to cancel a swap for other SOs if one of them failed to ack it
	RollbackUtxoSwap(context.Context, *RollbackUtxoSwapRequest) (*RollbackUtxoSwapResponse, error)
	// Internal method to mark a swap as COMPLETE in all SOs
	UtxoSwapCompleted(context.Context, *UtxoSwapCompletedRequest) (*UtxoSwapCompletedResponse, error)
	QueryLeafSigningPubkeys(context.Context, *QueryLeafSigningPubkeysRequest) (*QueryLeafSigningPubkeysResponse, error)
	ResolveLeafInvestigation(context.Context, *ResolveLeafInvestigationRequest) (*emptypb.Empty, error)
	FixKeyshare(context.Context, *FixKeyshareRequest) (*emptypb.Empty, error)
	FixKeyshareRound1(context.Context, *FixKeyshareRound1Request) (*FixKeyshareRound1Response, error)
	FixKeyshareRound2(context.Context, *FixKeyshareRound2Request) (*FixKeyshareRound2Response, error)
	GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error)
	// Generate proofs of possession for a static deposit address.
	// The client can use them to validate that all SOs know about this address.
	// The coordinator can use them to validate if an address was created correctly.
	GenerateStaticDepositAddressProofs(context.Context, *GenerateStaticDepositAddressProofsRequest) (*GenerateStaticDepositAddressProofsResponse, error)
	mustEmbedUnimplementedSparkInternalServiceServer()
}

// UnimplementedSparkInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkInternalServiceServer struct{}

func (UnimplementedSparkInternalServiceServer) MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeysharesAsUsed not implemented")
}
func (UnimplementedSparkInternalServiceServer) MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*MarkKeyshareForDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeyshareForDepositAddress not implemented")
}
func (UnimplementedSparkInternalServiceServer) ReserveEntityDkgKey(context.Context, *ReserveEntityDkgKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveEntityDkgKey not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeTreeCreation(context.Context, *FinalizeTreeCreationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTreeCreation not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound1 not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound2 not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTransfer not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeRefreshTimelock(context.Context, *FinalizeRefreshTimelockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeRefreshTimelock not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeExtendLeaf(context.Context, *FinalizeExtendLeafRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeExtendLeaf not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeRenewRefundTimelock(context.Context, *FinalizeRenewRefundTimelockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeRenewRefundTimelock not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeRenewNodeTimelock(context.Context, *FinalizeRenewNodeTimelockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeRenewNodeTimelock not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiatePreimageSwap(context.Context, *spark.InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePreimageSwap not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiatePreimageSwapV2(context.Context, *InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePreimageSwapV2 not implemented")
}
func (UnimplementedSparkInternalServiceServer) ProvidePreimage(context.Context, *ProvidePreimageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvidePreimage not implemented")
}
func (UnimplementedSparkInternalServiceServer) UpdatePreimageRequest(context.Context, *UpdatePreimageRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreimageRequest not implemented")
}
func (UnimplementedSparkInternalServiceServer) PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTreeAddress not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiateTransfer(context.Context, *InitiateTransferRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTransfer not implemented")
}
func (UnimplementedSparkInternalServiceServer) DeliverSenderKeyTweak(context.Context, *DeliverSenderKeyTweakRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverSenderKeyTweak not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiateCooperativeExit(context.Context, *InitiateCooperativeExitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCooperativeExit not implemented")
}
func (UnimplementedSparkInternalServiceServer) ReturnLightningPayment(context.Context, *spark.ReturnLightningPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnLightningPayment not implemented")
}
func (UnimplementedSparkInternalServiceServer) StartTokenTransactionInternal(context.Context, *StartTokenTransactionInternalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTokenTransactionInternal not implemented")
}
func (UnimplementedSparkInternalServiceServer) QueryTokenOutputsInternal(context.Context, *spark.QueryTokenOutputsRequest) (*spark.QueryTokenOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenOutputsInternal not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiateSettleReceiverKeyTweak(context.Context, *InitiateSettleReceiverKeyTweakRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSettleReceiverKeyTweak not implemented")
}
func (UnimplementedSparkInternalServiceServer) SettleReceiverKeyTweak(context.Context, *SettleReceiverKeyTweakRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleReceiverKeyTweak not implemented")
}
func (UnimplementedSparkInternalServiceServer) SettleSenderKeyTweak(context.Context, *SettleSenderKeyTweakRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleSenderKeyTweak not implemented")
}
func (UnimplementedSparkInternalServiceServer) CreateUtxoSwap(context.Context, *CreateUtxoSwapRequest) (*CreateUtxoSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUtxoSwap not implemented")
}
func (UnimplementedSparkInternalServiceServer) CreateStaticDepositUtxoSwap(context.Context, *CreateStaticDepositUtxoSwapRequest) (*CreateStaticDepositUtxoSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticDepositUtxoSwap not implemented")
}
func (UnimplementedSparkInternalServiceServer) CreateStaticDepositUtxoRefund(context.Context, *CreateStaticDepositUtxoRefundRequest) (*CreateStaticDepositUtxoRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticDepositUtxoRefund not implemented")
}
func (UnimplementedSparkInternalServiceServer) RollbackUtxoSwap(context.Context, *RollbackUtxoSwapRequest) (*RollbackUtxoSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackUtxoSwap not implemented")
}
func (UnimplementedSparkInternalServiceServer) UtxoSwapCompleted(context.Context, *UtxoSwapCompletedRequest) (*UtxoSwapCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UtxoSwapCompleted not implemented")
}
func (UnimplementedSparkInternalServiceServer) QueryLeafSigningPubkeys(context.Context, *QueryLeafSigningPubkeysRequest) (*QueryLeafSigningPubkeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLeafSigningPubkeys not implemented")
}
func (UnimplementedSparkInternalServiceServer) ResolveLeafInvestigation(context.Context, *ResolveLeafInvestigationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveLeafInvestigation not implemented")
}
func (UnimplementedSparkInternalServiceServer) FixKeyshare(context.Context, *FixKeyshareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixKeyshare not implemented")
}
func (UnimplementedSparkInternalServiceServer) FixKeyshareRound1(context.Context, *FixKeyshareRound1Request) (*FixKeyshareRound1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixKeyshareRound1 not implemented")
}
func (UnimplementedSparkInternalServiceServer) FixKeyshareRound2(context.Context, *FixKeyshareRound2Request) (*FixKeyshareRound2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixKeyshareRound2 not implemented")
}
func (UnimplementedSparkInternalServiceServer) GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (UnimplementedSparkInternalServiceServer) GenerateStaticDepositAddressProofs(context.Context, *GenerateStaticDepositAddressProofsRequest) (*GenerateStaticDepositAddressProofsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStaticDepositAddressProofs not implemented")
}
func (UnimplementedSparkInternalServiceServer) mustEmbedUnimplementedSparkInternalServiceServer() {}
func (UnimplementedSparkInternalServiceServer) testEmbeddedByValue()                              {}

// UnsafeSparkInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkInternalServiceServer will
// result in compilation errors.
type UnsafeSparkInternalServiceServer interface {
	mustEmbedUnimplementedSparkInternalServiceServer()
}

func RegisterSparkInternalServiceServer(s grpc.ServiceRegistrar, srv SparkInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkInternalService_ServiceDesc, srv)
}

func _SparkInternalService_MarkKeysharesAsUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeysharesAsUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeysharesAsUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, req.(*MarkKeysharesAsUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_MarkKeyshareForDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeyshareForDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, req.(*MarkKeyshareForDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_ReserveEntityDkgKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveEntityDkgKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).ReserveEntityDkgKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_ReserveEntityDkgKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).ReserveEntityDkgKey(ctx, req.(*ReserveEntityDkgKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeTreeCreation(ctx, req.(*FinalizeTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, req.(*FrostRound1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, req.(*FrostRound2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeTransfer(ctx, req.(*FinalizeTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeRefreshTimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRefreshTimelockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeRefreshTimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeRefreshTimelock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeRefreshTimelock(ctx, req.(*FinalizeRefreshTimelockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeExtendLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeExtendLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeExtendLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeExtendLeaf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeExtendLeaf(ctx, req.(*FinalizeExtendLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeRenewRefundTimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRenewRefundTimelockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeRenewRefundTimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeRenewRefundTimelock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeRenewRefundTimelock(ctx, req.(*FinalizeRenewRefundTimelockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeRenewNodeTimelock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRenewNodeTimelockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeRenewNodeTimelock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeRenewNodeTimelock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeRenewNodeTimelock(ctx, req.(*FinalizeRenewNodeTimelockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiatePreimageSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.InitiatePreimageSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiatePreimageSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwap(ctx, req.(*spark.InitiatePreimageSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiatePreimageSwapV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePreimageSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwapV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiatePreimageSwapV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwapV2(ctx, req.(*InitiatePreimageSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_ProvidePreimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvidePreimageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).ProvidePreimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_ProvidePreimage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).ProvidePreimage(ctx, req.(*ProvidePreimageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_UpdatePreimageRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreimageRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).UpdatePreimageRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_UpdatePreimageRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).UpdatePreimageRequest(ctx, req.(*UpdatePreimageRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_PrepareTreeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTreeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).PrepareTreeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_PrepareTreeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).PrepareTreeAddress(ctx, req.(*PrepareTreeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiateTransfer(ctx, req.(*InitiateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_DeliverSenderKeyTweak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverSenderKeyTweakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).DeliverSenderKeyTweak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_DeliverSenderKeyTweak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).DeliverSenderKeyTweak(ctx, req.(*DeliverSenderKeyTweakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiateCooperativeExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCooperativeExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiateCooperativeExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiateCooperativeExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiateCooperativeExit(ctx, req.(*InitiateCooperativeExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_ReturnLightningPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.ReturnLightningPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).ReturnLightningPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_ReturnLightningPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).ReturnLightningPayment(ctx, req.(*spark.ReturnLightningPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_StartTokenTransactionInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTokenTransactionInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).StartTokenTransactionInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_StartTokenTransactionInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).StartTokenTransactionInternal(ctx, req.(*StartTokenTransactionInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_QueryTokenOutputsInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.QueryTokenOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).QueryTokenOutputsInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_QueryTokenOutputsInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).QueryTokenOutputsInternal(ctx, req.(*spark.QueryTokenOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiateSettleReceiverKeyTweak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSettleReceiverKeyTweakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiateSettleReceiverKeyTweak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiateSettleReceiverKeyTweak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiateSettleReceiverKeyTweak(ctx, req.(*InitiateSettleReceiverKeyTweakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_SettleReceiverKeyTweak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleReceiverKeyTweakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).SettleReceiverKeyTweak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_SettleReceiverKeyTweak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).SettleReceiverKeyTweak(ctx, req.(*SettleReceiverKeyTweakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_SettleSenderKeyTweak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleSenderKeyTweakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).SettleSenderKeyTweak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_SettleSenderKeyTweak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).SettleSenderKeyTweak(ctx, req.(*SettleSenderKeyTweakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_CreateUtxoSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUtxoSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).CreateUtxoSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_CreateUtxoSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).CreateUtxoSwap(ctx, req.(*CreateUtxoSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_CreateStaticDepositUtxoSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticDepositUtxoSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).CreateStaticDepositUtxoSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_CreateStaticDepositUtxoSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).CreateStaticDepositUtxoSwap(ctx, req.(*CreateStaticDepositUtxoSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_CreateStaticDepositUtxoRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticDepositUtxoRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).CreateStaticDepositUtxoRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_CreateStaticDepositUtxoRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).CreateStaticDepositUtxoRefund(ctx, req.(*CreateStaticDepositUtxoRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_RollbackUtxoSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackUtxoSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).RollbackUtxoSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_RollbackUtxoSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).RollbackUtxoSwap(ctx, req.(*RollbackUtxoSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_UtxoSwapCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoSwapCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).UtxoSwapCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_UtxoSwapCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).UtxoSwapCompleted(ctx, req.(*UtxoSwapCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_QueryLeafSigningPubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLeafSigningPubkeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).QueryLeafSigningPubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_QueryLeafSigningPubkeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).QueryLeafSigningPubkeys(ctx, req.(*QueryLeafSigningPubkeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_ResolveLeafInvestigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveLeafInvestigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).ResolveLeafInvestigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_ResolveLeafInvestigation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).ResolveLeafInvestigation(ctx, req.(*ResolveLeafInvestigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FixKeyshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixKeyshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FixKeyshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FixKeyshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FixKeyshare(ctx, req.(*FixKeyshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FixKeyshareRound1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixKeyshareRound1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FixKeyshareRound1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FixKeyshareRound1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FixKeyshareRound1(ctx, req.(*FixKeyshareRound1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FixKeyshareRound2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixKeyshareRound2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FixKeyshareRound2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FixKeyshareRound2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FixKeyshareRound2(ctx, req.(*FixKeyshareRound2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_GetTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).GetTransfers(ctx, req.(*GetTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_GenerateStaticDepositAddressProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStaticDepositAddressProofsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).GenerateStaticDepositAddressProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_GenerateStaticDepositAddressProofs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).GenerateStaticDepositAddressProofs(ctx, req.(*GenerateStaticDepositAddressProofsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkInternalService_ServiceDesc is the grpc.ServiceDesc for SparkInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark_internal.SparkInternalService",
	HandlerType: (*SparkInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mark_keyshares_as_used",
			Handler:    _SparkInternalService_MarkKeysharesAsUsed_Handler,
		},
		{
			MethodName: "mark_keyshare_for_deposit_address",
			Handler:    _SparkInternalService_MarkKeyshareForDepositAddress_Handler,
		},
		{
			MethodName: "reserve_entity_dkg_key",
			Handler:    _SparkInternalService_ReserveEntityDkgKey_Handler,
		},
		{
			MethodName: "finalize_tree_creation",
			Handler:    _SparkInternalService_FinalizeTreeCreation_Handler,
		},
		{
			MethodName: "frost_round1",
			Handler:    _SparkInternalService_FrostRound1_Handler,
		},
		{
			MethodName: "frost_round2",
			Handler:    _SparkInternalService_FrostRound2_Handler,
		},
		{
			MethodName: "finalize_transfer",
			Handler:    _SparkInternalService_FinalizeTransfer_Handler,
		},
		{
			MethodName: "finalize_refresh_timelock",
			Handler:    _SparkInternalService_FinalizeRefreshTimelock_Handler,
		},
		{
			MethodName: "finalize_extend_leaf",
			Handler:    _SparkInternalService_FinalizeExtendLeaf_Handler,
		},
		{
			MethodName: "finalize_renew_refund_timelock",
			Handler:    _SparkInternalService_FinalizeRenewRefundTimelock_Handler,
		},
		{
			MethodName: "finalize_renew_node_timelock",
			Handler:    _SparkInternalService_FinalizeRenewNodeTimelock_Handler,
		},
		{
			MethodName: "initiate_preimage_swap",
			Handler:    _SparkInternalService_InitiatePreimageSwap_Handler,
		},
		{
			MethodName: "initiate_preimage_swap_v2",
			Handler:    _SparkInternalService_InitiatePreimageSwapV2_Handler,
		},
		{
			MethodName: "provide_preimage",
			Handler:    _SparkInternalService_ProvidePreimage_Handler,
		},
		{
			MethodName: "update_preimage_request",
			Handler:    _SparkInternalService_UpdatePreimageRequest_Handler,
		},
		{
			MethodName: "prepare_tree_address",
			Handler:    _SparkInternalService_PrepareTreeAddress_Handler,
		},
		{
			MethodName: "initiate_transfer",
			Handler:    _SparkInternalService_InitiateTransfer_Handler,
		},
		{
			MethodName: "deliver_sender_key_tweak",
			Handler:    _SparkInternalService_DeliverSenderKeyTweak_Handler,
		},
		{
			MethodName: "initiate_cooperative_exit",
			Handler:    _SparkInternalService_InitiateCooperativeExit_Handler,
		},
		{
			MethodName: "return_lightning_payment",
			Handler:    _SparkInternalService_ReturnLightningPayment_Handler,
		},
		{
			MethodName: "start_token_transaction_internal",
			Handler:    _SparkInternalService_StartTokenTransactionInternal_Handler,
		},
		{
			MethodName: "query_token_outputs_internal",
			Handler:    _SparkInternalService_QueryTokenOutputsInternal_Handler,
		},
		{
			MethodName: "initiate_settle_receiver_key_tweak",
			Handler:    _SparkInternalService_InitiateSettleReceiverKeyTweak_Handler,
		},
		{
			MethodName: "settle_receiver_key_tweak",
			Handler:    _SparkInternalService_SettleReceiverKeyTweak_Handler,
		},
		{
			MethodName: "settle_sender_key_tweak",
			Handler:    _SparkInternalService_SettleSenderKeyTweak_Handler,
		},
		{
			MethodName: "create_utxo_swap",
			Handler:    _SparkInternalService_CreateUtxoSwap_Handler,
		},
		{
			MethodName: "create_static_deposit_utxo_swap",
			Handler:    _SparkInternalService_CreateStaticDepositUtxoSwap_Handler,
		},
		{
			MethodName: "create_static_deposit_utxo_refund",
			Handler:    _SparkInternalService_CreateStaticDepositUtxoRefund_Handler,
		},
		{
			MethodName: "rollback_utxo_swap",
			Handler:    _SparkInternalService_RollbackUtxoSwap_Handler,
		},
		{
			MethodName: "utxo_swap_completed",
			Handler:    _SparkInternalService_UtxoSwapCompleted_Handler,
		},
		{
			MethodName: "query_leaf_signing_pubkeys",
			Handler:    _SparkInternalService_QueryLeafSigningPubkeys_Handler,
		},
		{
			MethodName: "resolve_leaf_investigation",
			Handler:    _SparkInternalService_ResolveLeafInvestigation_Handler,
		},
		{
			MethodName: "fix_keyshare",
			Handler:    _SparkInternalService_FixKeyshare_Handler,
		},
		{
			MethodName: "fix_keyshare_round1",
			Handler:    _SparkInternalService_FixKeyshareRound1_Handler,
		},
		{
			MethodName: "fix_keyshare_round2",
			Handler:    _SparkInternalService_FixKeyshareRound2_Handler,
		},
		{
			MethodName: "get_transfers",
			Handler:    _SparkInternalService_GetTransfers_Handler,
		},
		{
			MethodName: "generate_static_deposit_address_proofs",
			Handler:    _SparkInternalService_GenerateStaticDepositAddressProofs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark_internal.proto",
}
