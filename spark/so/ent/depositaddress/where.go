// Code generated by ent, DO NOT EDIT.

package depositaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/common/keys"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldUpdateTime, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldAddress, v))
}

// OwnerIdentityPubkey applies equality check predicate on the "owner_identity_pubkey" field. It's identical to OwnerIdentityPubkeyEQ.
func OwnerIdentityPubkey(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkey applies equality check predicate on the "owner_signing_pubkey" field. It's identical to OwnerSigningPubkeyEQ.
func OwnerSigningPubkey(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// ConfirmationHeight applies equality check predicate on the "confirmation_height" field. It's identical to ConfirmationHeightEQ.
func ConfirmationHeight(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldConfirmationHeight, v))
}

// ConfirmationTxid applies equality check predicate on the "confirmation_txid" field. It's identical to ConfirmationTxidEQ.
func ConfirmationTxid(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldConfirmationTxid, v))
}

// PossessionSignature applies equality check predicate on the "possession_signature" field. It's identical to PossessionSignatureEQ.
func PossessionSignature(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldPossessionSignature, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldNodeID, v))
}

// IsStatic applies equality check predicate on the "is_static" field. It's identical to IsStaticEQ.
func IsStatic(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldIsStatic, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldIsDefault, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldUpdateTime, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldContainsFold(FieldAddress, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v schematype.Network) predicate.DepositAddress {
	vc := v
	return predicate.DepositAddress(sql.FieldEQ(FieldNetwork, vc))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v schematype.Network) predicate.DepositAddress {
	vc := v
	return predicate.DepositAddress(sql.FieldNEQ(FieldNetwork, vc))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...schematype.Network) predicate.DepositAddress {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DepositAddress(sql.FieldIn(FieldNetwork, v...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...schematype.Network) predicate.DepositAddress {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DepositAddress(sql.FieldNotIn(FieldNetwork, v...))
}

// NetworkIsNil applies the IsNil predicate on the "network" field.
func NetworkIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldNetwork))
}

// NetworkNotNil applies the NotNil predicate on the "network" field.
func NetworkNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldNetwork))
}

// OwnerIdentityPubkeyEQ applies the EQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyEQ(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyNEQ applies the NEQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNEQ(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyIn applies the In predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyIn(vs ...keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyNotIn applies the NotIn predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNotIn(vs ...keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyGT applies the GT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGT(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyGTE applies the GTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGTE(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLT applies the LT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLT(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLTE applies the LTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLTE(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkeyEQ applies the EQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyEQ(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyNEQ applies the NEQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNEQ(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyIn applies the In predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyIn(vs ...keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyNotIn applies the NotIn predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNotIn(vs ...keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyGT applies the GT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGT(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyGTE applies the GTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGTE(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLT applies the LT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLT(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLTE applies the LTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLTE(v keys.Public) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldOwnerSigningPubkey, v))
}

// ConfirmationHeightEQ applies the EQ predicate on the "confirmation_height" field.
func ConfirmationHeightEQ(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldConfirmationHeight, v))
}

// ConfirmationHeightNEQ applies the NEQ predicate on the "confirmation_height" field.
func ConfirmationHeightNEQ(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldConfirmationHeight, v))
}

// ConfirmationHeightIn applies the In predicate on the "confirmation_height" field.
func ConfirmationHeightIn(vs ...int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldConfirmationHeight, vs...))
}

// ConfirmationHeightNotIn applies the NotIn predicate on the "confirmation_height" field.
func ConfirmationHeightNotIn(vs ...int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldConfirmationHeight, vs...))
}

// ConfirmationHeightGT applies the GT predicate on the "confirmation_height" field.
func ConfirmationHeightGT(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldConfirmationHeight, v))
}

// ConfirmationHeightGTE applies the GTE predicate on the "confirmation_height" field.
func ConfirmationHeightGTE(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldConfirmationHeight, v))
}

// ConfirmationHeightLT applies the LT predicate on the "confirmation_height" field.
func ConfirmationHeightLT(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldConfirmationHeight, v))
}

// ConfirmationHeightLTE applies the LTE predicate on the "confirmation_height" field.
func ConfirmationHeightLTE(v int64) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldConfirmationHeight, v))
}

// ConfirmationHeightIsNil applies the IsNil predicate on the "confirmation_height" field.
func ConfirmationHeightIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldConfirmationHeight))
}

// ConfirmationHeightNotNil applies the NotNil predicate on the "confirmation_height" field.
func ConfirmationHeightNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldConfirmationHeight))
}

// ConfirmationTxidEQ applies the EQ predicate on the "confirmation_txid" field.
func ConfirmationTxidEQ(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldConfirmationTxid, v))
}

// ConfirmationTxidNEQ applies the NEQ predicate on the "confirmation_txid" field.
func ConfirmationTxidNEQ(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldConfirmationTxid, v))
}

// ConfirmationTxidIn applies the In predicate on the "confirmation_txid" field.
func ConfirmationTxidIn(vs ...string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldConfirmationTxid, vs...))
}

// ConfirmationTxidNotIn applies the NotIn predicate on the "confirmation_txid" field.
func ConfirmationTxidNotIn(vs ...string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldConfirmationTxid, vs...))
}

// ConfirmationTxidGT applies the GT predicate on the "confirmation_txid" field.
func ConfirmationTxidGT(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldConfirmationTxid, v))
}

// ConfirmationTxidGTE applies the GTE predicate on the "confirmation_txid" field.
func ConfirmationTxidGTE(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldConfirmationTxid, v))
}

// ConfirmationTxidLT applies the LT predicate on the "confirmation_txid" field.
func ConfirmationTxidLT(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldConfirmationTxid, v))
}

// ConfirmationTxidLTE applies the LTE predicate on the "confirmation_txid" field.
func ConfirmationTxidLTE(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldConfirmationTxid, v))
}

// ConfirmationTxidContains applies the Contains predicate on the "confirmation_txid" field.
func ConfirmationTxidContains(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldContains(FieldConfirmationTxid, v))
}

// ConfirmationTxidHasPrefix applies the HasPrefix predicate on the "confirmation_txid" field.
func ConfirmationTxidHasPrefix(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldHasPrefix(FieldConfirmationTxid, v))
}

// ConfirmationTxidHasSuffix applies the HasSuffix predicate on the "confirmation_txid" field.
func ConfirmationTxidHasSuffix(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldHasSuffix(FieldConfirmationTxid, v))
}

// ConfirmationTxidIsNil applies the IsNil predicate on the "confirmation_txid" field.
func ConfirmationTxidIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldConfirmationTxid))
}

// ConfirmationTxidNotNil applies the NotNil predicate on the "confirmation_txid" field.
func ConfirmationTxidNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldConfirmationTxid))
}

// ConfirmationTxidEqualFold applies the EqualFold predicate on the "confirmation_txid" field.
func ConfirmationTxidEqualFold(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEqualFold(FieldConfirmationTxid, v))
}

// ConfirmationTxidContainsFold applies the ContainsFold predicate on the "confirmation_txid" field.
func ConfirmationTxidContainsFold(v string) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldContainsFold(FieldConfirmationTxid, v))
}

// AddressSignaturesIsNil applies the IsNil predicate on the "address_signatures" field.
func AddressSignaturesIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldAddressSignatures))
}

// AddressSignaturesNotNil applies the NotNil predicate on the "address_signatures" field.
func AddressSignaturesNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldAddressSignatures))
}

// PossessionSignatureEQ applies the EQ predicate on the "possession_signature" field.
func PossessionSignatureEQ(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldPossessionSignature, v))
}

// PossessionSignatureNEQ applies the NEQ predicate on the "possession_signature" field.
func PossessionSignatureNEQ(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldPossessionSignature, v))
}

// PossessionSignatureIn applies the In predicate on the "possession_signature" field.
func PossessionSignatureIn(vs ...[]byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldPossessionSignature, vs...))
}

// PossessionSignatureNotIn applies the NotIn predicate on the "possession_signature" field.
func PossessionSignatureNotIn(vs ...[]byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldPossessionSignature, vs...))
}

// PossessionSignatureGT applies the GT predicate on the "possession_signature" field.
func PossessionSignatureGT(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldPossessionSignature, v))
}

// PossessionSignatureGTE applies the GTE predicate on the "possession_signature" field.
func PossessionSignatureGTE(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldPossessionSignature, v))
}

// PossessionSignatureLT applies the LT predicate on the "possession_signature" field.
func PossessionSignatureLT(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldPossessionSignature, v))
}

// PossessionSignatureLTE applies the LTE predicate on the "possession_signature" field.
func PossessionSignatureLTE(v []byte) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldPossessionSignature, v))
}

// PossessionSignatureIsNil applies the IsNil predicate on the "possession_signature" field.
func PossessionSignatureIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldPossessionSignature))
}

// PossessionSignatureNotNil applies the NotNil predicate on the "possession_signature" field.
func PossessionSignatureNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldPossessionSignature))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v uuid.UUID) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDIsNil applies the IsNil predicate on the "node_id" field.
func NodeIDIsNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldIsNull(FieldNodeID))
}

// NodeIDNotNil applies the NotNil predicate on the "node_id" field.
func NodeIDNotNil() predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNotNull(FieldNodeID))
}

// IsStaticEQ applies the EQ predicate on the "is_static" field.
func IsStaticEQ(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldIsStatic, v))
}

// IsStaticNEQ applies the NEQ predicate on the "is_static" field.
func IsStaticNEQ(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldIsStatic, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.DepositAddress {
	return predicate.DepositAddress(sql.FieldNEQ(FieldIsDefault, v))
}

// HasSigningKeyshare applies the HasEdge predicate on the "signing_keyshare" edge.
func HasSigningKeyshare() predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SigningKeyshareTable, SigningKeyshareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSigningKeyshareWith applies the HasEdge predicate on the "signing_keyshare" edge with a given conditions (other predicates).
func HasSigningKeyshareWith(preds ...predicate.SigningKeyshare) predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := newSigningKeyshareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUtxo applies the HasEdge predicate on the "utxo" edge.
func HasUtxo() predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UtxoTable, UtxoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUtxoWith applies the HasEdge predicate on the "utxo" edge with a given conditions (other predicates).
func HasUtxoWith(preds ...predicate.Utxo) predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := newUtxoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUtxoswaps applies the HasEdge predicate on the "utxoswaps" edge.
func HasUtxoswaps() predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UtxoswapsTable, UtxoswapsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUtxoswapsWith applies the HasEdge predicate on the "utxoswaps" edge with a given conditions (other predicates).
func HasUtxoswapsWith(preds ...predicate.UtxoSwap) predicate.DepositAddress {
	return predicate.DepositAddress(func(s *sql.Selector) {
		step := newUtxoswapsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DepositAddress) predicate.DepositAddress {
	return predicate.DepositAddress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DepositAddress) predicate.DepositAddress {
	return predicate.DepositAddress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DepositAddress) predicate.DepositAddress {
	return predicate.DepositAddress(sql.NotPredicates(p))
}
