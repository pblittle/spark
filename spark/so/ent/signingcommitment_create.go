// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
	"github.com/lightsparkdev/spark/so/ent/signingcommitment"
)

// SigningCommitmentCreate is the builder for creating a SigningCommitment entity.
type SigningCommitmentCreate struct {
	config
	mutation *SigningCommitmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (scc *SigningCommitmentCreate) SetCreateTime(t time.Time) *SigningCommitmentCreate {
	scc.mutation.SetCreateTime(t)
	return scc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (scc *SigningCommitmentCreate) SetNillableCreateTime(t *time.Time) *SigningCommitmentCreate {
	if t != nil {
		scc.SetCreateTime(*t)
	}
	return scc
}

// SetUpdateTime sets the "update_time" field.
func (scc *SigningCommitmentCreate) SetUpdateTime(t time.Time) *SigningCommitmentCreate {
	scc.mutation.SetUpdateTime(t)
	return scc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (scc *SigningCommitmentCreate) SetNillableUpdateTime(t *time.Time) *SigningCommitmentCreate {
	if t != nil {
		scc.SetUpdateTime(*t)
	}
	return scc
}

// SetOperatorIndex sets the "operator_index" field.
func (scc *SigningCommitmentCreate) SetOperatorIndex(u uint) *SigningCommitmentCreate {
	scc.mutation.SetOperatorIndex(u)
	return scc
}

// SetStatus sets the "status" field.
func (scc *SigningCommitmentCreate) SetStatus(scs schematype.SigningCommitmentStatus) *SigningCommitmentCreate {
	scc.mutation.SetStatus(scs)
	return scc
}

// SetNonceCommitment sets the "nonce_commitment" field.
func (scc *SigningCommitmentCreate) SetNonceCommitment(b []byte) *SigningCommitmentCreate {
	scc.mutation.SetNonceCommitment(b)
	return scc
}

// SetID sets the "id" field.
func (scc *SigningCommitmentCreate) SetID(u uuid.UUID) *SigningCommitmentCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (scc *SigningCommitmentCreate) SetNillableID(u *uuid.UUID) *SigningCommitmentCreate {
	if u != nil {
		scc.SetID(*u)
	}
	return scc
}

// Mutation returns the SigningCommitmentMutation object of the builder.
func (scc *SigningCommitmentCreate) Mutation() *SigningCommitmentMutation {
	return scc.mutation
}

// Save creates the SigningCommitment in the database.
func (scc *SigningCommitmentCreate) Save(ctx context.Context) (*SigningCommitment, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SigningCommitmentCreate) SaveX(ctx context.Context) *SigningCommitment {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SigningCommitmentCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SigningCommitmentCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SigningCommitmentCreate) defaults() {
	if _, ok := scc.mutation.CreateTime(); !ok {
		v := signingcommitment.DefaultCreateTime()
		scc.mutation.SetCreateTime(v)
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		v := signingcommitment.DefaultUpdateTime()
		scc.mutation.SetUpdateTime(v)
	}
	if _, ok := scc.mutation.ID(); !ok {
		v := signingcommitment.DefaultID()
		scc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SigningCommitmentCreate) check() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SigningCommitment.create_time"`)}
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SigningCommitment.update_time"`)}
	}
	if _, ok := scc.mutation.OperatorIndex(); !ok {
		return &ValidationError{Name: "operator_index", err: errors.New(`ent: missing required field "SigningCommitment.operator_index"`)}
	}
	if _, ok := scc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SigningCommitment.status"`)}
	}
	if v, ok := scc.mutation.Status(); ok {
		if err := signingcommitment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SigningCommitment.status": %w`, err)}
		}
	}
	if _, ok := scc.mutation.NonceCommitment(); !ok {
		return &ValidationError{Name: "nonce_commitment", err: errors.New(`ent: missing required field "SigningCommitment.nonce_commitment"`)}
	}
	return nil
}

func (scc *SigningCommitmentCreate) sqlSave(ctx context.Context) (*SigningCommitment, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SigningCommitmentCreate) createSpec() (*SigningCommitment, *sqlgraph.CreateSpec) {
	var (
		_node = &SigningCommitment{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(signingcommitment.Table, sqlgraph.NewFieldSpec(signingcommitment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = scc.conflict
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := scc.mutation.CreateTime(); ok {
		_spec.SetField(signingcommitment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := scc.mutation.UpdateTime(); ok {
		_spec.SetField(signingcommitment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := scc.mutation.OperatorIndex(); ok {
		_spec.SetField(signingcommitment.FieldOperatorIndex, field.TypeUint, value)
		_node.OperatorIndex = value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.SetField(signingcommitment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := scc.mutation.NonceCommitment(); ok {
		_spec.SetField(signingcommitment.FieldNonceCommitment, field.TypeBytes, value)
		_node.NonceCommitment = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SigningCommitment.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SigningCommitmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scc *SigningCommitmentCreate) OnConflict(opts ...sql.ConflictOption) *SigningCommitmentUpsertOne {
	scc.conflict = opts
	return &SigningCommitmentUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scc *SigningCommitmentCreate) OnConflictColumns(columns ...string) *SigningCommitmentUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &SigningCommitmentUpsertOne{
		create: scc,
	}
}

type (
	// SigningCommitmentUpsertOne is the builder for "upsert"-ing
	//  one SigningCommitment node.
	SigningCommitmentUpsertOne struct {
		create *SigningCommitmentCreate
	}

	// SigningCommitmentUpsert is the "OnConflict" setter.
	SigningCommitmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SigningCommitmentUpsert) SetUpdateTime(v time.Time) *SigningCommitmentUpsert {
	u.Set(signingcommitment.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SigningCommitmentUpsert) UpdateUpdateTime() *SigningCommitmentUpsert {
	u.SetExcluded(signingcommitment.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *SigningCommitmentUpsert) SetStatus(v schematype.SigningCommitmentStatus) *SigningCommitmentUpsert {
	u.Set(signingcommitment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SigningCommitmentUpsert) UpdateStatus() *SigningCommitmentUpsert {
	u.SetExcluded(signingcommitment.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(signingcommitment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SigningCommitmentUpsertOne) UpdateNewValues() *SigningCommitmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(signingcommitment.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(signingcommitment.FieldCreateTime)
		}
		if _, exists := u.create.mutation.OperatorIndex(); exists {
			s.SetIgnore(signingcommitment.FieldOperatorIndex)
		}
		if _, exists := u.create.mutation.NonceCommitment(); exists {
			s.SetIgnore(signingcommitment.FieldNonceCommitment)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SigningCommitmentUpsertOne) Ignore() *SigningCommitmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SigningCommitmentUpsertOne) DoNothing() *SigningCommitmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SigningCommitmentCreate.OnConflict
// documentation for more info.
func (u *SigningCommitmentUpsertOne) Update(set func(*SigningCommitmentUpsert)) *SigningCommitmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SigningCommitmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SigningCommitmentUpsertOne) SetUpdateTime(v time.Time) *SigningCommitmentUpsertOne {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SigningCommitmentUpsertOne) UpdateUpdateTime() *SigningCommitmentUpsertOne {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *SigningCommitmentUpsertOne) SetStatus(v schematype.SigningCommitmentStatus) *SigningCommitmentUpsertOne {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SigningCommitmentUpsertOne) UpdateStatus() *SigningCommitmentUpsertOne {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SigningCommitmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SigningCommitmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SigningCommitmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SigningCommitmentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SigningCommitmentUpsertOne.ID is not supported by MySQL driver. Use SigningCommitmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SigningCommitmentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SigningCommitmentCreateBulk is the builder for creating many SigningCommitment entities in bulk.
type SigningCommitmentCreateBulk struct {
	config
	err      error
	builders []*SigningCommitmentCreate
	conflict []sql.ConflictOption
}

// Save creates the SigningCommitment entities in the database.
func (sccb *SigningCommitmentCreateBulk) Save(ctx context.Context) ([]*SigningCommitment, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SigningCommitment, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SigningCommitmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SigningCommitmentCreateBulk) SaveX(ctx context.Context) []*SigningCommitment {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SigningCommitmentCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SigningCommitmentCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SigningCommitment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SigningCommitmentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sccb *SigningCommitmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *SigningCommitmentUpsertBulk {
	sccb.conflict = opts
	return &SigningCommitmentUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccb *SigningCommitmentCreateBulk) OnConflictColumns(columns ...string) *SigningCommitmentUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &SigningCommitmentUpsertBulk{
		create: sccb,
	}
}

// SigningCommitmentUpsertBulk is the builder for "upsert"-ing
// a bulk of SigningCommitment nodes.
type SigningCommitmentUpsertBulk struct {
	create *SigningCommitmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(signingcommitment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SigningCommitmentUpsertBulk) UpdateNewValues() *SigningCommitmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(signingcommitment.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(signingcommitment.FieldCreateTime)
			}
			if _, exists := b.mutation.OperatorIndex(); exists {
				s.SetIgnore(signingcommitment.FieldOperatorIndex)
			}
			if _, exists := b.mutation.NonceCommitment(); exists {
				s.SetIgnore(signingcommitment.FieldNonceCommitment)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SigningCommitment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SigningCommitmentUpsertBulk) Ignore() *SigningCommitmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SigningCommitmentUpsertBulk) DoNothing() *SigningCommitmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SigningCommitmentCreateBulk.OnConflict
// documentation for more info.
func (u *SigningCommitmentUpsertBulk) Update(set func(*SigningCommitmentUpsert)) *SigningCommitmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SigningCommitmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SigningCommitmentUpsertBulk) SetUpdateTime(v time.Time) *SigningCommitmentUpsertBulk {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SigningCommitmentUpsertBulk) UpdateUpdateTime() *SigningCommitmentUpsertBulk {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *SigningCommitmentUpsertBulk) SetStatus(v schematype.SigningCommitmentStatus) *SigningCommitmentUpsertBulk {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SigningCommitmentUpsertBulk) UpdateStatus() *SigningCommitmentUpsertBulk {
	return u.Update(func(s *SigningCommitmentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SigningCommitmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SigningCommitmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SigningCommitmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SigningCommitmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
