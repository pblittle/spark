// Code generated by ent, DO NOT EDIT.

package treenode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldUpdateTime, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldValue, v))
}

// VerifyingPubkey applies equality check predicate on the "verifying_pubkey" field. It's identical to VerifyingPubkeyEQ.
func VerifyingPubkey(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldVerifyingPubkey, v))
}

// OwnerIdentityPubkey applies equality check predicate on the "owner_identity_pubkey" field. It's identical to OwnerIdentityPubkeyEQ.
func OwnerIdentityPubkey(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkey applies equality check predicate on the "owner_signing_pubkey" field. It's identical to OwnerSigningPubkeyEQ.
func OwnerSigningPubkey(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// Vout applies equality check predicate on the "vout" field. It's identical to VoutEQ.
func Vout(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldVout, v))
}

// NodeConfirmationHeight applies equality check predicate on the "node_confirmation_height" field. It's identical to NodeConfirmationHeightEQ.
func NodeConfirmationHeight(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldNodeConfirmationHeight, v))
}

// RefundConfirmationHeight applies equality check predicate on the "refund_confirmation_height" field. It's identical to RefundConfirmationHeightEQ.
func RefundConfirmationHeight(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRefundConfirmationHeight, v))
}

// RawTx applies equality check predicate on the "raw_tx" field. It's identical to RawTxEQ.
func RawTx(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawTx, v))
}

// DirectTx applies equality check predicate on the "direct_tx" field. It's identical to DirectTxEQ.
func DirectTx(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectTx, v))
}

// DirectFromCpfpRefundTx applies equality check predicate on the "direct_from_cpfp_refund_tx" field. It's identical to DirectFromCpfpRefundTxEQ.
func DirectFromCpfpRefundTx(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectFromCpfpRefundTx, v))
}

// RawTxid applies equality check predicate on the "raw_txid" field. It's identical to RawTxidEQ.
func RawTxid(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawTxid, v))
}

// DirectTxid applies equality check predicate on the "direct_txid" field. It's identical to DirectTxidEQ.
func DirectTxid(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectTxid, v))
}

// DirectFromCpfpRefundTxid applies equality check predicate on the "direct_from_cpfp_refund_txid" field. It's identical to DirectFromCpfpRefundTxidEQ.
func DirectFromCpfpRefundTxid(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectFromCpfpRefundTxid, v))
}

// RawRefundTx applies equality check predicate on the "raw_refund_tx" field. It's identical to RawRefundTxEQ.
func RawRefundTx(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawRefundTx, v))
}

// DirectRefundTx applies equality check predicate on the "direct_refund_tx" field. It's identical to DirectRefundTxEQ.
func DirectRefundTx(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectRefundTx, v))
}

// RawRefundTxid applies equality check predicate on the "raw_refund_txid" field. It's identical to RawRefundTxidEQ.
func RawRefundTxid(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawRefundTxid, v))
}

// DirectRefundTxid applies equality check predicate on the "direct_refund_txid" field. It's identical to DirectRefundTxidEQ.
func DirectRefundTxid(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectRefundTxid, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldUpdateTime, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldValue, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schematype.TreeNodeStatus) predicate.TreeNode {
	vc := v
	return predicate.TreeNode(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schematype.TreeNodeStatus) predicate.TreeNode {
	vc := v
	return predicate.TreeNode(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schematype.TreeNodeStatus) predicate.TreeNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TreeNode(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schematype.TreeNodeStatus) predicate.TreeNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TreeNode(sql.FieldNotIn(FieldStatus, v...))
}

// VerifyingPubkeyEQ applies the EQ predicate on the "verifying_pubkey" field.
func VerifyingPubkeyEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyNEQ applies the NEQ predicate on the "verifying_pubkey" field.
func VerifyingPubkeyNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyIn applies the In predicate on the "verifying_pubkey" field.
func VerifyingPubkeyIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldVerifyingPubkey, vs...))
}

// VerifyingPubkeyNotIn applies the NotIn predicate on the "verifying_pubkey" field.
func VerifyingPubkeyNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldVerifyingPubkey, vs...))
}

// VerifyingPubkeyGT applies the GT predicate on the "verifying_pubkey" field.
func VerifyingPubkeyGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyGTE applies the GTE predicate on the "verifying_pubkey" field.
func VerifyingPubkeyGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyLT applies the LT predicate on the "verifying_pubkey" field.
func VerifyingPubkeyLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyLTE applies the LTE predicate on the "verifying_pubkey" field.
func VerifyingPubkeyLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldVerifyingPubkey, v))
}

// OwnerIdentityPubkeyEQ applies the EQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyNEQ applies the NEQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyIn applies the In predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyNotIn applies the NotIn predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyGT applies the GT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyGTE applies the GTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLT applies the LT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLTE applies the LTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkeyEQ applies the EQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyNEQ applies the NEQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyIn applies the In predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyNotIn applies the NotIn predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyGT applies the GT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyGTE applies the GTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLT applies the LT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLTE applies the LTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldOwnerSigningPubkey, v))
}

// VoutEQ applies the EQ predicate on the "vout" field.
func VoutEQ(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldVout, v))
}

// VoutNEQ applies the NEQ predicate on the "vout" field.
func VoutNEQ(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldVout, v))
}

// VoutIn applies the In predicate on the "vout" field.
func VoutIn(vs ...int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldVout, vs...))
}

// VoutNotIn applies the NotIn predicate on the "vout" field.
func VoutNotIn(vs ...int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldVout, vs...))
}

// VoutGT applies the GT predicate on the "vout" field.
func VoutGT(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldVout, v))
}

// VoutGTE applies the GTE predicate on the "vout" field.
func VoutGTE(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldVout, v))
}

// VoutLT applies the LT predicate on the "vout" field.
func VoutLT(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldVout, v))
}

// VoutLTE applies the LTE predicate on the "vout" field.
func VoutLTE(v int16) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldVout, v))
}

// NodeConfirmationHeightEQ applies the EQ predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightNEQ applies the NEQ predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightNEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightIn applies the In predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldNodeConfirmationHeight, vs...))
}

// NodeConfirmationHeightNotIn applies the NotIn predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightNotIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldNodeConfirmationHeight, vs...))
}

// NodeConfirmationHeightGT applies the GT predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightGT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightGTE applies the GTE predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightGTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightLT applies the LT predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightLT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightLTE applies the LTE predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightLTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldNodeConfirmationHeight, v))
}

// NodeConfirmationHeightIsNil applies the IsNil predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldNodeConfirmationHeight))
}

// NodeConfirmationHeightNotNil applies the NotNil predicate on the "node_confirmation_height" field.
func NodeConfirmationHeightNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldNodeConfirmationHeight))
}

// RefundConfirmationHeightEQ applies the EQ predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightNEQ applies the NEQ predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightNEQ(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightIn applies the In predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldRefundConfirmationHeight, vs...))
}

// RefundConfirmationHeightNotIn applies the NotIn predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightNotIn(vs ...uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldRefundConfirmationHeight, vs...))
}

// RefundConfirmationHeightGT applies the GT predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightGT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightGTE applies the GTE predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightGTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightLT applies the LT predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightLT(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightLTE applies the LTE predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightLTE(v uint64) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldRefundConfirmationHeight, v))
}

// RefundConfirmationHeightIsNil applies the IsNil predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldRefundConfirmationHeight))
}

// RefundConfirmationHeightNotNil applies the NotNil predicate on the "refund_confirmation_height" field.
func RefundConfirmationHeightNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldRefundConfirmationHeight))
}

// RawTxEQ applies the EQ predicate on the "raw_tx" field.
func RawTxEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawTx, v))
}

// RawTxNEQ applies the NEQ predicate on the "raw_tx" field.
func RawTxNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldRawTx, v))
}

// RawTxIn applies the In predicate on the "raw_tx" field.
func RawTxIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldRawTx, vs...))
}

// RawTxNotIn applies the NotIn predicate on the "raw_tx" field.
func RawTxNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldRawTx, vs...))
}

// RawTxGT applies the GT predicate on the "raw_tx" field.
func RawTxGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldRawTx, v))
}

// RawTxGTE applies the GTE predicate on the "raw_tx" field.
func RawTxGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldRawTx, v))
}

// RawTxLT applies the LT predicate on the "raw_tx" field.
func RawTxLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldRawTx, v))
}

// RawTxLTE applies the LTE predicate on the "raw_tx" field.
func RawTxLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldRawTx, v))
}

// DirectTxEQ applies the EQ predicate on the "direct_tx" field.
func DirectTxEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectTx, v))
}

// DirectTxNEQ applies the NEQ predicate on the "direct_tx" field.
func DirectTxNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectTx, v))
}

// DirectTxIn applies the In predicate on the "direct_tx" field.
func DirectTxIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectTx, vs...))
}

// DirectTxNotIn applies the NotIn predicate on the "direct_tx" field.
func DirectTxNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectTx, vs...))
}

// DirectTxGT applies the GT predicate on the "direct_tx" field.
func DirectTxGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectTx, v))
}

// DirectTxGTE applies the GTE predicate on the "direct_tx" field.
func DirectTxGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectTx, v))
}

// DirectTxLT applies the LT predicate on the "direct_tx" field.
func DirectTxLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectTx, v))
}

// DirectTxLTE applies the LTE predicate on the "direct_tx" field.
func DirectTxLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectTx, v))
}

// DirectTxIsNil applies the IsNil predicate on the "direct_tx" field.
func DirectTxIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectTx))
}

// DirectTxNotNil applies the NotNil predicate on the "direct_tx" field.
func DirectTxNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectTx))
}

// DirectFromCpfpRefundTxEQ applies the EQ predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxNEQ applies the NEQ predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxIn applies the In predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectFromCpfpRefundTx, vs...))
}

// DirectFromCpfpRefundTxNotIn applies the NotIn predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectFromCpfpRefundTx, vs...))
}

// DirectFromCpfpRefundTxGT applies the GT predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxGTE applies the GTE predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxLT applies the LT predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxLTE applies the LTE predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectFromCpfpRefundTx, v))
}

// DirectFromCpfpRefundTxIsNil applies the IsNil predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectFromCpfpRefundTx))
}

// DirectFromCpfpRefundTxNotNil applies the NotNil predicate on the "direct_from_cpfp_refund_tx" field.
func DirectFromCpfpRefundTxNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectFromCpfpRefundTx))
}

// RawTxidEQ applies the EQ predicate on the "raw_txid" field.
func RawTxidEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawTxid, v))
}

// RawTxidNEQ applies the NEQ predicate on the "raw_txid" field.
func RawTxidNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldRawTxid, v))
}

// RawTxidIn applies the In predicate on the "raw_txid" field.
func RawTxidIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldRawTxid, vs...))
}

// RawTxidNotIn applies the NotIn predicate on the "raw_txid" field.
func RawTxidNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldRawTxid, vs...))
}

// RawTxidGT applies the GT predicate on the "raw_txid" field.
func RawTxidGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldRawTxid, v))
}

// RawTxidGTE applies the GTE predicate on the "raw_txid" field.
func RawTxidGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldRawTxid, v))
}

// RawTxidLT applies the LT predicate on the "raw_txid" field.
func RawTxidLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldRawTxid, v))
}

// RawTxidLTE applies the LTE predicate on the "raw_txid" field.
func RawTxidLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldRawTxid, v))
}

// RawTxidIsNil applies the IsNil predicate on the "raw_txid" field.
func RawTxidIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldRawTxid))
}

// RawTxidNotNil applies the NotNil predicate on the "raw_txid" field.
func RawTxidNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldRawTxid))
}

// DirectTxidEQ applies the EQ predicate on the "direct_txid" field.
func DirectTxidEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectTxid, v))
}

// DirectTxidNEQ applies the NEQ predicate on the "direct_txid" field.
func DirectTxidNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectTxid, v))
}

// DirectTxidIn applies the In predicate on the "direct_txid" field.
func DirectTxidIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectTxid, vs...))
}

// DirectTxidNotIn applies the NotIn predicate on the "direct_txid" field.
func DirectTxidNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectTxid, vs...))
}

// DirectTxidGT applies the GT predicate on the "direct_txid" field.
func DirectTxidGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectTxid, v))
}

// DirectTxidGTE applies the GTE predicate on the "direct_txid" field.
func DirectTxidGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectTxid, v))
}

// DirectTxidLT applies the LT predicate on the "direct_txid" field.
func DirectTxidLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectTxid, v))
}

// DirectTxidLTE applies the LTE predicate on the "direct_txid" field.
func DirectTxidLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectTxid, v))
}

// DirectTxidIsNil applies the IsNil predicate on the "direct_txid" field.
func DirectTxidIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectTxid))
}

// DirectTxidNotNil applies the NotNil predicate on the "direct_txid" field.
func DirectTxidNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectTxid))
}

// DirectFromCpfpRefundTxidEQ applies the EQ predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidNEQ applies the NEQ predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidIn applies the In predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectFromCpfpRefundTxid, vs...))
}

// DirectFromCpfpRefundTxidNotIn applies the NotIn predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectFromCpfpRefundTxid, vs...))
}

// DirectFromCpfpRefundTxidGT applies the GT predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidGTE applies the GTE predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidLT applies the LT predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidLTE applies the LTE predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectFromCpfpRefundTxid, v))
}

// DirectFromCpfpRefundTxidIsNil applies the IsNil predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectFromCpfpRefundTxid))
}

// DirectFromCpfpRefundTxidNotNil applies the NotNil predicate on the "direct_from_cpfp_refund_txid" field.
func DirectFromCpfpRefundTxidNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectFromCpfpRefundTxid))
}

// RawRefundTxEQ applies the EQ predicate on the "raw_refund_tx" field.
func RawRefundTxEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawRefundTx, v))
}

// RawRefundTxNEQ applies the NEQ predicate on the "raw_refund_tx" field.
func RawRefundTxNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldRawRefundTx, v))
}

// RawRefundTxIn applies the In predicate on the "raw_refund_tx" field.
func RawRefundTxIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldRawRefundTx, vs...))
}

// RawRefundTxNotIn applies the NotIn predicate on the "raw_refund_tx" field.
func RawRefundTxNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldRawRefundTx, vs...))
}

// RawRefundTxGT applies the GT predicate on the "raw_refund_tx" field.
func RawRefundTxGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldRawRefundTx, v))
}

// RawRefundTxGTE applies the GTE predicate on the "raw_refund_tx" field.
func RawRefundTxGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldRawRefundTx, v))
}

// RawRefundTxLT applies the LT predicate on the "raw_refund_tx" field.
func RawRefundTxLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldRawRefundTx, v))
}

// RawRefundTxLTE applies the LTE predicate on the "raw_refund_tx" field.
func RawRefundTxLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldRawRefundTx, v))
}

// RawRefundTxIsNil applies the IsNil predicate on the "raw_refund_tx" field.
func RawRefundTxIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldRawRefundTx))
}

// RawRefundTxNotNil applies the NotNil predicate on the "raw_refund_tx" field.
func RawRefundTxNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldRawRefundTx))
}

// DirectRefundTxEQ applies the EQ predicate on the "direct_refund_tx" field.
func DirectRefundTxEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectRefundTx, v))
}

// DirectRefundTxNEQ applies the NEQ predicate on the "direct_refund_tx" field.
func DirectRefundTxNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectRefundTx, v))
}

// DirectRefundTxIn applies the In predicate on the "direct_refund_tx" field.
func DirectRefundTxIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectRefundTx, vs...))
}

// DirectRefundTxNotIn applies the NotIn predicate on the "direct_refund_tx" field.
func DirectRefundTxNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectRefundTx, vs...))
}

// DirectRefundTxGT applies the GT predicate on the "direct_refund_tx" field.
func DirectRefundTxGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectRefundTx, v))
}

// DirectRefundTxGTE applies the GTE predicate on the "direct_refund_tx" field.
func DirectRefundTxGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectRefundTx, v))
}

// DirectRefundTxLT applies the LT predicate on the "direct_refund_tx" field.
func DirectRefundTxLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectRefundTx, v))
}

// DirectRefundTxLTE applies the LTE predicate on the "direct_refund_tx" field.
func DirectRefundTxLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectRefundTx, v))
}

// DirectRefundTxIsNil applies the IsNil predicate on the "direct_refund_tx" field.
func DirectRefundTxIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectRefundTx))
}

// DirectRefundTxNotNil applies the NotNil predicate on the "direct_refund_tx" field.
func DirectRefundTxNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectRefundTx))
}

// RawRefundTxidEQ applies the EQ predicate on the "raw_refund_txid" field.
func RawRefundTxidEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldRawRefundTxid, v))
}

// RawRefundTxidNEQ applies the NEQ predicate on the "raw_refund_txid" field.
func RawRefundTxidNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldRawRefundTxid, v))
}

// RawRefundTxidIn applies the In predicate on the "raw_refund_txid" field.
func RawRefundTxidIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldRawRefundTxid, vs...))
}

// RawRefundTxidNotIn applies the NotIn predicate on the "raw_refund_txid" field.
func RawRefundTxidNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldRawRefundTxid, vs...))
}

// RawRefundTxidGT applies the GT predicate on the "raw_refund_txid" field.
func RawRefundTxidGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldRawRefundTxid, v))
}

// RawRefundTxidGTE applies the GTE predicate on the "raw_refund_txid" field.
func RawRefundTxidGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldRawRefundTxid, v))
}

// RawRefundTxidLT applies the LT predicate on the "raw_refund_txid" field.
func RawRefundTxidLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldRawRefundTxid, v))
}

// RawRefundTxidLTE applies the LTE predicate on the "raw_refund_txid" field.
func RawRefundTxidLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldRawRefundTxid, v))
}

// RawRefundTxidIsNil applies the IsNil predicate on the "raw_refund_txid" field.
func RawRefundTxidIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldRawRefundTxid))
}

// RawRefundTxidNotNil applies the NotNil predicate on the "raw_refund_txid" field.
func RawRefundTxidNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldRawRefundTxid))
}

// DirectRefundTxidEQ applies the EQ predicate on the "direct_refund_txid" field.
func DirectRefundTxidEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldEQ(FieldDirectRefundTxid, v))
}

// DirectRefundTxidNEQ applies the NEQ predicate on the "direct_refund_txid" field.
func DirectRefundTxidNEQ(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNEQ(FieldDirectRefundTxid, v))
}

// DirectRefundTxidIn applies the In predicate on the "direct_refund_txid" field.
func DirectRefundTxidIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIn(FieldDirectRefundTxid, vs...))
}

// DirectRefundTxidNotIn applies the NotIn predicate on the "direct_refund_txid" field.
func DirectRefundTxidNotIn(vs ...[]byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotIn(FieldDirectRefundTxid, vs...))
}

// DirectRefundTxidGT applies the GT predicate on the "direct_refund_txid" field.
func DirectRefundTxidGT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGT(FieldDirectRefundTxid, v))
}

// DirectRefundTxidGTE applies the GTE predicate on the "direct_refund_txid" field.
func DirectRefundTxidGTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldGTE(FieldDirectRefundTxid, v))
}

// DirectRefundTxidLT applies the LT predicate on the "direct_refund_txid" field.
func DirectRefundTxidLT(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLT(FieldDirectRefundTxid, v))
}

// DirectRefundTxidLTE applies the LTE predicate on the "direct_refund_txid" field.
func DirectRefundTxidLTE(v []byte) predicate.TreeNode {
	return predicate.TreeNode(sql.FieldLTE(FieldDirectRefundTxid, v))
}

// DirectRefundTxidIsNil applies the IsNil predicate on the "direct_refund_txid" field.
func DirectRefundTxidIsNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldIsNull(FieldDirectRefundTxid))
}

// DirectRefundTxidNotNil applies the NotNil predicate on the "direct_refund_txid" field.
func DirectRefundTxidNotNil() predicate.TreeNode {
	return predicate.TreeNode(sql.FieldNotNull(FieldDirectRefundTxid))
}

// HasTree applies the HasEdge predicate on the "tree" edge.
func HasTree() predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TreeTable, TreeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTreeWith applies the HasEdge predicate on the "tree" edge with a given conditions (other predicates).
func HasTreeWith(preds ...predicate.Tree) predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := newTreeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.TreeNode) predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSigningKeyshare applies the HasEdge predicate on the "signing_keyshare" edge.
func HasSigningKeyshare() predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SigningKeyshareTable, SigningKeyshareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSigningKeyshareWith applies the HasEdge predicate on the "signing_keyshare" edge with a given conditions (other predicates).
func HasSigningKeyshareWith(preds ...predicate.SigningKeyshare) predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := newSigningKeyshareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.TreeNode) predicate.TreeNode {
	return predicate.TreeNode(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TreeNode) predicate.TreeNode {
	return predicate.TreeNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TreeNode) predicate.TreeNode {
	return predicate.TreeNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TreeNode) predicate.TreeNode {
	return predicate.TreeNode(sql.NotPredicates(p))
}
