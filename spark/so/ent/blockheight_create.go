// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/blockheight"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// BlockHeightCreate is the builder for creating a BlockHeight entity.
type BlockHeightCreate struct {
	config
	mutation *BlockHeightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bhc *BlockHeightCreate) SetCreateTime(t time.Time) *BlockHeightCreate {
	bhc.mutation.SetCreateTime(t)
	return bhc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableCreateTime(t *time.Time) *BlockHeightCreate {
	if t != nil {
		bhc.SetCreateTime(*t)
	}
	return bhc
}

// SetUpdateTime sets the "update_time" field.
func (bhc *BlockHeightCreate) SetUpdateTime(t time.Time) *BlockHeightCreate {
	bhc.mutation.SetUpdateTime(t)
	return bhc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableUpdateTime(t *time.Time) *BlockHeightCreate {
	if t != nil {
		bhc.SetUpdateTime(*t)
	}
	return bhc
}

// SetHeight sets the "height" field.
func (bhc *BlockHeightCreate) SetHeight(i int64) *BlockHeightCreate {
	bhc.mutation.SetHeight(i)
	return bhc
}

// SetNetwork sets the "network" field.
func (bhc *BlockHeightCreate) SetNetwork(s schematype.Network) *BlockHeightCreate {
	bhc.mutation.SetNetwork(s)
	return bhc
}

// SetID sets the "id" field.
func (bhc *BlockHeightCreate) SetID(u uuid.UUID) *BlockHeightCreate {
	bhc.mutation.SetID(u)
	return bhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bhc *BlockHeightCreate) SetNillableID(u *uuid.UUID) *BlockHeightCreate {
	if u != nil {
		bhc.SetID(*u)
	}
	return bhc
}

// Mutation returns the BlockHeightMutation object of the builder.
func (bhc *BlockHeightCreate) Mutation() *BlockHeightMutation {
	return bhc.mutation
}

// Save creates the BlockHeight in the database.
func (bhc *BlockHeightCreate) Save(ctx context.Context) (*BlockHeight, error) {
	bhc.defaults()
	return withHooks(ctx, bhc.sqlSave, bhc.mutation, bhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bhc *BlockHeightCreate) SaveX(ctx context.Context) *BlockHeight {
	v, err := bhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhc *BlockHeightCreate) Exec(ctx context.Context) error {
	_, err := bhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhc *BlockHeightCreate) ExecX(ctx context.Context) {
	if err := bhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bhc *BlockHeightCreate) defaults() {
	if _, ok := bhc.mutation.CreateTime(); !ok {
		v := blockheight.DefaultCreateTime()
		bhc.mutation.SetCreateTime(v)
	}
	if _, ok := bhc.mutation.UpdateTime(); !ok {
		v := blockheight.DefaultUpdateTime()
		bhc.mutation.SetUpdateTime(v)
	}
	if _, ok := bhc.mutation.ID(); !ok {
		v := blockheight.DefaultID()
		bhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhc *BlockHeightCreate) check() error {
	if _, ok := bhc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BlockHeight.create_time"`)}
	}
	if _, ok := bhc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BlockHeight.update_time"`)}
	}
	if _, ok := bhc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "BlockHeight.height"`)}
	}
	if _, ok := bhc.mutation.Network(); !ok {
		return &ValidationError{Name: "network", err: errors.New(`ent: missing required field "BlockHeight.network"`)}
	}
	if v, ok := bhc.mutation.Network(); ok {
		if err := blockheight.NetworkValidator(v); err != nil {
			return &ValidationError{Name: "network", err: fmt.Errorf(`ent: validator failed for field "BlockHeight.network": %w`, err)}
		}
	}
	return nil
}

func (bhc *BlockHeightCreate) sqlSave(ctx context.Context) (*BlockHeight, error) {
	if err := bhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bhc.mutation.id = &_node.ID
	bhc.mutation.done = true
	return _node, nil
}

func (bhc *BlockHeightCreate) createSpec() (*BlockHeight, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockHeight{config: bhc.config}
		_spec = sqlgraph.NewCreateSpec(blockheight.Table, sqlgraph.NewFieldSpec(blockheight.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bhc.conflict
	if id, ok := bhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bhc.mutation.CreateTime(); ok {
		_spec.SetField(blockheight.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bhc.mutation.UpdateTime(); ok {
		_spec.SetField(blockheight.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bhc.mutation.Height(); ok {
		_spec.SetField(blockheight.FieldHeight, field.TypeInt64, value)
		_node.Height = value
	}
	if value, ok := bhc.mutation.Network(); ok {
		_spec.SetField(blockheight.FieldNetwork, field.TypeEnum, value)
		_node.Network = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockHeight.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockHeightUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bhc *BlockHeightCreate) OnConflict(opts ...sql.ConflictOption) *BlockHeightUpsertOne {
	bhc.conflict = opts
	return &BlockHeightUpsertOne{
		create: bhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bhc *BlockHeightCreate) OnConflictColumns(columns ...string) *BlockHeightUpsertOne {
	bhc.conflict = append(bhc.conflict, sql.ConflictColumns(columns...))
	return &BlockHeightUpsertOne{
		create: bhc,
	}
}

type (
	// BlockHeightUpsertOne is the builder for "upsert"-ing
	//  one BlockHeight node.
	BlockHeightUpsertOne struct {
		create *BlockHeightCreate
	}

	// BlockHeightUpsert is the "OnConflict" setter.
	BlockHeightUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BlockHeightUpsert) SetUpdateTime(v time.Time) *BlockHeightUpsert {
	u.Set(blockheight.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BlockHeightUpsert) UpdateUpdateTime() *BlockHeightUpsert {
	u.SetExcluded(blockheight.FieldUpdateTime)
	return u
}

// SetHeight sets the "height" field.
func (u *BlockHeightUpsert) SetHeight(v int64) *BlockHeightUpsert {
	u.Set(blockheight.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockHeightUpsert) UpdateHeight() *BlockHeightUpsert {
	u.SetExcluded(blockheight.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *BlockHeightUpsert) AddHeight(v int64) *BlockHeightUpsert {
	u.Add(blockheight.FieldHeight, v)
	return u
}

// SetNetwork sets the "network" field.
func (u *BlockHeightUpsert) SetNetwork(v schematype.Network) *BlockHeightUpsert {
	u.Set(blockheight.FieldNetwork, v)
	return u
}

// UpdateNetwork sets the "network" field to the value that was provided on create.
func (u *BlockHeightUpsert) UpdateNetwork() *BlockHeightUpsert {
	u.SetExcluded(blockheight.FieldNetwork)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockheight.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockHeightUpsertOne) UpdateNewValues() *BlockHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blockheight.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(blockheight.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockHeightUpsertOne) Ignore() *BlockHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockHeightUpsertOne) DoNothing() *BlockHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockHeightCreate.OnConflict
// documentation for more info.
func (u *BlockHeightUpsertOne) Update(set func(*BlockHeightUpsert)) *BlockHeightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockHeightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BlockHeightUpsertOne) SetUpdateTime(v time.Time) *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BlockHeightUpsertOne) UpdateUpdateTime() *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetHeight sets the "height" field.
func (u *BlockHeightUpsertOne) SetHeight(v int64) *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BlockHeightUpsertOne) AddHeight(v int64) *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockHeightUpsertOne) UpdateHeight() *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateHeight()
	})
}

// SetNetwork sets the "network" field.
func (u *BlockHeightUpsertOne) SetNetwork(v schematype.Network) *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetNetwork(v)
	})
}

// UpdateNetwork sets the "network" field to the value that was provided on create.
func (u *BlockHeightUpsertOne) UpdateNetwork() *BlockHeightUpsertOne {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateNetwork()
	})
}

// Exec executes the query.
func (u *BlockHeightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockHeightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockHeightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockHeightUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BlockHeightUpsertOne.ID is not supported by MySQL driver. Use BlockHeightUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockHeightUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockHeightCreateBulk is the builder for creating many BlockHeight entities in bulk.
type BlockHeightCreateBulk struct {
	config
	err      error
	builders []*BlockHeightCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockHeight entities in the database.
func (bhcb *BlockHeightCreateBulk) Save(ctx context.Context) ([]*BlockHeight, error) {
	if bhcb.err != nil {
		return nil, bhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bhcb.builders))
	nodes := make([]*BlockHeight, len(bhcb.builders))
	mutators := make([]Mutator, len(bhcb.builders))
	for i := range bhcb.builders {
		func(i int, root context.Context) {
			builder := bhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockHeightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bhcb *BlockHeightCreateBulk) SaveX(ctx context.Context) []*BlockHeight {
	v, err := bhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhcb *BlockHeightCreateBulk) Exec(ctx context.Context) error {
	_, err := bhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhcb *BlockHeightCreateBulk) ExecX(ctx context.Context) {
	if err := bhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockHeight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockHeightUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bhcb *BlockHeightCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockHeightUpsertBulk {
	bhcb.conflict = opts
	return &BlockHeightUpsertBulk{
		create: bhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bhcb *BlockHeightCreateBulk) OnConflictColumns(columns ...string) *BlockHeightUpsertBulk {
	bhcb.conflict = append(bhcb.conflict, sql.ConflictColumns(columns...))
	return &BlockHeightUpsertBulk{
		create: bhcb,
	}
}

// BlockHeightUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockHeight nodes.
type BlockHeightUpsertBulk struct {
	create *BlockHeightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockheight.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockHeightUpsertBulk) UpdateNewValues() *BlockHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blockheight.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(blockheight.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockHeight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockHeightUpsertBulk) Ignore() *BlockHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockHeightUpsertBulk) DoNothing() *BlockHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockHeightCreateBulk.OnConflict
// documentation for more info.
func (u *BlockHeightUpsertBulk) Update(set func(*BlockHeightUpsert)) *BlockHeightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockHeightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BlockHeightUpsertBulk) SetUpdateTime(v time.Time) *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BlockHeightUpsertBulk) UpdateUpdateTime() *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetHeight sets the "height" field.
func (u *BlockHeightUpsertBulk) SetHeight(v int64) *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *BlockHeightUpsertBulk) AddHeight(v int64) *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *BlockHeightUpsertBulk) UpdateHeight() *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateHeight()
	})
}

// SetNetwork sets the "network" field.
func (u *BlockHeightUpsertBulk) SetNetwork(v schematype.Network) *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.SetNetwork(v)
	})
}

// UpdateNetwork sets the "network" field to the value that was provided on create.
func (u *BlockHeightUpsertBulk) UpdateNetwork() *BlockHeightUpsertBulk {
	return u.Update(func(s *BlockHeightUpsert) {
		s.UpdateNetwork()
	})
}

// Exec executes the query.
func (u *BlockHeightUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockHeightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockHeightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockHeightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
