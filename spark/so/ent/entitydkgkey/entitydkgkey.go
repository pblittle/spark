// Code generated by ent, DO NOT EDIT.

package entitydkgkey

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the entitydkgkey type in the database.
	Label = "entity_dkg_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldKeyType holds the string denoting the key_type field in the database.
	FieldKeyType = "key_type"
	// EdgeSigningKeyshare holds the string denoting the signing_keyshare edge name in mutations.
	EdgeSigningKeyshare = "signing_keyshare"
	// Table holds the table name of the entitydkgkey in the database.
	Table = "entity_dkg_keys"
	// SigningKeyshareTable is the table that holds the signing_keyshare relation/edge.
	SigningKeyshareTable = "entity_dkg_keys"
	// SigningKeyshareInverseTable is the table name for the SigningKeyshare entity.
	// It exists in this package in order to avoid circular dependency with the "signingkeyshare" package.
	SigningKeyshareInverseTable = "signing_keyshares"
	// SigningKeyshareColumn is the table column denoting the signing_keyshare relation/edge.
	SigningKeyshareColumn = "entity_dkg_key_signing_keyshare"
)

// Columns holds all SQL columns for entitydkgkey fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldKeyType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entity_dkg_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_dkg_key_signing_keyshare",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultKeyType holds the default value on creation for the "key_type" field.
	DefaultKeyType string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EntityDkgKey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByKeyType orders the results by the key_type field.
func ByKeyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyType, opts...).ToFunc()
}

// BySigningKeyshareField orders the results by signing_keyshare field.
func BySigningKeyshareField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSigningKeyshareStep(), sql.OrderByField(field, opts...))
	}
}
func newSigningKeyshareStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SigningKeyshareInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SigningKeyshareTable, SigningKeyshareColumn),
	)
}
