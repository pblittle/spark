// Code generated by ent, DO NOT EDIT.

package tree

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the tree type in the database.
	Label = "tree"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldOwnerIdentityPubkey holds the string denoting the owner_identity_pubkey field in the database.
	FieldOwnerIdentityPubkey = "owner_identity_pubkey"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// FieldBaseTxid holds the string denoting the base_txid field in the database.
	FieldBaseTxid = "base_txid"
	// FieldVout holds the string denoting the vout field in the database.
	FieldVout = "vout"
	// EdgeRoot holds the string denoting the root edge name in mutations.
	EdgeRoot = "root"
	// EdgeNodes holds the string denoting the nodes edge name in mutations.
	EdgeNodes = "nodes"
	// Table holds the table name of the tree in the database.
	Table = "trees"
	// RootTable is the table that holds the root relation/edge.
	RootTable = "trees"
	// RootInverseTable is the table name for the TreeNode entity.
	// It exists in this package in order to avoid circular dependency with the "treenode" package.
	RootInverseTable = "tree_nodes"
	// RootColumn is the table column denoting the root relation/edge.
	RootColumn = "tree_root"
	// NodesTable is the table that holds the nodes relation/edge.
	NodesTable = "tree_nodes"
	// NodesInverseTable is the table name for the TreeNode entity.
	// It exists in this package in order to avoid circular dependency with the "treenode" package.
	NodesInverseTable = "tree_nodes"
	// NodesColumn is the table column denoting the nodes relation/edge.
	NodesColumn = "tree_node_tree"
)

// Columns holds all SQL columns for tree fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldOwnerIdentityPubkey,
	FieldStatus,
	FieldNetwork,
	FieldBaseTxid,
	FieldVout,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tree_root",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// BaseTxidValidator is a validator for the "base_txid" field. It is called by the builders before save.
	BaseTxidValidator func([]byte) error
	// VoutValidator is a validator for the "vout" field. It is called by the builders before save.
	VoutValidator func(int16) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schematype.TreeStatus) error {
	switch s {
	case "PENDING", "AVAILABLE", "EXITED":
		return nil
	default:
		return fmt.Errorf("tree: invalid enum value for status field: %q", s)
	}
}

// NetworkValidator is a validator for the "network" field enum values. It is called by the builders before save.
func NetworkValidator(n schematype.Network) error {
	switch n {
	case "UNSPECIFIED", "MAINNET", "REGTEST", "TESTNET", "SIGNET":
		return nil
	default:
		return fmt.Errorf("tree: invalid enum value for network field: %q", n)
	}
}

// OrderOption defines the ordering options for the Tree queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByVout orders the results by the vout field.
func ByVout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVout, opts...).ToFunc()
}

// ByRootField orders the results by root field.
func ByRootField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRootStep(), sql.OrderByField(field, opts...))
	}
}

// ByNodesCount orders the results by nodes count.
func ByNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodesStep(), opts...)
	}
}

// ByNodes orders the results by nodes terms.
func ByNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRootStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RootInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RootTable, RootColumn),
	)
}
func newNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NodesTable, NodesColumn),
	)
}
