// Code generated by ent, DO NOT EDIT.

package tokenmint

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tokenmint type in the database.
	Label = "token_mint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldIssuerPublicKey holds the string denoting the issuer_public_key field in the database.
	FieldIssuerPublicKey = "issuer_public_key"
	// FieldWalletProvidedTimestamp holds the string denoting the wallet_provided_timestamp field in the database.
	FieldWalletProvidedTimestamp = "wallet_provided_timestamp"
	// FieldIssuerSignature holds the string denoting the issuer_signature field in the database.
	FieldIssuerSignature = "issuer_signature"
	// FieldOperatorSpecificIssuerSignature holds the string denoting the operator_specific_issuer_signature field in the database.
	FieldOperatorSpecificIssuerSignature = "operator_specific_issuer_signature"
	// FieldTokenIdentifier holds the string denoting the token_identifier field in the database.
	FieldTokenIdentifier = "token_identifier"
	// EdgeTokenTransaction holds the string denoting the token_transaction edge name in mutations.
	EdgeTokenTransaction = "token_transaction"
	// Table holds the table name of the tokenmint in the database.
	Table = "token_mints"
	// TokenTransactionTable is the table that holds the token_transaction relation/edge.
	TokenTransactionTable = "token_transactions"
	// TokenTransactionInverseTable is the table name for the TokenTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "tokentransaction" package.
	TokenTransactionInverseTable = "token_transactions"
	// TokenTransactionColumn is the table column denoting the token_transaction relation/edge.
	TokenTransactionColumn = "token_transaction_mint"
)

// Columns holds all SQL columns for tokenmint fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIssuerPublicKey,
	FieldWalletProvidedTimestamp,
	FieldIssuerSignature,
	FieldOperatorSpecificIssuerSignature,
	FieldTokenIdentifier,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/lightsparkdev/spark/so/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// IssuerSignatureValidator is a validator for the "issuer_signature" field. It is called by the builders before save.
	IssuerSignatureValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TokenMint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByWalletProvidedTimestamp orders the results by the wallet_provided_timestamp field.
func ByWalletProvidedTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletProvidedTimestamp, opts...).ToFunc()
}

// ByTokenTransactionCount orders the results by token_transaction count.
func ByTokenTransactionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokenTransactionStep(), opts...)
	}
}

// ByTokenTransaction orders the results by token_transaction terms.
func ByTokenTransaction(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenTransactionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokenTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenTransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TokenTransactionTable, TokenTransactionColumn),
	)
}
