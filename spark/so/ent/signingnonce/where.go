// Code generated by ent, DO NOT EDIT.

package signingnonce

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldUpdateTime, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldNonce, v))
}

// NonceCommitment applies equality check predicate on the "nonce_commitment" field. It's identical to NonceCommitmentEQ.
func NonceCommitment(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldNonceCommitment, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldMessage, v))
}

// RetryFingerprint applies equality check predicate on the "retry_fingerprint" field. It's identical to RetryFingerprintEQ.
func RetryFingerprint(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldRetryFingerprint, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldUpdateTime, v))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldNonce, v))
}

// NonceCommitmentEQ applies the EQ predicate on the "nonce_commitment" field.
func NonceCommitmentEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldNonceCommitment, v))
}

// NonceCommitmentNEQ applies the NEQ predicate on the "nonce_commitment" field.
func NonceCommitmentNEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldNonceCommitment, v))
}

// NonceCommitmentIn applies the In predicate on the "nonce_commitment" field.
func NonceCommitmentIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldNonceCommitment, vs...))
}

// NonceCommitmentNotIn applies the NotIn predicate on the "nonce_commitment" field.
func NonceCommitmentNotIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldNonceCommitment, vs...))
}

// NonceCommitmentGT applies the GT predicate on the "nonce_commitment" field.
func NonceCommitmentGT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldNonceCommitment, v))
}

// NonceCommitmentGTE applies the GTE predicate on the "nonce_commitment" field.
func NonceCommitmentGTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldNonceCommitment, v))
}

// NonceCommitmentLT applies the LT predicate on the "nonce_commitment" field.
func NonceCommitmentLT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldNonceCommitment, v))
}

// NonceCommitmentLTE applies the LTE predicate on the "nonce_commitment" field.
func NonceCommitmentLTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldNonceCommitment, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotNull(FieldMessage))
}

// RetryFingerprintEQ applies the EQ predicate on the "retry_fingerprint" field.
func RetryFingerprintEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldEQ(FieldRetryFingerprint, v))
}

// RetryFingerprintNEQ applies the NEQ predicate on the "retry_fingerprint" field.
func RetryFingerprintNEQ(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNEQ(FieldRetryFingerprint, v))
}

// RetryFingerprintIn applies the In predicate on the "retry_fingerprint" field.
func RetryFingerprintIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIn(FieldRetryFingerprint, vs...))
}

// RetryFingerprintNotIn applies the NotIn predicate on the "retry_fingerprint" field.
func RetryFingerprintNotIn(vs ...[]byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotIn(FieldRetryFingerprint, vs...))
}

// RetryFingerprintGT applies the GT predicate on the "retry_fingerprint" field.
func RetryFingerprintGT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGT(FieldRetryFingerprint, v))
}

// RetryFingerprintGTE applies the GTE predicate on the "retry_fingerprint" field.
func RetryFingerprintGTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldGTE(FieldRetryFingerprint, v))
}

// RetryFingerprintLT applies the LT predicate on the "retry_fingerprint" field.
func RetryFingerprintLT(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLT(FieldRetryFingerprint, v))
}

// RetryFingerprintLTE applies the LTE predicate on the "retry_fingerprint" field.
func RetryFingerprintLTE(v []byte) predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldLTE(FieldRetryFingerprint, v))
}

// RetryFingerprintIsNil applies the IsNil predicate on the "retry_fingerprint" field.
func RetryFingerprintIsNil() predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldIsNull(FieldRetryFingerprint))
}

// RetryFingerprintNotNil applies the NotNil predicate on the "retry_fingerprint" field.
func RetryFingerprintNotNil() predicate.SigningNonce {
	return predicate.SigningNonce(sql.FieldNotNull(FieldRetryFingerprint))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SigningNonce) predicate.SigningNonce {
	return predicate.SigningNonce(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SigningNonce) predicate.SigningNonce {
	return predicate.SigningNonce(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SigningNonce) predicate.SigningNonce {
	return predicate.SigningNonce(sql.NotPredicates(p))
}
