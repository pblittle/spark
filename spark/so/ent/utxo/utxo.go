// Code generated by ent, DO NOT EDIT.

package utxo

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the utxo type in the database.
	Label = "utxo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldBlockHeight holds the string denoting the block_height field in the database.
	FieldBlockHeight = "block_height"
	// FieldTxid holds the string denoting the txid field in the database.
	FieldTxid = "txid"
	// FieldVout holds the string denoting the vout field in the database.
	FieldVout = "vout"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldNetwork holds the string denoting the network field in the database.
	FieldNetwork = "network"
	// FieldPkScript holds the string denoting the pk_script field in the database.
	FieldPkScript = "pk_script"
	// EdgeDepositAddress holds the string denoting the deposit_address edge name in mutations.
	EdgeDepositAddress = "deposit_address"
	// Table holds the table name of the utxo in the database.
	Table = "utxos"
	// DepositAddressTable is the table that holds the deposit_address relation/edge.
	DepositAddressTable = "utxos"
	// DepositAddressInverseTable is the table name for the DepositAddress entity.
	// It exists in this package in order to avoid circular dependency with the "depositaddress" package.
	DepositAddressInverseTable = "deposit_addresses"
	// DepositAddressColumn is the table column denoting the deposit_address relation/edge.
	DepositAddressColumn = "deposit_address_utxo"
)

// Columns holds all SQL columns for utxo fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldBlockHeight,
	FieldTxid,
	FieldVout,
	FieldAmount,
	FieldNetwork,
	FieldPkScript,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "utxos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deposit_address_utxo",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TxidValidator is a validator for the "txid" field. It is called by the builders before save.
	TxidValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// NetworkValidator is a validator for the "network" field enum values. It is called by the builders before save.
func NetworkValidator(n schematype.Network) error {
	switch n {
	case "UNSPECIFIED", "MAINNET", "REGTEST", "TESTNET", "SIGNET":
		return nil
	default:
		return fmt.Errorf("utxo: invalid enum value for network field: %q", n)
	}
}

// OrderOption defines the ordering options for the Utxo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByBlockHeight orders the results by the block_height field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}

// ByVout orders the results by the vout field.
func ByVout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVout, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByNetwork orders the results by the network field.
func ByNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetwork, opts...).ToFunc()
}

// ByDepositAddressField orders the results by deposit_address field.
func ByDepositAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepositAddressStep(), sql.OrderByField(field, opts...))
	}
}
func newDepositAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepositAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepositAddressTable, DepositAddressColumn),
	)
}
