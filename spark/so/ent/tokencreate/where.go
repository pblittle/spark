// Code generated by ent, DO NOT EDIT.

package tokencreate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/common/keys"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldUpdateTime, v))
}

// IssuerPublicKey applies equality check predicate on the "issuer_public_key" field. It's identical to IssuerPublicKeyEQ.
func IssuerPublicKey(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIssuerPublicKey, v))
}

// TokenName applies equality check predicate on the "token_name" field. It's identical to TokenNameEQ.
func TokenName(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenName, v))
}

// TokenTicker applies equality check predicate on the "token_ticker" field. It's identical to TokenTickerEQ.
func TokenTicker(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenTicker, v))
}

// Decimals applies equality check predicate on the "decimals" field. It's identical to DecimalsEQ.
func Decimals(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldDecimals, v))
}

// MaxSupply applies equality check predicate on the "max_supply" field. It's identical to MaxSupplyEQ.
func MaxSupply(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldMaxSupply, v))
}

// IsFreezable applies equality check predicate on the "is_freezable" field. It's identical to IsFreezableEQ.
func IsFreezable(v bool) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIsFreezable, v))
}

// TokenIdentifier applies equality check predicate on the "token_identifier" field. It's identical to TokenIdentifierEQ.
func TokenIdentifier(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenIdentifier, v))
}

// IssuerSignature applies equality check predicate on the "issuer_signature" field. It's identical to IssuerSignatureEQ.
func IssuerSignature(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIssuerSignature, v))
}

// OperatorSpecificIssuerSignature applies equality check predicate on the "operator_specific_issuer_signature" field. It's identical to OperatorSpecificIssuerSignatureEQ.
func OperatorSpecificIssuerSignature(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldOperatorSpecificIssuerSignature, v))
}

// CreationEntityPublicKey applies equality check predicate on the "creation_entity_public_key" field. It's identical to CreationEntityPublicKeyEQ.
func CreationEntityPublicKey(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldCreationEntityPublicKey, v))
}

// WalletProvidedTimestamp applies equality check predicate on the "wallet_provided_timestamp" field. It's identical to WalletProvidedTimestampEQ.
func WalletProvidedTimestamp(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldWalletProvidedTimestamp, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldUpdateTime, v))
}

// IssuerPublicKeyEQ applies the EQ predicate on the "issuer_public_key" field.
func IssuerPublicKeyEQ(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIssuerPublicKey, v))
}

// IssuerPublicKeyNEQ applies the NEQ predicate on the "issuer_public_key" field.
func IssuerPublicKeyNEQ(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldIssuerPublicKey, v))
}

// IssuerPublicKeyIn applies the In predicate on the "issuer_public_key" field.
func IssuerPublicKeyIn(vs ...keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldIssuerPublicKey, vs...))
}

// IssuerPublicKeyNotIn applies the NotIn predicate on the "issuer_public_key" field.
func IssuerPublicKeyNotIn(vs ...keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldIssuerPublicKey, vs...))
}

// IssuerPublicKeyGT applies the GT predicate on the "issuer_public_key" field.
func IssuerPublicKeyGT(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldIssuerPublicKey, v))
}

// IssuerPublicKeyGTE applies the GTE predicate on the "issuer_public_key" field.
func IssuerPublicKeyGTE(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldIssuerPublicKey, v))
}

// IssuerPublicKeyLT applies the LT predicate on the "issuer_public_key" field.
func IssuerPublicKeyLT(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldIssuerPublicKey, v))
}

// IssuerPublicKeyLTE applies the LTE predicate on the "issuer_public_key" field.
func IssuerPublicKeyLTE(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldIssuerPublicKey, v))
}

// TokenNameEQ applies the EQ predicate on the "token_name" field.
func TokenNameEQ(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenName, v))
}

// TokenNameNEQ applies the NEQ predicate on the "token_name" field.
func TokenNameNEQ(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldTokenName, v))
}

// TokenNameIn applies the In predicate on the "token_name" field.
func TokenNameIn(vs ...string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldTokenName, vs...))
}

// TokenNameNotIn applies the NotIn predicate on the "token_name" field.
func TokenNameNotIn(vs ...string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldTokenName, vs...))
}

// TokenNameGT applies the GT predicate on the "token_name" field.
func TokenNameGT(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldTokenName, v))
}

// TokenNameGTE applies the GTE predicate on the "token_name" field.
func TokenNameGTE(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldTokenName, v))
}

// TokenNameLT applies the LT predicate on the "token_name" field.
func TokenNameLT(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldTokenName, v))
}

// TokenNameLTE applies the LTE predicate on the "token_name" field.
func TokenNameLTE(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldTokenName, v))
}

// TokenNameContains applies the Contains predicate on the "token_name" field.
func TokenNameContains(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldContains(FieldTokenName, v))
}

// TokenNameHasPrefix applies the HasPrefix predicate on the "token_name" field.
func TokenNameHasPrefix(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldHasPrefix(FieldTokenName, v))
}

// TokenNameHasSuffix applies the HasSuffix predicate on the "token_name" field.
func TokenNameHasSuffix(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldHasSuffix(FieldTokenName, v))
}

// TokenNameEqualFold applies the EqualFold predicate on the "token_name" field.
func TokenNameEqualFold(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEqualFold(FieldTokenName, v))
}

// TokenNameContainsFold applies the ContainsFold predicate on the "token_name" field.
func TokenNameContainsFold(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldContainsFold(FieldTokenName, v))
}

// TokenTickerEQ applies the EQ predicate on the "token_ticker" field.
func TokenTickerEQ(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenTicker, v))
}

// TokenTickerNEQ applies the NEQ predicate on the "token_ticker" field.
func TokenTickerNEQ(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldTokenTicker, v))
}

// TokenTickerIn applies the In predicate on the "token_ticker" field.
func TokenTickerIn(vs ...string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldTokenTicker, vs...))
}

// TokenTickerNotIn applies the NotIn predicate on the "token_ticker" field.
func TokenTickerNotIn(vs ...string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldTokenTicker, vs...))
}

// TokenTickerGT applies the GT predicate on the "token_ticker" field.
func TokenTickerGT(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldTokenTicker, v))
}

// TokenTickerGTE applies the GTE predicate on the "token_ticker" field.
func TokenTickerGTE(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldTokenTicker, v))
}

// TokenTickerLT applies the LT predicate on the "token_ticker" field.
func TokenTickerLT(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldTokenTicker, v))
}

// TokenTickerLTE applies the LTE predicate on the "token_ticker" field.
func TokenTickerLTE(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldTokenTicker, v))
}

// TokenTickerContains applies the Contains predicate on the "token_ticker" field.
func TokenTickerContains(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldContains(FieldTokenTicker, v))
}

// TokenTickerHasPrefix applies the HasPrefix predicate on the "token_ticker" field.
func TokenTickerHasPrefix(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldHasPrefix(FieldTokenTicker, v))
}

// TokenTickerHasSuffix applies the HasSuffix predicate on the "token_ticker" field.
func TokenTickerHasSuffix(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldHasSuffix(FieldTokenTicker, v))
}

// TokenTickerEqualFold applies the EqualFold predicate on the "token_ticker" field.
func TokenTickerEqualFold(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEqualFold(FieldTokenTicker, v))
}

// TokenTickerContainsFold applies the ContainsFold predicate on the "token_ticker" field.
func TokenTickerContainsFold(v string) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldContainsFold(FieldTokenTicker, v))
}

// DecimalsEQ applies the EQ predicate on the "decimals" field.
func DecimalsEQ(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldDecimals, v))
}

// DecimalsNEQ applies the NEQ predicate on the "decimals" field.
func DecimalsNEQ(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldDecimals, v))
}

// DecimalsIn applies the In predicate on the "decimals" field.
func DecimalsIn(vs ...uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldDecimals, vs...))
}

// DecimalsNotIn applies the NotIn predicate on the "decimals" field.
func DecimalsNotIn(vs ...uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldDecimals, vs...))
}

// DecimalsGT applies the GT predicate on the "decimals" field.
func DecimalsGT(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldDecimals, v))
}

// DecimalsGTE applies the GTE predicate on the "decimals" field.
func DecimalsGTE(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldDecimals, v))
}

// DecimalsLT applies the LT predicate on the "decimals" field.
func DecimalsLT(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldDecimals, v))
}

// DecimalsLTE applies the LTE predicate on the "decimals" field.
func DecimalsLTE(v uint8) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldDecimals, v))
}

// MaxSupplyEQ applies the EQ predicate on the "max_supply" field.
func MaxSupplyEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldMaxSupply, v))
}

// MaxSupplyNEQ applies the NEQ predicate on the "max_supply" field.
func MaxSupplyNEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldMaxSupply, v))
}

// MaxSupplyIn applies the In predicate on the "max_supply" field.
func MaxSupplyIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldMaxSupply, vs...))
}

// MaxSupplyNotIn applies the NotIn predicate on the "max_supply" field.
func MaxSupplyNotIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldMaxSupply, vs...))
}

// MaxSupplyGT applies the GT predicate on the "max_supply" field.
func MaxSupplyGT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldMaxSupply, v))
}

// MaxSupplyGTE applies the GTE predicate on the "max_supply" field.
func MaxSupplyGTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldMaxSupply, v))
}

// MaxSupplyLT applies the LT predicate on the "max_supply" field.
func MaxSupplyLT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldMaxSupply, v))
}

// MaxSupplyLTE applies the LTE predicate on the "max_supply" field.
func MaxSupplyLTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldMaxSupply, v))
}

// IsFreezableEQ applies the EQ predicate on the "is_freezable" field.
func IsFreezableEQ(v bool) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIsFreezable, v))
}

// IsFreezableNEQ applies the NEQ predicate on the "is_freezable" field.
func IsFreezableNEQ(v bool) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldIsFreezable, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v schematype.Network) predicate.TokenCreate {
	vc := v
	return predicate.TokenCreate(sql.FieldEQ(FieldNetwork, vc))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v schematype.Network) predicate.TokenCreate {
	vc := v
	return predicate.TokenCreate(sql.FieldNEQ(FieldNetwork, vc))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...schematype.Network) predicate.TokenCreate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenCreate(sql.FieldIn(FieldNetwork, v...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...schematype.Network) predicate.TokenCreate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenCreate(sql.FieldNotIn(FieldNetwork, v...))
}

// TokenIdentifierEQ applies the EQ predicate on the "token_identifier" field.
func TokenIdentifierEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldTokenIdentifier, v))
}

// TokenIdentifierNEQ applies the NEQ predicate on the "token_identifier" field.
func TokenIdentifierNEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldTokenIdentifier, v))
}

// TokenIdentifierIn applies the In predicate on the "token_identifier" field.
func TokenIdentifierIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldTokenIdentifier, vs...))
}

// TokenIdentifierNotIn applies the NotIn predicate on the "token_identifier" field.
func TokenIdentifierNotIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldTokenIdentifier, vs...))
}

// TokenIdentifierGT applies the GT predicate on the "token_identifier" field.
func TokenIdentifierGT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldTokenIdentifier, v))
}

// TokenIdentifierGTE applies the GTE predicate on the "token_identifier" field.
func TokenIdentifierGTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldTokenIdentifier, v))
}

// TokenIdentifierLT applies the LT predicate on the "token_identifier" field.
func TokenIdentifierLT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldTokenIdentifier, v))
}

// TokenIdentifierLTE applies the LTE predicate on the "token_identifier" field.
func TokenIdentifierLTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldTokenIdentifier, v))
}

// IssuerSignatureEQ applies the EQ predicate on the "issuer_signature" field.
func IssuerSignatureEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldIssuerSignature, v))
}

// IssuerSignatureNEQ applies the NEQ predicate on the "issuer_signature" field.
func IssuerSignatureNEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldIssuerSignature, v))
}

// IssuerSignatureIn applies the In predicate on the "issuer_signature" field.
func IssuerSignatureIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldIssuerSignature, vs...))
}

// IssuerSignatureNotIn applies the NotIn predicate on the "issuer_signature" field.
func IssuerSignatureNotIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldIssuerSignature, vs...))
}

// IssuerSignatureGT applies the GT predicate on the "issuer_signature" field.
func IssuerSignatureGT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldIssuerSignature, v))
}

// IssuerSignatureGTE applies the GTE predicate on the "issuer_signature" field.
func IssuerSignatureGTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldIssuerSignature, v))
}

// IssuerSignatureLT applies the LT predicate on the "issuer_signature" field.
func IssuerSignatureLT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldIssuerSignature, v))
}

// IssuerSignatureLTE applies the LTE predicate on the "issuer_signature" field.
func IssuerSignatureLTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldIssuerSignature, v))
}

// IssuerSignatureIsNil applies the IsNil predicate on the "issuer_signature" field.
func IssuerSignatureIsNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIsNull(FieldIssuerSignature))
}

// IssuerSignatureNotNil applies the NotNil predicate on the "issuer_signature" field.
func IssuerSignatureNotNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotNull(FieldIssuerSignature))
}

// OperatorSpecificIssuerSignatureEQ applies the EQ predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureNEQ applies the NEQ predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureNEQ(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureIn applies the In predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldOperatorSpecificIssuerSignature, vs...))
}

// OperatorSpecificIssuerSignatureNotIn applies the NotIn predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureNotIn(vs ...[]byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldOperatorSpecificIssuerSignature, vs...))
}

// OperatorSpecificIssuerSignatureGT applies the GT predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureGT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureGTE applies the GTE predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureGTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureLT applies the LT predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureLT(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureLTE applies the LTE predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureLTE(v []byte) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldOperatorSpecificIssuerSignature, v))
}

// OperatorSpecificIssuerSignatureIsNil applies the IsNil predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureIsNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIsNull(FieldOperatorSpecificIssuerSignature))
}

// OperatorSpecificIssuerSignatureNotNil applies the NotNil predicate on the "operator_specific_issuer_signature" field.
func OperatorSpecificIssuerSignatureNotNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotNull(FieldOperatorSpecificIssuerSignature))
}

// CreationEntityPublicKeyEQ applies the EQ predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyEQ(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldCreationEntityPublicKey, v))
}

// CreationEntityPublicKeyNEQ applies the NEQ predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyNEQ(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldCreationEntityPublicKey, v))
}

// CreationEntityPublicKeyIn applies the In predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyIn(vs ...keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldCreationEntityPublicKey, vs...))
}

// CreationEntityPublicKeyNotIn applies the NotIn predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyNotIn(vs ...keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldCreationEntityPublicKey, vs...))
}

// CreationEntityPublicKeyGT applies the GT predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyGT(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldCreationEntityPublicKey, v))
}

// CreationEntityPublicKeyGTE applies the GTE predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyGTE(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldCreationEntityPublicKey, v))
}

// CreationEntityPublicKeyLT applies the LT predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyLT(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldCreationEntityPublicKey, v))
}

// CreationEntityPublicKeyLTE applies the LTE predicate on the "creation_entity_public_key" field.
func CreationEntityPublicKeyLTE(v keys.Public) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldCreationEntityPublicKey, v))
}

// WalletProvidedTimestampEQ applies the EQ predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampEQ(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldEQ(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampNEQ applies the NEQ predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampNEQ(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNEQ(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampIn applies the In predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampIn(vs ...uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIn(FieldWalletProvidedTimestamp, vs...))
}

// WalletProvidedTimestampNotIn applies the NotIn predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampNotIn(vs ...uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotIn(FieldWalletProvidedTimestamp, vs...))
}

// WalletProvidedTimestampGT applies the GT predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampGT(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGT(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampGTE applies the GTE predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampGTE(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldGTE(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampLT applies the LT predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampLT(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLT(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampLTE applies the LTE predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampLTE(v uint64) predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldLTE(FieldWalletProvidedTimestamp, v))
}

// WalletProvidedTimestampIsNil applies the IsNil predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampIsNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldIsNull(FieldWalletProvidedTimestamp))
}

// WalletProvidedTimestampNotNil applies the NotNil predicate on the "wallet_provided_timestamp" field.
func WalletProvidedTimestampNotNil() predicate.TokenCreate {
	return predicate.TokenCreate(sql.FieldNotNull(FieldWalletProvidedTimestamp))
}

// HasTokenTransaction applies the HasEdge predicate on the "token_transaction" edge.
func HasTokenTransaction() predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TokenTransactionTable, TokenTransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenTransactionWith applies the HasEdge predicate on the "token_transaction" edge with a given conditions (other predicates).
func HasTokenTransactionWith(preds ...predicate.TokenTransaction) predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := newTokenTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasL1TokenCreate applies the HasEdge predicate on the "l1_token_create" edge.
func HasL1TokenCreate() predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, L1TokenCreateTable, L1TokenCreateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasL1TokenCreateWith applies the HasEdge predicate on the "l1_token_create" edge with a given conditions (other predicates).
func HasL1TokenCreateWith(preds ...predicate.L1TokenCreate) predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := newL1TokenCreateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokenOutput applies the HasEdge predicate on the "token_output" edge.
func HasTokenOutput() predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokenOutputTable, TokenOutputColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenOutputWith applies the HasEdge predicate on the "token_output" edge with a given conditions (other predicates).
func HasTokenOutputWith(preds ...predicate.TokenOutput) predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := newTokenOutputStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokenFreeze applies the HasEdge predicate on the "token_freeze" edge.
func HasTokenFreeze() predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokenFreezeTable, TokenFreezeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokenFreezeWith applies the HasEdge predicate on the "token_freeze" edge with a given conditions (other predicates).
func HasTokenFreezeWith(preds ...predicate.TokenFreeze) predicate.TokenCreate {
	return predicate.TokenCreate(func(s *sql.Selector) {
		step := newTokenFreezeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TokenCreate) predicate.TokenCreate {
	return predicate.TokenCreate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TokenCreate) predicate.TokenCreate {
	return predicate.TokenCreate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TokenCreate) predicate.TokenCreate {
	return predicate.TokenCreate(sql.NotPredicates(p))
}
