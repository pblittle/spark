// Code generated by ent, DO NOT EDIT.

package signingkeyshare

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

const (
	// Label holds the string label denoting the signingkeyshare type in the database.
	Label = "signing_keyshare"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSecretShare holds the string denoting the secret_share field in the database.
	FieldSecretShare = "secret_share"
	// FieldPublicShares holds the string denoting the public_shares field in the database.
	FieldPublicShares = "public_shares"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldMinSigners holds the string denoting the min_signers field in the database.
	FieldMinSigners = "min_signers"
	// FieldCoordinatorIndex holds the string denoting the coordinator_index field in the database.
	FieldCoordinatorIndex = "coordinator_index"
	// Table holds the table name of the signingkeyshare in the database.
	Table = "signing_keyshares"
)

// Columns holds all SQL columns for signingkeyshare fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldSecretShare,
	FieldPublicShares,
	FieldPublicKey,
	FieldMinSigners,
	FieldCoordinatorIndex,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schematype.SigningKeyshareStatus) error {
	switch s {
	case "AVAILABLE", "IN_USE":
		return nil
	default:
		return fmt.Errorf("signingkeyshare: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SigningKeyshare queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMinSigners orders the results by the min_signers field.
func ByMinSigners(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinSigners, opts...).ToFunc()
}

// ByCoordinatorIndex orders the results by the coordinator_index field.
func ByCoordinatorIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinatorIndex, opts...).ToFunc()
}
