// Code generated by ent, DO NOT EDIT.

package signingkeyshare

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark/common/keys"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldUpdateTime, v))
}

// SecretShare applies equality check predicate on the "secret_share" field. It's identical to SecretShareEQ.
func SecretShare(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldSecretShare, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldPublicKey, v))
}

// MinSigners applies equality check predicate on the "min_signers" field. It's identical to MinSignersEQ.
func MinSigners(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldMinSigners, v))
}

// CoordinatorIndex applies equality check predicate on the "coordinator_index" field. It's identical to CoordinatorIndexEQ.
func CoordinatorIndex(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldCoordinatorIndex, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldUpdateTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schematype.SigningKeyshareStatus) predicate.SigningKeyshare {
	vc := v
	return predicate.SigningKeyshare(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schematype.SigningKeyshareStatus) predicate.SigningKeyshare {
	vc := v
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schematype.SigningKeyshareStatus) predicate.SigningKeyshare {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SigningKeyshare(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schematype.SigningKeyshareStatus) predicate.SigningKeyshare {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldStatus, v...))
}

// SecretShareEQ applies the EQ predicate on the "secret_share" field.
func SecretShareEQ(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldSecretShare, v))
}

// SecretShareNEQ applies the NEQ predicate on the "secret_share" field.
func SecretShareNEQ(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldSecretShare, v))
}

// SecretShareIn applies the In predicate on the "secret_share" field.
func SecretShareIn(vs ...[]byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldSecretShare, vs...))
}

// SecretShareNotIn applies the NotIn predicate on the "secret_share" field.
func SecretShareNotIn(vs ...[]byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldSecretShare, vs...))
}

// SecretShareGT applies the GT predicate on the "secret_share" field.
func SecretShareGT(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldSecretShare, v))
}

// SecretShareGTE applies the GTE predicate on the "secret_share" field.
func SecretShareGTE(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldSecretShare, v))
}

// SecretShareLT applies the LT predicate on the "secret_share" field.
func SecretShareLT(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldSecretShare, v))
}

// SecretShareLTE applies the LTE predicate on the "secret_share" field.
func SecretShareLTE(v []byte) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldSecretShare, v))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v keys.Public) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldPublicKey, v))
}

// MinSignersEQ applies the EQ predicate on the "min_signers" field.
func MinSignersEQ(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldMinSigners, v))
}

// MinSignersNEQ applies the NEQ predicate on the "min_signers" field.
func MinSignersNEQ(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldMinSigners, v))
}

// MinSignersIn applies the In predicate on the "min_signers" field.
func MinSignersIn(vs ...int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldMinSigners, vs...))
}

// MinSignersNotIn applies the NotIn predicate on the "min_signers" field.
func MinSignersNotIn(vs ...int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldMinSigners, vs...))
}

// MinSignersGT applies the GT predicate on the "min_signers" field.
func MinSignersGT(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldMinSigners, v))
}

// MinSignersGTE applies the GTE predicate on the "min_signers" field.
func MinSignersGTE(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldMinSigners, v))
}

// MinSignersLT applies the LT predicate on the "min_signers" field.
func MinSignersLT(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldMinSigners, v))
}

// MinSignersLTE applies the LTE predicate on the "min_signers" field.
func MinSignersLTE(v int32) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldMinSigners, v))
}

// CoordinatorIndexEQ applies the EQ predicate on the "coordinator_index" field.
func CoordinatorIndexEQ(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldEQ(FieldCoordinatorIndex, v))
}

// CoordinatorIndexNEQ applies the NEQ predicate on the "coordinator_index" field.
func CoordinatorIndexNEQ(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNEQ(FieldCoordinatorIndex, v))
}

// CoordinatorIndexIn applies the In predicate on the "coordinator_index" field.
func CoordinatorIndexIn(vs ...uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldIn(FieldCoordinatorIndex, vs...))
}

// CoordinatorIndexNotIn applies the NotIn predicate on the "coordinator_index" field.
func CoordinatorIndexNotIn(vs ...uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldNotIn(FieldCoordinatorIndex, vs...))
}

// CoordinatorIndexGT applies the GT predicate on the "coordinator_index" field.
func CoordinatorIndexGT(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGT(FieldCoordinatorIndex, v))
}

// CoordinatorIndexGTE applies the GTE predicate on the "coordinator_index" field.
func CoordinatorIndexGTE(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldGTE(FieldCoordinatorIndex, v))
}

// CoordinatorIndexLT applies the LT predicate on the "coordinator_index" field.
func CoordinatorIndexLT(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLT(FieldCoordinatorIndex, v))
}

// CoordinatorIndexLTE applies the LTE predicate on the "coordinator_index" field.
func CoordinatorIndexLTE(v uint64) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.FieldLTE(FieldCoordinatorIndex, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SigningKeyshare) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SigningKeyshare) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SigningKeyshare) predicate.SigningKeyshare {
	return predicate.SigningKeyshare(sql.NotPredicates(p))
}
